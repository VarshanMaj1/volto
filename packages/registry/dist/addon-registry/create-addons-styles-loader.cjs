"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/addon-registry/create-addons-styles-loader.ts
var create_addons_styles_loader_exports = {};
__export(create_addons_styles_loader_exports, {
  buildLoaderCode: () => buildLoaderCode,
  createAddonsStyleLoader: () => createAddonsStyleLoader
});
module.exports = __toCommonJS(create_addons_styles_loader_exports);
var import_fs = __toESM(require("fs"), 1);
var import_path = __toESM(require("path"), 1);
function buildLoaderCode(addonsStylesInfo = []) {
  let buf = `/*
Don't change this file manually.
It is autogenerated by @plone/registry.
Add a ./styles/main.css in your add-on to load your add-on styles in the app.
*/

`;
  addonsStylesInfo.forEach((addon) => {
    const customization = `${addon}/styles/main.css`;
    const line = `@import '${customization}';
`;
    buf += line;
  });
  return buf;
}
function createAddonsStyleLoader(addonsStylesInfo) {
  const addonsLoaderPath = import_path.default.join(process.cwd(), "addons.styles.css");
  import_fs.default.writeFileSync(addonsLoaderPath, buildLoaderCode(addonsStylesInfo));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildLoaderCode,
  createAddonsStyleLoader
});
