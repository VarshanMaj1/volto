{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"item\", \"imageField\", \"src\", \"alt\", \"loading\", \"responsive\", \"className\"];\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Image/Image.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { flattenToAppURL, flattenScales } from '@plone/volto/helpers/Url/Url';\n\n/**\n * Image component\n * @param {object} item - Context item that has the image field (can also be a catalog brain or summary)\n * @param {string} imageField - Key of the image field inside the item, or inside the image_scales object of the item if it is a catalog brain or summary\n * @param {string} src - URL of the image to be used if the item field is not available\n * @param {string} alt - Alternative text for the image\n * @param {boolean} loading - (default: eager) set to `lazy` to lazy load the image\n * @param {boolean} responsive - (default: false) set to `true` to add the `responsive` class to the image\n * @param {string} className - Additional classes to add to the image\n */\nexport default function Image(_ref) {\n  let {\n      item,\n      imageField,\n      src,\n      alt = '',\n      loading = 'eager',\n      responsive = false,\n      className = ''\n    } = _ref,\n    imageProps = _objectWithoutProperties(_ref, _excluded);\n  if (!item && !src) return null;\n\n  // TypeScript hints for editor autocomplete :)\n  /** @type {React.ImgHTMLAttributes<HTMLImageElement>} */\n  const attrs = {};\n  if (!item && src) {\n    attrs.src = src;\n    attrs.className = cx(className, {\n      responsive\n    });\n  } else {\n    var _item$image_scales$im;\n    const isFromRealObject = !item.image_scales;\n    const imageFieldWithDefault = imageField || item.image_field || 'image';\n    const image = isFromRealObject ? flattenScales(item['@id'], item[imageFieldWithDefault]) : flattenScales(item['@id'], (_item$image_scales$im = item.image_scales[imageFieldWithDefault]) === null || _item$image_scales$im === void 0 ? void 0 : _item$image_scales$im[0]);\n    if (!image) return null;\n    const isSvg = image['content-type'] === 'image/svg+xml';\n    // In case `base_path` is present (`preview_image_link`) use it as base path\n    const basePath = image.base_path || item['@id'];\n    attrs.src = `${flattenToAppURL(basePath)}/${image.download}`;\n    attrs.width = image.width;\n    attrs.height = image.height;\n    attrs.className = cx(className, {\n      responsive\n    });\n    if (!isSvg && image.scales && Object.keys(image.scales).length > 0) {\n      const sortedScales = Object.values(_objectSpread(_objectSpread({}, image.scales), {}, {\n        original: {\n          download: `${image.download}`,\n          width: image.width,\n          height: image.height\n        }\n      })).sort((a, b) => {\n        if (a.width > b.width) return 1;else if (a.width < b.width) return -1;else return 0;\n      });\n      attrs.srcSet = sortedScales.map(scale => `${flattenToAppURL(basePath)}/${scale.download} ${scale.width}w`).join(', ');\n    }\n  }\n  if (loading === 'lazy') {\n    attrs.loading = 'lazy';\n    attrs.decoding = 'async';\n  } else {\n    attrs.fetchpriority = 'high';\n  }\n  return __jsx(\"img\", _extends({}, attrs, {\n    alt: alt\n  }, imageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  }));\n}\n_c = Image;\nImage.propTypes = {\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    image_field: PropTypes.string,\n    image_scales: PropTypes.object,\n    image: PropTypes.object\n  }),\n  imageField: PropTypes.string,\n  src: PropTypes.string,\n  alt: PropTypes.string.isRequired,\n  loading: PropTypes.string,\n  responsive: PropTypes.bool,\n  className: PropTypes.string\n};\nvar _c;\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"names":["PropTypes","cx","flattenToAppURL","flattenScales","Image","_ref","item","imageField","src","alt","loading","responsive","className","imageProps","_objectWithoutProperties","_excluded","attrs","_item$image_scales$im","isFromRealObject","image_scales","imageFieldWithDefault","image_field","image","isSvg","basePath","base_path","download","width","height","scales","Object","keys","length","sortedScales","values","_objectSpread","original","sort","a","b","srcSet","map","scale","join","decoding","fetchpriority","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","shape","string","object","isRequired","bool","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Image/Image.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { flattenToAppURL, flattenScales } from '@plone/volto/helpers/Url/Url';\n\n/**\n * Image component\n * @param {object} item - Context item that has the image field (can also be a catalog brain or summary)\n * @param {string} imageField - Key of the image field inside the item, or inside the image_scales object of the item if it is a catalog brain or summary\n * @param {string} src - URL of the image to be used if the item field is not available\n * @param {string} alt - Alternative text for the image\n * @param {boolean} loading - (default: eager) set to `lazy` to lazy load the image\n * @param {boolean} responsive - (default: false) set to `true` to add the `responsive` class to the image\n * @param {string} className - Additional classes to add to the image\n */\nexport default function Image({\n  item,\n  imageField,\n  src,\n  alt = '',\n  loading = 'eager',\n  responsive = false,\n  className = '',\n  ...imageProps\n}) {\n  if (!item && !src) return null;\n\n  // TypeScript hints for editor autocomplete :)\n  /** @type {React.ImgHTMLAttributes<HTMLImageElement>} */\n  const attrs = {};\n\n  if (!item && src) {\n    attrs.src = src;\n    attrs.className = cx(className, { responsive });\n  } else {\n    const isFromRealObject = !item.image_scales;\n    const imageFieldWithDefault = imageField || item.image_field || 'image';\n\n    const image = isFromRealObject\n      ? flattenScales(item['@id'], item[imageFieldWithDefault])\n      : flattenScales(\n          item['@id'],\n          item.image_scales[imageFieldWithDefault]?.[0],\n        );\n\n    if (!image) return null;\n\n    const isSvg = image['content-type'] === 'image/svg+xml';\n    // In case `base_path` is present (`preview_image_link`) use it as base path\n    const basePath = image.base_path || item['@id'];\n\n    attrs.src = `${flattenToAppURL(basePath)}/${image.download}`;\n    attrs.width = image.width;\n    attrs.height = image.height;\n    attrs.className = cx(className, { responsive });\n\n    if (!isSvg && image.scales && Object.keys(image.scales).length > 0) {\n      const sortedScales = Object.values({\n        ...image.scales,\n        original: {\n          download: `${image.download}`,\n          width: image.width,\n          height: image.height,\n        },\n      }).sort((a, b) => {\n        if (a.width > b.width) return 1;\n        else if (a.width < b.width) return -1;\n        else return 0;\n      });\n\n      attrs.srcSet = sortedScales\n        .map(\n          (scale) =>\n            `${flattenToAppURL(basePath)}/${scale.download} ${scale.width}w`,\n        )\n        .join(', ');\n    }\n  }\n\n  if (loading === 'lazy') {\n    attrs.loading = 'lazy';\n    attrs.decoding = 'async';\n  } else {\n    attrs.fetchpriority = 'high';\n  }\n\n  return <img {...attrs} alt={alt} {...imageProps} />;\n}\n\nImage.propTypes = {\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    image_field: PropTypes.string,\n    image_scales: PropTypes.object,\n    image: PropTypes.object,\n  }),\n  imageField: PropTypes.string,\n  src: PropTypes.string,\n  alt: PropTypes.string.isRequired,\n  loading: PropTypes.string,\n  responsive: PropTypes.bool,\n  className: PropTypes.string,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}