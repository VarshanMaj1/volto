{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Relations/RelationsListing.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React, { useEffect } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport uniqBy from 'lodash/uniqBy';\nimport { Checkbox, Message } from 'semantic-ui-react';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport { createRelations, deleteRelations, queryRelations } from '@plone/volto/actions/relations/relations';\nimport { resetSearchContent, searchContent } from '@plone/volto/actions/search/search';\nconst RelationsListing = ({\n  relationtype,\n  query_source,\n  query_target,\n  potential_sources_path,\n  potential_targets_path\n  // target_filter,\n}) => {\n  var _matrix_options, _matrix_options2;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const MAX = 40; // Maximum of rows and columns\n  const MAX_RELATIONS = 1000;\n  const stats = useSelector(state => {\n    var _state$relations, _state$relations$stat;\n    return ((_state$relations = state.relations) === null || _state$relations === void 0 ? void 0 : (_state$relations$stat = _state$relations.stats) === null || _state$relations$stat === void 0 ? void 0 : _state$relations$stat.data) || null;\n  });\n  let relations = useSelector(state => {\n    var _state$relations2, _state$relations2$rel, _state$relations2$rel2, _state$relations2$rel3;\n    return ((_state$relations2 = state.relations) === null || _state$relations2 === void 0 ? void 0 : (_state$relations2$rel = _state$relations2.relations) === null || _state$relations2$rel === void 0 ? void 0 : (_state$relations2$rel2 = _state$relations2$rel.data) === null || _state$relations2$rel2 === void 0 ? void 0 : (_state$relations2$rel3 = _state$relations2$rel2[relationtype]) === null || _state$relations2$rel3 === void 0 ? void 0 : _state$relations2$rel3.items) || [];\n  });\n  let potential_targets_objects = useSelector(state => {\n    var _state$search$subrequ;\n    return ((_state$search$subrequ = state.search.subrequests.potential_targets) === null || _state$search$subrequ === void 0 ? void 0 : _state$search$subrequ.items) || [];\n  });\n  let potential_sources_objects = useSelector(state => {\n    var _state$search$subrequ2;\n    return ((_state$search$subrequ2 = state.search.subrequests.potential_sources) === null || _state$search$subrequ2 === void 0 ? void 0 : _state$search$subrequ2.items) || [];\n  });\n  const staticCatalogVocabularyQuery = useSelector(state => {\n    var _state$relations3, _state$relations3$rel, _state$relations3$rel2, _state$relations3$rel3;\n    return ((_state$relations3 = state.relations) === null || _state$relations3 === void 0 ? void 0 : (_state$relations3$rel = _state$relations3.relations) === null || _state$relations3$rel === void 0 ? void 0 : (_state$relations3$rel2 = _state$relations3$rel.data) === null || _state$relations3$rel2 === void 0 ? void 0 : (_state$relations3$rel3 = _state$relations3$rel2[relationtype]) === null || _state$relations3$rel3 === void 0 ? void 0 : _state$relations3$rel3.staticCatalogVocabularyQuery) || {};\n  });\n\n  // Editable if plone.api.relations available\n  const editable = useSelector(state => {\n    var _state$relations4, _state$relations4$rel, _state$relations4$rel2, _state$relations4$rel3;\n    return ((_state$relations4 = state.relations) === null || _state$relations4 === void 0 ? void 0 : (_state$relations4$rel = _state$relations4.relations) === null || _state$relations4$rel === void 0 ? void 0 : (_state$relations4$rel2 = _state$relations4$rel.data) === null || _state$relations4$rel2 === void 0 ? void 0 : (_state$relations4$rel3 = _state$relations4$rel2[relationtype]) === null || _state$relations4$rel3 === void 0 ? void 0 : _state$relations4$rel3.readonly) !== true;\n  });\n  let relationMatrix = {};\n  relations.map(tpl => {\n    if (relationMatrix[tpl.source.UID]) {\n      relationMatrix[tpl.source.UID].targets.push(tpl.target);\n    } else {\n      relationMatrix[tpl.source.UID] = {\n        source: tpl.source,\n        targets: [tpl.target]\n      };\n    }\n    return relationMatrix;\n  });\n\n  // x-axis: relation targets\n  // ************************\n  let matrix_options = relations.map(relation => ({\n    value: relation.target.UID,\n    label: relation.target.title,\n    url: relation.target['@id'],\n    review_state: relation.target.review_state,\n    uid: relation.target.UID\n  }));\n  matrix_options = uniqBy(matrix_options, function (el) {\n    return el.value;\n  });\n\n  // Add potential targets\n  const potential_targets = potential_targets_objects.map(obj => ({\n    value: obj.UID,\n    label: obj.title,\n    url: obj['@id'],\n    review_state: obj.review_state,\n    uid: obj.UID\n  }));\n  // Just show potential targets if no querying\n  matrix_options = query_source === '' && query_target === '' && potential_sources_path !== '' && potential_targets_path !== '' ? potential_targets : [...matrix_options, ...potential_targets];\n  matrix_options = uniqBy(matrix_options, function (el) {\n    return el.value;\n  });\n  matrix_options.sort(function (a, b) {\n    var labelA = a.label.toUpperCase();\n    var labelB = b.label.toUpperCase();\n    if (labelA < labelB) {\n      return -1;\n    }\n    if (labelA > labelB) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // y-axis: relation sources\n  // ************************\n  let items = Object.keys(relationMatrix).map(key => ({\n    value: key,\n    label: relationMatrix[key].source.title,\n    targets: relationMatrix[key].targets.map(el => el.UID),\n    url: relationMatrix[key].source['@id'],\n    review_state: relationMatrix[key].source.review_state\n  }));\n  // Add potential sources\n  const potential_sources = potential_sources_objects.map(obj => {\n    var _relationMatrix$obj$U, _relationMatrix$obj$U2;\n    return {\n      value: obj.UID,\n      label: obj.title,\n      targets: ((_relationMatrix$obj$U = relationMatrix[obj.UID]) === null || _relationMatrix$obj$U === void 0 ? void 0 : (_relationMatrix$obj$U2 = _relationMatrix$obj$U.targets) === null || _relationMatrix$obj$U2 === void 0 ? void 0 : _relationMatrix$obj$U2.map(el => el.UID)) || [],\n      url: obj['@id'],\n      review_state: obj.review_state\n    };\n  });\n  items = query_source === '' && query_target === '' && potential_sources_path !== '' && potential_targets_path !== '' ? potential_sources : [...items, ...potential_sources];\n  items = uniqBy(items, function (el) {\n    return el.value;\n  });\n  items.sort(function (a, b) {\n    var labelA = a.label.toUpperCase();\n    var labelB = b.label.toUpperCase();\n    if (labelA < labelB) {\n      return -1;\n    }\n    if (labelA > labelB) {\n      return 1;\n    }\n    return 0;\n  });\n  useEffect(() => {\n    // If many relations, then fetch relations only with search query on source or target\n    if ((stats === null || stats === void 0 ? void 0 : stats.stats[relationtype]) <= MAX_RELATIONS) {\n      dispatch(queryRelations(relationtype));\n    } else {\n      dispatch(queryRelations(relationtype, false, null, null, null, query_source ? query_source.startsWith('/') ? query_source : `${query_source}*` : null, query_target ? query_target.startsWith('/') ? query_target : `${query_target}*` : null));\n    }\n  }, [dispatch, stats, relationtype, query_source, query_target]);\n\n  // Get potential source and target objects\n  useDeepCompareEffect(() => {\n    // Fetch fresh potential targets\n    if (potential_targets_path !== '/' && potential_targets_path !== '') {\n      dispatch(searchContent(potential_targets_path, _objectSpread({\n        SearchableText: query_target,\n        metadata_fields: ['UID'],\n        sort_on: 'sortable_title'\n      }, staticCatalogVocabularyQuery), 'potential_targets'));\n    } else {\n      dispatch(resetSearchContent('potential_targets'));\n    }\n\n    // Fetch fresh potential sources\n    if (potential_sources_path !== '/' && potential_sources_path !== '') {\n      dispatch(searchContent(potential_sources_path, {\n        SearchableText: query_source,\n        metadata_fields: ['UID'],\n        sort_on: 'sortable_title'\n        // No need to restrict here. ...staticCatalogVocabularyQuery,\n      }, 'potential_sources'));\n    } else {\n      dispatch(resetSearchContent('potential_sources'));\n    }\n  }, [dispatch, potential_targets_path, potential_sources_path, staticCatalogVocabularyQuery, query_source, query_target]);\n  function fetchRelations() {\n    dispatch(queryRelations(relationtype, false, null, null, null, query_source ? query_source.startsWith('/') ? query_source : `${query_source}*` : null, query_target ? query_target.startsWith('/') ? query_target : `${query_target}*` : null));\n  }\n  const onSelectOptionHandler = (relation, selectedvalue, checked) => {\n    let source = selectedvalue.y;\n    let target = selectedvalue.x;\n    const relation_data = [{\n      source: source,\n      target: target,\n      relation: relation\n    }];\n    dispatch(checked ? createRelations(relation_data) : deleteRelations(relation_data)).then(resp => {\n      fetchRelations();\n    }).then(() => {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.relationsUpdated),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n  const onSelectAllHandler = (target, items_ids, checked) => {\n    let relation_data = [];\n    items_ids.forEach(el => {\n      relation_data.push({\n        source: el,\n        target: target,\n        relation: relationtype\n      });\n    });\n    dispatch(checked ? createRelations(relation_data) : deleteRelations(relation_data)).then(resp => {\n      fetchRelations();\n    }).then(() => {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.relationsUpdated),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n  return __jsx(React.Fragment, null, matrix_options.length <= MAX && items.length <= MAX & matrix_options.length > 0 && items.length > 0 ? __jsx(\"div\", {\n    className: \"administration_matrix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"label-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"target-labels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 15\n    }\n  }, (_matrix_options = matrix_options) === null || _matrix_options === void 0 ? void 0 : _matrix_options.map(matrix_option => __jsx(\"div\", {\n    className: \"label-options-label inclined\",\n    id: `label-options-label-${matrix_option.value}`,\n    key: matrix_option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 21\n    }\n  }, __jsx(UniversalLink, {\n    href: matrix_option.url,\n    className: matrix_option.review_state !== 'published' ? 'not-published' : '',\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 23\n    }\n  }, __jsx(\"span\", {\n    className: \"label\",\n    title: matrix_option.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 25\n    }\n  }, matrix_option.label.length > 30 ? matrix_option.label.slice(0, 27) + '...' : matrix_option.label))))))), __jsx(\"div\", {\n    className: \"listing-row selectall\",\n    key: \"selectall\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"listing-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"matrix_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 17\n    }\n  }, !(relationtype === 'isReferencing' || relationtype === 'iterate-working-copy' || !editable) ? (_matrix_options2 = matrix_options) === null || _matrix_options2 === void 0 ? void 0 : _matrix_options2.map(matrix_option => __jsx(\"div\", {\n    key: matrix_option.value,\n    title: intl.formatMessage(messages.createOrDeleteRelationsToTarget) + ` '${matrix_option.label}'`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }, __jsx(Checkbox, {\n    className: \"toggle-target\",\n    defaultChecked: false,\n    onChange: (event, {\n      checked\n    }) => onSelectAllHandler(matrix_option.value, items.map(el => el.value), checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 25\n    }\n  }))) : __jsx(FormattedMessage, {\n    id: \"Read only for this type of relation.\",\n    defaultMessage: \"Read only for this type of relation.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 21\n    }\n  }))))), __jsx(\"div\", {\n    className: \"items\",\n    key: \"items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 11\n    }\n  }, __jsx(React.Fragment, null, !editable && __jsx(Message, {\n    warning: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Relations are editable with plone.api >= 2.0.3.\",\n    defaultMessage: \"Relations are editable with plone.api >= 2.0.3.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 19\n    }\n  })), items.map(item => {\n    var _matrix_options3;\n    return __jsx(\"div\", {\n      className: \"listing-row\",\n      key: item.id,\n      id: `source-row-${item.value}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"listing-item\",\n      key: item['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      title: item.label,\n      className: \"item-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 23\n      }\n    }, __jsx(UniversalLink, {\n      href: item.url,\n      className: item.review_state !== 'published' ? 'not-published' : '',\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 25\n      }\n    }, item.label.length > 25 ? item.label.slice(0, 22) + '...' : item.label))), __jsx(\"div\", {\n      className: \"matrix_options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 21\n      }\n    }, (_matrix_options3 = matrix_options) === null || _matrix_options3 === void 0 ? void 0 : _matrix_options3.map(matrix_option => __jsx(React.Fragment, {\n      key: matrix_option.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 25\n      }\n    }, __jsx(Checkbox, {\n      className: `checkbox_${matrix_option.value}`,\n      key: matrix_option.value,\n      title: matrix_option.title,\n      disabled: relationtype === 'isReferencing' || relationtype === 'iterate-working-copy' || !editable,\n      checked: item.targets.includes(matrix_option.value),\n      onChange: (event, {\n        checked\n      }) => {\n        onSelectOptionHandler(relationtype, {\n          x: matrix_option.value,\n          y: item.value\n        }, checked);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 27\n      }\n    }))))));\n  })))) : __jsx(\"div\", {\n    className: \"administration_matrix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }\n  }, matrix_options.length > MAX || items.length > MAX ? __jsx(FormattedMessage, {\n    id: \"narrowDownRelations\",\n    defaultMessage: \"Found {sources} sources and {targets} targets. Narrow down to {max}!\",\n    values: {\n      sources: items.length,\n      targets: matrix_options.length,\n      max: MAX\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }\n  }) : query_source || query_target ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }\n  }, intl.formatMessage(messages.norelationfound)) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }, intl.formatMessage(messages.toomanyrelationsfound))));\n};\nexport default RelationsListing;","map":{"version":3,"names":["React","useEffect","useDeepCompareEffect","FormattedMessage","useIntl","useSelector","useDispatch","toast","uniqBy","Checkbox","Message","messages","Toast","UniversalLink","createRelations","deleteRelations","queryRelations","resetSearchContent","searchContent","RelationsListing","relationtype","query_source","query_target","potential_sources_path","potential_targets_path","_matrix_options","_matrix_options2","intl","dispatch","MAX","MAX_RELATIONS","stats","state","_state$relations","_state$relations$stat","relations","data","_state$relations2","_state$relations2$rel","_state$relations2$rel2","_state$relations2$rel3","items","potential_targets_objects","_state$search$subrequ","search","subrequests","potential_targets","potential_sources_objects","_state$search$subrequ2","potential_sources","staticCatalogVocabularyQuery","_state$relations3","_state$relations3$rel","_state$relations3$rel2","_state$relations3$rel3","editable","_state$relations4","_state$relations4$rel","_state$relations4$rel2","_state$relations4$rel3","readonly","relationMatrix","map","tpl","source","UID","targets","push","target","matrix_options","relation","value","label","title","url","review_state","uid","el","obj","sort","a","b","labelA","toUpperCase","labelB","Object","keys","key","_relationMatrix$obj$U","_relationMatrix$obj$U2","startsWith","_objectSpread","SearchableText","metadata_fields","sort_on","fetchRelations","onSelectOptionHandler","selectedvalue","checked","y","x","relation_data","then","resp","success","__jsx","formatMessage","content","relationsUpdated","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSelectAllHandler","items_ids","forEach","Fragment","length","className","matrix_option","id","href","slice","createOrDeleteRelationsToTarget","defaultChecked","onChange","event","defaultMessage","warning","item","_matrix_options3","disabled","includes","values","sources","max","norelationfound","toomanyrelationsfound"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Relations/RelationsListing.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport uniqBy from 'lodash/uniqBy';\nimport { Checkbox, Message } from 'semantic-ui-react';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport {\n  createRelations,\n  deleteRelations,\n  queryRelations,\n} from '@plone/volto/actions/relations/relations';\nimport {\n  resetSearchContent,\n  searchContent,\n} from '@plone/volto/actions/search/search';\n\nconst RelationsListing = ({\n  relationtype,\n  query_source,\n  query_target,\n  potential_sources_path,\n  potential_targets_path,\n  // target_filter,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const MAX = 40; // Maximum of rows and columns\n  const MAX_RELATIONS = 1000;\n\n  const stats = useSelector((state) => state.relations?.stats?.data || null);\n\n  let relations = useSelector(\n    (state) => state.relations?.relations?.data?.[relationtype]?.items || [],\n  );\n\n  let potential_targets_objects = useSelector(\n    (state) => state.search.subrequests.potential_targets?.items || [],\n  );\n\n  let potential_sources_objects = useSelector(\n    (state) => state.search.subrequests.potential_sources?.items || [],\n  );\n\n  const staticCatalogVocabularyQuery = useSelector(\n    (state) =>\n      state.relations?.relations?.data?.[relationtype]\n        ?.staticCatalogVocabularyQuery || {},\n  );\n\n  // Editable if plone.api.relations available\n  const editable = useSelector(\n    (state) =>\n      state.relations?.relations?.data?.[relationtype]?.readonly !== true,\n  );\n\n  let relationMatrix = {};\n  relations.map((tpl) => {\n    if (relationMatrix[tpl.source.UID]) {\n      relationMatrix[tpl.source.UID].targets.push(tpl.target);\n    } else {\n      relationMatrix[tpl.source.UID] = {\n        source: tpl.source,\n        targets: [tpl.target],\n      };\n    }\n    return relationMatrix;\n  });\n\n  // x-axis: relation targets\n  // ************************\n  let matrix_options = relations.map((relation) => ({\n    value: relation.target.UID,\n    label: relation.target.title,\n    url: relation.target['@id'],\n    review_state: relation.target.review_state,\n    uid: relation.target.UID,\n  }));\n  matrix_options = uniqBy(matrix_options, function (el) {\n    return el.value;\n  });\n\n  // Add potential targets\n  const potential_targets = potential_targets_objects.map((obj) => ({\n    value: obj.UID,\n    label: obj.title,\n    url: obj['@id'],\n    review_state: obj.review_state,\n    uid: obj.UID,\n  }));\n  // Just show potential targets if no querying\n  matrix_options =\n    query_source === '' &&\n    query_target === '' &&\n    potential_sources_path !== '' &&\n    potential_targets_path !== ''\n      ? potential_targets\n      : [...matrix_options, ...potential_targets];\n  matrix_options = uniqBy(matrix_options, function (el) {\n    return el.value;\n  });\n  matrix_options.sort(function (a, b) {\n    var labelA = a.label.toUpperCase();\n    var labelB = b.label.toUpperCase();\n    if (labelA < labelB) {\n      return -1;\n    }\n    if (labelA > labelB) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // y-axis: relation sources\n  // ************************\n  let items = Object.keys(relationMatrix).map((key) => ({\n    value: key,\n    label: relationMatrix[key].source.title,\n    targets: relationMatrix[key].targets.map((el) => el.UID),\n    url: relationMatrix[key].source['@id'],\n    review_state: relationMatrix[key].source.review_state,\n  }));\n  // Add potential sources\n  const potential_sources = potential_sources_objects.map((obj) => ({\n    value: obj.UID,\n    label: obj.title,\n    targets: relationMatrix[obj.UID]?.targets?.map((el) => el.UID) || [],\n    url: obj['@id'],\n    review_state: obj.review_state,\n  }));\n  items =\n    query_source === '' &&\n    query_target === '' &&\n    potential_sources_path !== '' &&\n    potential_targets_path !== ''\n      ? potential_sources\n      : [...items, ...potential_sources];\n  items = uniqBy(items, function (el) {\n    return el.value;\n  });\n  items.sort(function (a, b) {\n    var labelA = a.label.toUpperCase();\n    var labelB = b.label.toUpperCase();\n    if (labelA < labelB) {\n      return -1;\n    }\n    if (labelA > labelB) {\n      return 1;\n    }\n    return 0;\n  });\n\n  useEffect(() => {\n    // If many relations, then fetch relations only with search query on source or target\n    if (stats?.stats[relationtype] <= MAX_RELATIONS) {\n      dispatch(queryRelations(relationtype));\n    } else {\n      dispatch(\n        queryRelations(\n          relationtype,\n          false,\n          null,\n          null,\n          null,\n          query_source\n            ? query_source.startsWith('/')\n              ? query_source\n              : `${query_source}*`\n            : null,\n          query_target\n            ? query_target.startsWith('/')\n              ? query_target\n              : `${query_target}*`\n            : null,\n        ),\n      );\n    }\n  }, [dispatch, stats, relationtype, query_source, query_target]);\n\n  // Get potential source and target objects\n  useDeepCompareEffect(() => {\n    // Fetch fresh potential targets\n    if (potential_targets_path !== '/' && potential_targets_path !== '') {\n      dispatch(\n        searchContent(\n          potential_targets_path,\n          {\n            SearchableText: query_target,\n            metadata_fields: ['UID'],\n            sort_on: 'sortable_title',\n            ...staticCatalogVocabularyQuery,\n          },\n          'potential_targets',\n        ),\n      );\n    } else {\n      dispatch(resetSearchContent('potential_targets'));\n    }\n\n    // Fetch fresh potential sources\n    if (potential_sources_path !== '/' && potential_sources_path !== '') {\n      dispatch(\n        searchContent(\n          potential_sources_path,\n          {\n            SearchableText: query_source,\n            metadata_fields: ['UID'],\n            sort_on: 'sortable_title',\n            // No need to restrict here. ...staticCatalogVocabularyQuery,\n          },\n          'potential_sources',\n        ),\n      );\n    } else {\n      dispatch(resetSearchContent('potential_sources'));\n    }\n  }, [\n    dispatch,\n    potential_targets_path,\n    potential_sources_path,\n    staticCatalogVocabularyQuery,\n    query_source,\n    query_target,\n  ]);\n\n  function fetchRelations() {\n    dispatch(\n      queryRelations(\n        relationtype,\n        false,\n        null,\n        null,\n        null,\n        query_source\n          ? query_source.startsWith('/')\n            ? query_source\n            : `${query_source}*`\n          : null,\n        query_target\n          ? query_target.startsWith('/')\n            ? query_target\n            : `${query_target}*`\n          : null,\n      ),\n    );\n  }\n\n  const onSelectOptionHandler = (relation, selectedvalue, checked) => {\n    let source = selectedvalue.y;\n    let target = selectedvalue.x;\n    const relation_data = [\n      {\n        source: source,\n        target: target,\n        relation: relation,\n      },\n    ];\n    dispatch(\n      checked ? createRelations(relation_data) : deleteRelations(relation_data),\n    )\n      .then((resp) => {\n        fetchRelations();\n      })\n      .then(() => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.relationsUpdated)}\n          />,\n        );\n      });\n  };\n\n  const onSelectAllHandler = (target, items_ids, checked) => {\n    let relation_data = [];\n    items_ids.forEach((el) => {\n      relation_data.push({\n        source: el,\n        target: target,\n        relation: relationtype,\n      });\n    });\n    dispatch(\n      checked ? createRelations(relation_data) : deleteRelations(relation_data),\n    )\n      .then((resp) => {\n        fetchRelations();\n      })\n      .then(() => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.relationsUpdated)}\n          />,\n        );\n      });\n  };\n\n  return (\n    <>\n      {/* <div>\n        <div>\n          <div>{items.length} sources</div>\n          <div>{matrix_options.length} targets</div>\n        </div>\n        <div>\n          <div>query_source <b>{query_source}</b></div>\n          <div>query_target <b>{query_target}</b></div>\n          <div>potential_sources_path <b>{potential_sources_path}</b></div>\n          <div>potential_targets_path <b>{potential_targets_path}</b></div>\n        </div>\n      </div> */}\n      {matrix_options.length <= MAX &&\n      (items.length <= MAX) & (matrix_options.length > 0) &&\n      items.length > 0 ? (\n        <div className=\"administration_matrix\">\n          <div className=\"label-options\">\n            <div className=\"target-labels\">\n              <div></div>\n              <div>\n                {matrix_options?.map((matrix_option) => (\n                  <div\n                    className=\"label-options-label inclined\"\n                    id={`label-options-label-${matrix_option.value}`}\n                    key={matrix_option.value}\n                  >\n                    <div>\n                      <UniversalLink\n                        href={matrix_option.url}\n                        className={\n                          matrix_option.review_state !== 'published'\n                            ? 'not-published'\n                            : ''\n                        }\n                        target=\"_blank\"\n                      >\n                        <span className=\"label\" title={matrix_option.label}>\n                          {matrix_option.label.length > 30\n                            ? matrix_option.label.slice(0, 27) + '...'\n                            : matrix_option.label}\n                        </span>\n                      </UniversalLink>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"listing-row selectall\" key=\"selectall\">\n              <div className=\"listing-item\">\n                <div />\n                <div className=\"matrix_options\">\n                  {!(\n                    relationtype === 'isReferencing' ||\n                    relationtype === 'iterate-working-copy' ||\n                    !editable\n                  ) ? (\n                    matrix_options?.map((matrix_option) => (\n                      <div\n                        key={matrix_option.value}\n                        title={\n                          intl.formatMessage(\n                            messages.createOrDeleteRelationsToTarget,\n                          ) + ` '${matrix_option.label}'`\n                        }\n                      >\n                        <Checkbox\n                          className=\"toggle-target\"\n                          defaultChecked={false}\n                          onChange={(event, { checked }) =>\n                            onSelectAllHandler(\n                              matrix_option.value,\n                              items.map((el) => el.value),\n                              checked,\n                            )\n                          }\n                        />\n                      </div>\n                    ))\n                  ) : (\n                    <FormattedMessage\n                      id=\"Read only for this type of relation.\"\n                      defaultMessage=\"Read only for this type of relation.\"\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"items\" key=\"items\">\n            <>\n              {!editable && (\n                <Message warning>\n                  <FormattedMessage\n                    id=\"Relations are editable with plone.api >= 2.0.3.\"\n                    defaultMessage=\"Relations are editable with plone.api >= 2.0.3.\"\n                  />\n                </Message>\n              )}\n              {items.map((item) => (\n                <div\n                  className=\"listing-row\"\n                  key={item.id}\n                  id={`source-row-${item.value}`}\n                >\n                  <div className=\"listing-item\" key={item['@id']}>\n                    <div>\n                      <span title={item.label} className=\"item-title\">\n                        <UniversalLink\n                          href={item.url}\n                          className={\n                            item.review_state !== 'published'\n                              ? 'not-published'\n                              : ''\n                          }\n                          target=\"_blank\"\n                        >\n                          {item.label.length > 25\n                            ? item.label.slice(0, 22) + '...'\n                            : item.label}\n                        </UniversalLink>\n                        {/* <span>targets: {item.targets.join(', ')}</span> */}\n                      </span>\n                    </div>\n                    <div className=\"matrix_options\">\n                      {matrix_options?.map((matrix_option) => (\n                        <React.Fragment key={matrix_option.value}>\n                          <Checkbox\n                            className={`checkbox_${matrix_option.value}`}\n                            key={matrix_option.value}\n                            title={matrix_option.title}\n                            disabled={\n                              relationtype === 'isReferencing' ||\n                              relationtype === 'iterate-working-copy' ||\n                              !editable\n                            }\n                            checked={item.targets.includes(matrix_option.value)}\n                            onChange={(event, { checked }) => {\n                              onSelectOptionHandler(\n                                relationtype,\n                                { x: matrix_option.value, y: item.value },\n                                checked,\n                              );\n                            }}\n                          />\n                        </React.Fragment>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </>\n          </div>\n        </div>\n      ) : (\n        <div className=\"administration_matrix\">\n          {matrix_options.length > MAX || items.length > MAX ? (\n            <FormattedMessage\n              id=\"narrowDownRelations\"\n              defaultMessage=\"Found {sources} sources and {targets} targets. Narrow down to {max}!\"\n              values={{\n                sources: items.length,\n                targets: matrix_options.length,\n                max: MAX,\n              }}\n            />\n          ) : query_source || query_target ? (\n            <div>{intl.formatMessage(messages.norelationfound)}</div>\n          ) : (\n            <div>{intl.formatMessage(messages.toomanyrelationsfound)}</div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default RelationsListing;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Read only for this type of relation.","defaultMessage":"Read only for this type of relation."},{"id":"Relations are editable with plone.api >= 2.0.3.","defaultMessage":"Relations are editable with plone.api >= 2.0.3."},{"id":"narrowDownRelations","defaultMessage":"Found {sources} sources and {targets} targets. Narrow down to {max}!"}]}},"sourceType":"module","externalDependencies":[]}