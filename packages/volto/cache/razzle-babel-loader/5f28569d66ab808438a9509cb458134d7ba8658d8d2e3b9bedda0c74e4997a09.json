{"ast":null,"code":"/**\n * User helper.\n * @module helpers/AuthToken\n */\nimport intersection from 'lodash/intersection';\n\n/**\n * Checks if the user has one or more given roles.\n * @method userHasRoles\n * @returns {boolean}\n */\nexport function userHasRoles(user, roles = []) {\n  var _user$roles;\n  return intersection((_user$roles = user === null || user === void 0 ? void 0 : user.roles) !== null && _user$roles !== void 0 ? _user$roles : [], roles).length > 0;\n}\n\n/**\n * Checks if the user is Manager.\n * @method isManager\n * @returns {boolean}\n */\nexport function isManager(user) {\n  return userHasRoles(user, ['Manager']);\n}\n\n/**\n * Checks if the user can assign group.\n * @method canAssignGroup\n * @returns {boolean}\n */\nexport function canAssignGroup(isManager, group) {\n  if (isManager) return true;\n  return !group.roles.includes('Manager');\n}\n\n/**\n * Checks if the user can assign role.\n * @method canDeleteGroup\n * @returns {boolean}\n */\nexport function canAssignRole(isManager, role) {\n  if (isManager) return true;\n  return role.id !== 'Manager';\n}","map":{"version":3,"names":["intersection","userHasRoles","user","roles","_user$roles","length","isManager","canAssignGroup","group","includes","canAssignRole","role","id"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/User/User.js"],"sourcesContent":["/**\n * User helper.\n * @module helpers/AuthToken\n */\nimport intersection from 'lodash/intersection';\n\n/**\n * Checks if the user has one or more given roles.\n * @method userHasRoles\n * @returns {boolean}\n */\nexport function userHasRoles(user, roles = []) {\n  return intersection(user?.roles ?? [], roles).length > 0;\n}\n\n/**\n * Checks if the user is Manager.\n * @method isManager\n * @returns {boolean}\n */\nexport function isManager(user) {\n  return userHasRoles(user, ['Manager']);\n}\n\n/**\n * Checks if the user can assign group.\n * @method canAssignGroup\n * @returns {boolean}\n */\nexport function canAssignGroup(isManager, group) {\n  if (isManager) return true;\n  return !group.roles.includes('Manager');\n}\n\n/**\n * Checks if the user can assign role.\n * @method canDeleteGroup\n * @returns {boolean}\n */\nexport function canAssignRole(isManager, role) {\n  if (isManager) return true;\n  return role.id !== 'Manager';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,YAAY,MAAM,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAEC,KAAK,GAAG,EAAE,EAAE;EAAA,IAAAC,WAAA;EAC7C,OAAOJ,YAAY,EAAAI,WAAA,GAACF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,KAAK,cAAAC,WAAA,cAAAA,WAAA,GAAI,EAAE,EAAED,KAAK,CAAC,CAACE,MAAM,GAAG,CAAC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACJ,IAAI,EAAE;EAC9B,OAAOD,YAAY,CAACC,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACD,SAAS,EAAEE,KAAK,EAAE;EAC/C,IAAIF,SAAS,EAAE,OAAO,IAAI;EAC1B,OAAO,CAACE,KAAK,CAACL,KAAK,CAACM,QAAQ,CAAC,SAAS,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACJ,SAAS,EAAEK,IAAI,EAAE;EAC7C,IAAIL,SAAS,EAAE,OAAO,IAAI;EAC1B,OAAOK,IAAI,CAACC,EAAE,KAAK,SAAS;AAC9B","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}