{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Contents/ContentsRenameModal.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport concat from 'lodash/concat';\nimport merge from 'lodash/merge';\nimport map from 'lodash/map';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport { updateContent } from '@plone/volto/actions/content/content';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nconst messages = defineMessages({\n  renameItems: {\n    \"id\": \"Rename items\",\n    \"defaultMessage\": \"Rename items\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  shortName: {\n    \"id\": \"Short name\",\n    \"defaultMessage\": \"Short name\"\n  },\n  shortNameDescription: {\n    \"id\": \"This name will be displayed in the URL.\",\n    \"defaultMessage\": \"This name will be displayed in the URL.\"\n  },\n  loadingMessage: {\n    \"id\": \"Rename Items Loading Message\",\n    \"defaultMessage\": \"Renaming items...\"\n  }\n});\nconst ContentsRenameModal = props => {\n  const {\n    onOk,\n    open,\n    items,\n    onCancel\n  } = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const request = useSelector(state => state.content.update);\n  const prevrequestloading = usePrevious(request.loading);\n  useEffect(() => {\n    if (prevrequestloading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevrequestloading, request.loaded]);\n  const onSubmit = useCallback(data => {\n    dispatch(updateContent(map(items, item => item.url), map(items, (item, index) => ({\n      id: data[`${index}_id`],\n      title: data[`${index}_title`]\n    }))));\n  }, [items, dispatch]);\n  return open && __jsx(ModalForm, {\n    open: open,\n    loading: request.loading,\n    loadingMessage: intl.formatMessage(messages.loadingMessage),\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    formData: merge(...map(items, (item, index) => ({\n      [`${index}_title`]: item.title,\n      [`${index}_id`]: item.id\n    }))),\n    title: intl.formatMessage(messages.renameItems),\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: concat(...map(items, (item, index) => [`${index}_title`, `${index}_id`]))\n      }],\n      properties: merge(...map(items, (item, index) => ({\n        [`${index}_title`]: {\n          title: intl.formatMessage(messages.title),\n          type: 'string',\n          description: ''\n        },\n        [`${index}_id`]: {\n          title: intl.formatMessage(messages.shortName),\n          type: 'id',\n          description: intl.formatMessage(messages.shortNameDescription)\n        }\n      }))),\n      required: []\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  });\n};\nContentsRenameModal.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string\n  })).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};\nexport default ContentsRenameModal;","map":{"version":3,"names":["React","useCallback","useEffect","PropTypes","useDispatch","useSelector","concat","merge","map","defineMessages","useIntl","usePrevious","updateContent","ModalForm","messages","renameItems","default","title","shortName","shortNameDescription","loadingMessage","ContentsRenameModal","props","onOk","open","items","onCancel","intl","dispatch","request","state","content","update","prevrequestloading","loading","loaded","onSubmit","data","item","url","index","id","__jsx","formatMessage","formData","schema","fieldsets","fields","properties","type","description","required","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","arrayOf","shape","string","isRequired","bool","func"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Contents/ContentsRenameModal.jsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport concat from 'lodash/concat';\nimport merge from 'lodash/merge';\nimport map from 'lodash/map';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport { updateContent } from '@plone/volto/actions/content/content';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\n\nconst messages = defineMessages({\n  renameItems: {\n    id: 'Rename items',\n    defaultMessage: 'Rename items',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  shortName: {\n    id: 'Short name',\n    defaultMessage: 'Short name',\n  },\n  shortNameDescription: {\n    id: 'This name will be displayed in the URL.',\n    defaultMessage: 'This name will be displayed in the URL.',\n  },\n  loadingMessage: {\n    id: 'Rename Items Loading Message',\n    defaultMessage: 'Renaming items...',\n  },\n});\n\nconst ContentsRenameModal = (props) => {\n  const { onOk, open, items, onCancel } = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const request = useSelector((state) => state.content.update);\n  const prevrequestloading = usePrevious(request.loading);\n\n  useEffect(() => {\n    if (prevrequestloading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevrequestloading, request.loaded]);\n\n  const onSubmit = useCallback(\n    (data) => {\n      dispatch(\n        updateContent(\n          map(items, (item) => item.url),\n          map(items, (item, index) => ({\n            id: data[`${index}_id`],\n            title: data[`${index}_title`],\n          })),\n        ),\n      );\n    },\n    [items, dispatch],\n  );\n\n  return (\n    open && (\n      <ModalForm\n        open={open}\n        loading={request.loading}\n        loadingMessage={intl.formatMessage(messages.loadingMessage)}\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        formData={merge(\n          ...map(items, (item, index) => ({\n            [`${index}_title`]: item.title,\n            [`${index}_id`]: item.id,\n          })),\n        )}\n        title={intl.formatMessage(messages.renameItems)}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: intl.formatMessage(messages.default),\n              fields: concat(\n                ...map(items, (item, index) => [\n                  `${index}_title`,\n                  `${index}_id`,\n                ]),\n              ),\n            },\n          ],\n          properties: merge(\n            ...map(items, (item, index) => ({\n              [`${index}_title`]: {\n                title: intl.formatMessage(messages.title),\n                type: 'string',\n                description: '',\n              },\n              [`${index}_id`]: {\n                title: intl.formatMessage(messages.shortName),\n                type: 'id',\n                description: intl.formatMessage(messages.shortNameDescription),\n              },\n            })),\n          ),\n          required: [],\n        }}\n      />\n    )\n  );\n};\n\nContentsRenameModal.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      url: PropTypes.string,\n    }),\n  ).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ContentsRenameModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Rename items","defaultMessage":"Rename items"},{"id":"Default","defaultMessage":"Default"},{"id":"Title","defaultMessage":"Title"},{"id":"Short name","defaultMessage":"Short name"},{"id":"This name will be displayed in the URL.","defaultMessage":"This name will be displayed in the URL."},{"id":"Rename Items Loading Message","defaultMessage":"Renaming items..."}]}},"sourceType":"module","externalDependencies":[]}