{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/LeadImage/View.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\nconst View = ({\n  data,\n  properties\n}) => {\n  const Image = config.getComponent({\n    name: 'Image'\n  }).component;\n  return __jsx(\"p\", {\n    className: cx('block image align', {\n      center: !Boolean(data.align)\n    }, data.align),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, properties.image && __jsx(React.Fragment, null, (() => {\n    const image = __jsx(Image, {\n      className: cx({\n        'full-width': data.align === 'full'\n      }),\n      item: properties,\n      imageField: \"image\",\n      sizes: config.blocks.blocksConfig.leadimage.getSizes(data),\n      alt: properties.image_caption || '',\n      responsive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }\n    });\n    if (data.href) {\n      return __jsx(UniversalLink, {\n        href: data.href,\n        openLinkInNewTab: data.openLinkInNewTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }\n      }, image);\n    } else {\n      return image;\n    }\n  })()));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  properties: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;\nvar _c;\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["React","PropTypes","UniversalLink","cx","config","View","data","properties","Image","getComponent","name","component","__jsx","className","center","Boolean","align","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","image","Fragment","item","imageField","sizes","blocks","blocksConfig","leadimage","getSizes","alt","image_caption","responsive","href","openLinkInNewTab","_c","propTypes","objectOf","any","isRequired","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/LeadImage/View.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nconst View = ({ data, properties }) => {\n  const Image = config.getComponent({ name: 'Image' }).component;\n\n  return (\n    <p\n      className={cx(\n        'block image align',\n        {\n          center: !Boolean(data.align),\n        },\n        data.align,\n      )}\n    >\n      {properties.image && (\n        <>\n          {(() => {\n            const image = (\n              <Image\n                className={cx({ 'full-width': data.align === 'full' })}\n                item={properties}\n                imageField=\"image\"\n                sizes={config.blocks.blocksConfig.leadimage.getSizes(data)}\n                alt={properties.image_caption || ''}\n                responsive={true}\n              />\n            );\n            if (data.href) {\n              return (\n                <UniversalLink\n                  href={data.href}\n                  openLinkInNewTab={data.openLinkInNewTab}\n                >\n                  {image}\n                </UniversalLink>\n              );\n            } else {\n              return image;\n            }\n          })()}\n        </>\n      )}\n    </p>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,aAAa,MAAM,4DAA4D;AACtF,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EACrC,MAAMC,KAAK,GAAGJ,MAAM,CAACK,YAAY,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,CAAC,CAACC,SAAS;EAE9D,OACEC,KAAA;IACEC,SAAS,EAAEV,EAAE,CACX,mBAAmB,EACnB;MACEW,MAAM,EAAE,CAACC,OAAO,CAACT,IAAI,CAACU,KAAK;IAC7B,CAAC,EACDV,IAAI,CAACU,KACP,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEDf,UAAU,CAACgB,KAAK,IACfX,KAAA,CAAAZ,KAAA,CAAAwB,QAAA,QACG,CAAC,MAAM;IACN,MAAMD,KAAK,GACTX,KAAA,CAACJ,KAAK;MACJK,SAAS,EAAEV,EAAE,CAAC;QAAE,YAAY,EAAEG,IAAI,CAACU,KAAK,KAAK;MAAO,CAAC,CAAE;MACvDS,IAAI,EAAElB,UAAW;MACjBmB,UAAU,EAAC,OAAO;MAClBC,KAAK,EAAEvB,MAAM,CAACwB,MAAM,CAACC,YAAY,CAACC,SAAS,CAACC,QAAQ,CAACzB,IAAI,CAAE;MAC3D0B,GAAG,EAAEzB,UAAU,CAAC0B,aAAa,IAAI,EAAG;MACpCC,UAAU,EAAE,IAAK;MAAAjB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAClB,CACF;IACD,IAAIhB,IAAI,CAAC6B,IAAI,EAAE;MACb,OACEvB,KAAA,CAACV,aAAa;QACZiC,IAAI,EAAE7B,IAAI,CAAC6B,IAAK;QAChBC,gBAAgB,EAAE9B,IAAI,CAAC8B,gBAAiB;QAAAnB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAEvCC,KACY,CAAC;IAEpB,CAAC,MAAM;MACL,OAAOA,KAAK;IACd;EACF,CAAC,EAAE,CACH,CAEH,CAAC;AAER,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAc,EAAA,GA7CMhC,IAAI;AAkDVA,IAAI,CAACiC,SAAS,GAAG;EACfhC,IAAI,EAAEL,SAAS,CAACsC,QAAQ,CAACtC,SAAS,CAACuC,GAAG,CAAC,CAACC,UAAU;EAClDlC,UAAU,EAAEN,SAAS,CAACsC,QAAQ,CAACtC,SAAS,CAACuC,GAAG,CAAC,CAACC;AAChD,CAAC;AAED,eAAepC,IAAI;AAAC,IAAAgC,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}