{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/InlineForm.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport isEqual from 'lodash/isEqual';\nimport { useAtom } from 'jotai';\nimport { inlineFormFieldsetsState } from './InlineFormState';\nimport { insertInArray, removeFromArray, arrayRange } from '@plone/volto/helpers/Utils/Utils';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Field } from '@plone/volto/components/manage/Form';\nimport { applySchemaDefaults } from '@plone/volto/helpers/Blocks/Blocks';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  editValues: {\n    \"id\": \"Edit values\",\n    \"defaultMessage\": \"Edit values\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  thereWereSomeErrors: {\n    \"id\": \"There were some errors\",\n    \"defaultMessage\": \"There were some errors\"\n  }\n});\nconst InlineForm = props => {\n  _s();\n  const {\n    block,\n    description,\n    error,\n    // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeFormData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    actionButton,\n    footer,\n    focusIndex,\n    intl\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find(o => o.id === 'default');\n  const other = schema.fieldsets.filter(o => o.id !== 'default');\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    const initialData = applySchemaDefaults({\n      data: formData,\n      schema: objectSchema,\n      intl\n    });\n    if (onChangeFormData) {\n      onChangeFormData(initialData);\n    } else {\n      Object.keys(initialData).forEach(k => {\n        if (!isEqual(initialData[k], formData === null || formData === void 0 ? void 0 : formData[k])) {\n          onChangeField(k, initialData[k]);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const [currentActiveFieldset, setCurrentActiveFieldset] = useAtom(inlineFormFieldsetsState({\n    name: block,\n    fielsetList: other,\n    initialState: config.settings.blockSettingsTabFieldsetsInitialStateOpen ? arrayRange(0, other.length - 1, 1) : []\n  }));\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const {\n      index\n    } = blockProps;\n    if (currentActiveFieldset.includes(index)) {\n      setCurrentActiveFieldset(removeFromArray(currentActiveFieldset, currentActiveFieldset.indexOf(index)));\n    } else {\n      setCurrentActiveFieldset(insertInArray(currentActiveFieldset, index, currentActiveFieldset.length + 1));\n    }\n  }\n  return __jsx(\"div\", {\n    className: \"ui form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, title && __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, icon, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, title || _(messages.editValues)), headerActions), description && __jsx(Segment, {\n    secondary: true,\n    className: \"attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, description), keys(errors).length > 0 && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: _(messages.thereWereSomeErrors),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), error && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: error.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    id: `blockform-fieldset-${defaultFieldset.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"form attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, map(defaultFieldset.fields, (field, index) => {\n    var _errors$block;\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: field,\n      fieldSet: defaultFieldset.title.toLowerCase(),\n      focus: index === focusIndex,\n      value: formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: (id, value, itemInfo) => {\n        onChangeField(id, value, itemInfo);\n      },\n      key: field,\n      error: (errors === null || errors === void 0 ? void 0 : (_errors$block = errors[block]) === null || _errors$block === void 0 ? void 0 : _errors$block[field]) || {},\n      block: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }));\n  }), actionButton && __jsx(Segment, {\n    className: \"attached actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, actionButton))), other.map((fieldset, index) => __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    key: fieldset.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    key: fieldset.id,\n    id: `blockform-fieldset-${fieldset.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, __jsx(Accordion.Title, {\n    active: currentActiveFieldset.includes(index),\n    index: index,\n    onClick: handleCurrentActiveFieldset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, fieldset.title && __jsx(React.Fragment, null, fieldset.title), currentActiveFieldset.includes(index) ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  })), __jsx(Accordion.Content, {\n    active: currentActiveFieldset.includes(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, __jsx(AnimateHeight, {\n    animateOpacity: true,\n    duration: 500,\n    height: currentActiveFieldset.includes(index) ? 'auto' : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, __jsx(Segment, {\n    className: \"attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, map(fieldset.fields, field => {\n    var _errors$block2;\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: field,\n      value: formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: (id, value) => {\n        onChangeField(id, value);\n      },\n      key: field,\n      error: (errors === null || errors === void 0 ? void 0 : (_errors$block2 = errors[block]) === null || _errors$block2 === void 0 ? void 0 : _errors$block2[field]) || {},\n      block: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }));\n  }))))))), footer);\n};\n_s(InlineForm, \"9yyKuGc4zP2NfhqdTDlySKsKl28=\", false, function () {\n  return [useAtom];\n});\n_c = InlineForm;\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null\n};\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  focusIndex: PropTypes.number\n};\nexport default _c2 = injectIntl(InlineForm, {\n  forwardRef: true\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"InlineForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","Accordion","Segment","Message","defineMessages","injectIntl","AnimateHeight","keys","map","isEqual","useAtom","inlineFormFieldsetsState","insertInArray","removeFromArray","arrayRange","Icon","Field","applySchemaDefaults","upSVG","downSVG","config","messages","editValues","error","thereWereSomeErrors","InlineForm","props","_s","block","description","errors","formData","onChangeFormData","onChangeField","schema","title","icon","headerActions","actionButton","footer","focusIndex","intl","_","formatMessage","defaultFieldset","fieldsets","find","o","id","other","filter","useEffect","objectSchema","initialData","data","Object","forEach","k","currentActiveFieldset","setCurrentActiveFieldset","name","fielsetList","initialState","settings","blockSettingsTabFieldsetsInitialStateOpen","length","handleCurrentActiveFieldset","e","blockProps","index","includes","indexOf","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","secondary","negative","attached","header","content","message","fields","field","_errors$block","_extends","properties","fieldSet","toLowerCase","focus","value","required","onChange","itemInfo","key","fieldset","fluid","styled","Title","active","onClick","Fragment","size","Content","animateOpacity","duration","height","_errors$block2","_c","defaultProps","propTypes","string","shape","arrayOf","objectOf","any","definitions","pathname","func","number","_c2","forwardRef","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/InlineForm.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport isEqual from 'lodash/isEqual';\nimport { useAtom } from 'jotai';\nimport { inlineFormFieldsetsState } from './InlineFormState';\nimport {\n  insertInArray,\n  removeFromArray,\n  arrayRange,\n} from '@plone/volto/helpers/Utils/Utils';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Field } from '@plone/volto/components/manage/Form';\nimport { applySchemaDefaults } from '@plone/volto/helpers/Blocks/Blocks';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  editValues: {\n    id: 'Edit values',\n    defaultMessage: 'Edit values',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors',\n    defaultMessage: 'There were some errors',\n  },\n});\n\nconst InlineForm = (props) => {\n  const {\n    block,\n    description,\n    error, // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeFormData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    actionButton,\n    footer,\n    focusIndex,\n    intl,\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find((o) => o.id === 'default');\n  const other = schema.fieldsets.filter((o) => o.id !== 'default');\n\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n    const initialData = applySchemaDefaults({\n      data: formData,\n      schema: objectSchema,\n      intl,\n    });\n\n    if (onChangeFormData) {\n      onChangeFormData(initialData);\n    } else {\n      Object.keys(initialData).forEach((k) => {\n        if (!isEqual(initialData[k], formData?.[k])) {\n          onChangeField(k, initialData[k]);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [currentActiveFieldset, setCurrentActiveFieldset] = useAtom(\n    inlineFormFieldsetsState({\n      name: block,\n      fielsetList: other,\n      initialState: config.settings.blockSettingsTabFieldsetsInitialStateOpen\n        ? arrayRange(0, other.length - 1, 1)\n        : [],\n    }),\n  );\n\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const { index } = blockProps;\n    if (currentActiveFieldset.includes(index)) {\n      setCurrentActiveFieldset(\n        removeFromArray(\n          currentActiveFieldset,\n          currentActiveFieldset.indexOf(index),\n        ),\n      );\n    } else {\n      setCurrentActiveFieldset(\n        insertInArray(\n          currentActiveFieldset,\n          index,\n          currentActiveFieldset.length + 1,\n        ),\n      );\n    }\n  }\n\n  return (\n    <div className=\"ui form\">\n      {title && (\n        <header className=\"header pulled\">\n          {icon}\n          <h2>{title || _(messages.editValues)}</h2>\n          {headerActions}\n        </header>\n      )}\n      {description && (\n        <Segment secondary className=\"attached\">\n          {description}\n        </Segment>\n      )}\n      {keys(errors).length > 0 && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={_(messages.thereWereSomeErrors)}\n        />\n      )}\n      {error && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={error.message}\n        />\n      )}\n      <div id={`blockform-fieldset-${defaultFieldset.id}`}>\n        <Segment className=\"form attached\">\n          {map(defaultFieldset.fields, (field, index) => (\n            <Field\n              {...schema.properties[field]}\n              id={field}\n              fieldSet={defaultFieldset.title.toLowerCase()}\n              focus={index === focusIndex}\n              value={formData[field]}\n              required={schema.required.indexOf(field) !== -1}\n              onChange={(id, value, itemInfo) => {\n                onChangeField(id, value, itemInfo);\n              }}\n              key={field}\n              error={errors?.[block]?.[field] || {}}\n              block={block}\n            />\n          ))}\n          {actionButton && (\n            <Segment className=\"attached actions\">{actionButton}</Segment>\n          )}\n        </Segment>\n      </div>\n      {other.map((fieldset, index) => (\n        <Accordion fluid styled className=\"form\" key={fieldset.id}>\n          <div key={fieldset.id} id={`blockform-fieldset-${fieldset.id}`}>\n            <Accordion.Title\n              active={currentActiveFieldset.includes(index)}\n              index={index}\n              onClick={handleCurrentActiveFieldset}\n            >\n              {fieldset.title && <>{fieldset.title}</>}\n              {currentActiveFieldset.includes(index) ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={currentActiveFieldset.includes(index)}>\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={currentActiveFieldset.includes(index) ? 'auto' : 0}\n              >\n                <Segment className=\"attached\">\n                  {map(fieldset.fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={formData[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={(id, value) => {\n                        onChangeField(id, value);\n                      }}\n                      key={field}\n                      error={errors?.[block]?.[field] || {}}\n                      block={block}\n                    />\n                  ))}\n                </Segment>\n              </AnimateHeight>\n            </Accordion.Content>\n          </div>\n        </Accordion>\n      ))}\n      {footer}\n    </div>\n  );\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null,\n};\n\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(\n      PropTypes.shape({\n        fields: PropTypes.arrayOf(PropTypes.string),\n        id: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string),\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string,\n  }),\n  focusIndex: PropTypes.number,\n};\n\nexport default injectIntl(InlineForm, { forwardRef: true });\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Edit values","defaultMessage":"Edit values"},{"id":"Error","defaultMessage":"Error"},{"id":"There were some errors","defaultMessage":"There were some errors"}]}},"sourceType":"module","externalDependencies":[]}