{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/ArrayWidget.jsx\";\nvar __jsx = React.createElement;\n/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport find from 'lodash/find';\nimport isObject from 'lodash/isObject';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport { getVocabulary } from '@plone/volto/actions/vocabularies/vocabularies';\nimport { Option, DropdownIndicator, ClearIndicator, selectTheme, customSelectStyles, MenuList, SortableMultiValue, SortableMultiValueLabel, MultiValueContainer } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\nfunction arrayMove(array, from, to) {\n  const slicedArray = array.slice();\n  slicedArray.splice(to < 0 ? array.length + to : to, 0, slicedArray.splice(from, 1)[0]);\n  return slicedArray;\n}\nfunction normalizeArrayValue(choices, value) {\n  if (!value || !Array.isArray(value)) return [];\n  if (value.length === 0) return value;\n  if (typeof value[0] === 'string') {\n    // raw value like ['foo', 'bar']\n    return value.map(v => {\n      var _find;\n      return {\n        label: ((_find = find(choices, c => c.value === v)) === null || _find === void 0 ? void 0 : _find.label) || v,\n        value: v\n      };\n    });\n  }\n  if (isObject(value[0]) && Object.keys(value[0]).includes('token') // Array of objects, w/ label+value\n  ) {\n    return value.map(v => {\n      const item = find(choices, c => c.value === v.token);\n      return item ? {\n        label: item.label || item.title || item.token,\n        value: v.token\n      } : {\n        // avoid a crash if choices doesn't include this item\n        label: v.label,\n        value: v.token\n      };\n    }).filter(f => !!f);\n  }\n  return [];\n}\nfunction normalizeChoices(choices) {\n  if (Array.isArray(choices) && choices.length && Array.isArray(choices[0])) {\n    return choices.map(option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    }));\n  }\n  return choices;\n}\n\n/**\n * Compare values and return true if equal.\n * Consider upper and lower case.\n * @method compareOption\n * @param {*} inputValue\n * @param {*} option\n * @param {*} accessors\n * @returns {boolean}\n */\nconst compareOption = (inputValue = '', option, accessors) => {\n  const candidate = String(inputValue);\n  const optionValue = String(accessors.getOptionValue(option));\n  const optionLabel = String(accessors.getOptionLabel(option));\n  return optionValue === candidate || optionLabel === candidate;\n};\n\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n *\n * A creatable select array widget will be rendered if the named vocabulary is\n * in the widget definition (hint) like:\n *\n * ```\n * list_field_voc_unconstrained = schema.List(\n *     title=u\"List field with values from vocabulary but not constrained to them.\",\n *     description=u\"zope.schema.List\",\n *     value_type=schema.TextLine(),\n *     required=False,\n *     missing_value=[],\n * )\n * directives.widget(\n *     \"list_field_voc_unconstrained\",\n *     AjaxSelectFieldWidget,\n *     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n * )\n * ```\n */\nclass ArrayWidget extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"onSortEnd\", (selectedOption, {\n      oldIndex,\n      newIndex\n    }) => {\n      const newValue = arrayMove(selectedOption, oldIndex, newIndex);\n      this.handleChange(newValue);\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$items, _this$props$items$cho, _this$props$choices;\n    if (!((_this$props$items = this.props.items) !== null && _this$props$items !== void 0 && (_this$props$items$cho = _this$props$items.choices) !== null && _this$props$items$cho !== void 0 && _this$props$items$cho.length) && !((_this$props$choices = this.props.choices) !== null && _this$props$choices !== void 0 && _this$props$choices.length) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  componentDidUpdate() {\n    var _this$props$items2, _this$props$items2$ch, _this$props$choices2;\n    if (!((_this$props$items2 = this.props.items) !== null && _this$props$items2 !== void 0 && (_this$props$items2$ch = _this$props$items2.choices) !== null && _this$props$items2$ch !== void 0 && _this$props$items2$ch.length) && !((_this$props$choices2 = this.props.choices) !== null && _this$props$choices2 !== void 0 && _this$props$choices2.length) && this.props.vocabLoading === undefined && !this.props.vocabLoaded && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(this.props.id, selectedOption ? selectedOption.map(item => item.value) : null);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props, _this$props2, _this$props$choices3, _this$props$placehold;\n    const choices = normalizeChoices(((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.choices) || []);\n    const selectedOption = normalizeArrayValue(choices, this.props.value);\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    const {\n      SortableContainer\n    } = this.props.reactSortableHOC;\n    const Select = this.props.reactSelect.default;\n    const SortableSelect =\n    // It will be only creatable if the named vocabulary is in the widget definition\n    // (hint) like:\n    // list_field_voc_unconstrained = schema.List(\n    //     title=u\"List field with values from vocabulary but not constrained to them.\",\n    //     description=u\"zope.schema.List\",\n    //     value_type=schema.TextLine(),\n    //     required=False,\n    //     missing_value=[],\n    // )\n    // directives.widget(\n    //     \"list_field_voc_unconstrained\",\n    //     AjaxSelectFieldWidget,\n    //     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n    // )\n    (_this$props2 = this.props) !== null && _this$props2 !== void 0 && _this$props2.choices && !getVocabFromHint(this.props) && !this.props.creatable ? SortableContainer(Select) : SortableContainer(CreatableSelect);\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 7\n      }\n    }), __jsx(SortableSelect, {\n      useDragHandle: true\n      // react-sortable-hoc props:\n      ,\n      axis: \"xy\",\n      onSortEnd: sortProp => {\n        this.onSortEnd(selectedOption, sortProp);\n      },\n      menuShouldScrollIntoView: false,\n      distance: 4\n      // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n      ,\n      getHelperDimensions: ({\n        node\n      }) => node.getBoundingClientRect(),\n      id: `field-${this.props.id}`,\n      \"aria-labelledby\": `fieldset-${this.props.fieldSet}-field-label-${this.props.id}`,\n      key: this.props.id,\n      isDisabled: this.props.disabled || this.props.isDisabled,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\"\n      /* eslint-disable jsx-a11y/no-autofocus */,\n      autoFocus: this.props.focus\n      /* eslint-enable jsx-a11y/no-autofocus */,\n      options: this.props.vocabBaseUrl ? choices : this.props.choices ? [...choices, ...(this.props.noValueOption && (this.props.default === undefined || this.props.default === null) ? [{\n        label: this.props.intl.formatMessage(messages.no_value),\n        value: 'no-value'\n      }] : [])] : [{\n        label: this.props.intl.formatMessage(messages.no_value),\n        value: 'no-value'\n      }],\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, ((_this$props$choices3 = this.props.choices) === null || _this$props$choices3 === void 0 ? void 0 : _this$props$choices3.length) > 25 && {\n        MenuList\n      }), {}, {\n        MultiValueContainer,\n        MultiValue: SortableMultiValue,\n        MultiValueLabel: SortableMultiValueLabel,\n        DropdownIndicator,\n        ClearIndicator,\n        Option\n      }),\n      value: selectedOption || [],\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: this.handleChange,\n      isValidNewOption: (inputValue, selectValue, selectOptions, accessors) => !(!inputValue || selectValue.some(option => compareOption(inputValue, option, accessors)) || selectOptions.some(option => compareOption(inputValue, option, accessors))),\n      isClearable: true,\n      isMulti: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(ArrayWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  vocabLoading: PropTypes.bool,\n  vocabLoaded: PropTypes.bool,\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string])),\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  creatable: PropTypes.bool //if widget has no vocab and you want to be creatable\n});\n/**\n * Default properties\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(ArrayWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  creatable: false\n});\nexport const ArrayWidgetComponent = injectIntl(ArrayWidget);\n_c = ArrayWidgetComponent;\nexport default compose(injectIntl, injectLazyLibs(['reactSelect', 'reactSelectCreateable', 'reactSortableHOC']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2, _props$items;\n  const vocabBaseUrl = getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props);\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if ((_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices) {\n    return {\n      choices: props.items.choices,\n      lang: state.intl.locale\n    };\n  } else if (vocabState) {\n    return {\n      choices: vocabState.items,\n      vocabBaseUrl,\n      vocabLoading: vocabState.loading,\n      vocabLoaded: vocabState.loaded,\n      lang: state.intl.locale\n    };\n  }\n  return {\n    vocabBaseUrl,\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary\n}))(ArrayWidget);\nvar _c;\n$RefreshReg$(_c, \"ArrayWidgetComponent\");","map":{"version":3,"names":["React","Component","defineMessages","injectIntl","PropTypes","compose","connect","injectLazyLibs","find","isObject","getVocabFromHint","getVocabFromField","getVocabFromItems","getVocabulary","Option","DropdownIndicator","ClearIndicator","selectTheme","customSelectStyles","MenuList","SortableMultiValue","SortableMultiValueLabel","MultiValueContainer","FormFieldWrapper","messages","select","no_value","no_options","arrayMove","array","from","to","slicedArray","slice","splice","length","normalizeArrayValue","choices","value","Array","isArray","map","v","_find","label","c","Object","keys","includes","item","token","title","filter","f","normalizeChoices","option","compareOption","inputValue","accessors","candidate","String","optionValue","getOptionValue","optionLabel","getOptionLabel","ArrayWidget","constructor","props","_defineProperty","selectedOption","oldIndex","newIndex","newValue","handleChange","bind","componentDidMount","_this$props$items","_this$props$items$cho","_this$props$choices","items","vocabBaseUrl","vocabNameOrURL","size","subrequest","lang","componentDidUpdate","_this$props$items2","_this$props$items2$ch","_this$props$choices2","vocabLoading","undefined","vocabLoaded","onChange","id","render","_this$props","_this$props2","_this$props$choices3","_this$props$placehold","CreatableSelect","reactSelectCreateable","default","SortableContainer","reactSortableHOC","Select","reactSelect","SortableSelect","creatable","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useDragHandle","axis","onSortEnd","sortProp","menuShouldScrollIntoView","distance","getHelperDimensions","node","getBoundingClientRect","fieldSet","key","isDisabled","disabled","className","classNamePrefix","autoFocus","focus","options","noValueOption","intl","formatMessage","styles","theme","components","_objectSpread","MultiValue","MultiValueLabel","placeholder","isValidNewOption","selectValue","selectOptions","some","isClearable","isMulti","string","isRequired","description","required","bool","error","arrayOf","func","oneOfType","object","shape","vocabulary","widgetOptions","wrapped","ArrayWidgetComponent","_c","state","_state$vocabularies","_state$vocabularies$v","_state$vocabularies$v2","_props$items","vocabState","vocabularies","subrequests","locale","loading","loaded","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/ArrayWidget.jsx"],"sourcesContent":["/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport find from 'lodash/find';\nimport isObject from 'lodash/isObject';\n\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport { getVocabulary } from '@plone/volto/actions/vocabularies/vocabularies';\n\nimport {\n  Option,\n  DropdownIndicator,\n  ClearIndicator,\n  selectTheme,\n  customSelectStyles,\n  MenuList,\n  SortableMultiValue,\n  SortableMultiValueLabel,\n  MultiValueContainer,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\nfunction arrayMove(array, from, to) {\n  const slicedArray = array.slice();\n  slicedArray.splice(\n    to < 0 ? array.length + to : to,\n    0,\n    slicedArray.splice(from, 1)[0],\n  );\n  return slicedArray;\n}\n\nfunction normalizeArrayValue(choices, value) {\n  if (!value || !Array.isArray(value)) return [];\n  if (value.length === 0) return value;\n\n  if (typeof value[0] === 'string') {\n    // raw value like ['foo', 'bar']\n    return value.map((v) => {\n      return {\n        label: find(choices, (c) => c.value === v)?.label || v,\n        value: v,\n      };\n    });\n  }\n\n  if (\n    isObject(value[0]) &&\n    Object.keys(value[0]).includes('token') // Array of objects, w/ label+value\n  ) {\n    return value\n      .map((v) => {\n        const item = find(choices, (c) => c.value === v.token);\n        return item\n          ? {\n              label: item.label || item.title || item.token,\n              value: v.token,\n            }\n          : {\n              // avoid a crash if choices doesn't include this item\n              label: v.label,\n              value: v.token,\n            };\n      })\n      .filter((f) => !!f);\n  }\n\n  return [];\n}\n\nfunction normalizeChoices(choices) {\n  if (Array.isArray(choices) && choices.length && Array.isArray(choices[0])) {\n    return choices.map((option) => ({\n      value: option[0],\n      label:\n        // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n        option[1] !== 'None' && option[1] ? option[1] : option[0],\n    }));\n  }\n\n  return choices;\n}\n\n/**\n * Compare values and return true if equal.\n * Consider upper and lower case.\n * @method compareOption\n * @param {*} inputValue\n * @param {*} option\n * @param {*} accessors\n * @returns {boolean}\n */\nconst compareOption = (inputValue = '', option, accessors) => {\n  const candidate = String(inputValue);\n  const optionValue = String(accessors.getOptionValue(option));\n  const optionLabel = String(accessors.getOptionLabel(option));\n  return optionValue === candidate || optionLabel === candidate;\n};\n\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n *\n * A creatable select array widget will be rendered if the named vocabulary is\n * in the widget definition (hint) like:\n *\n * ```\n * list_field_voc_unconstrained = schema.List(\n *     title=u\"List field with values from vocabulary but not constrained to them.\",\n *     description=u\"zope.schema.List\",\n *     value_type=schema.TextLine(),\n *     required=False,\n *     missing_value=[],\n * )\n * directives.widget(\n *     \"list_field_voc_unconstrained\",\n *     AjaxSelectFieldWidget,\n *     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n * )\n * ```\n */\nclass ArrayWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    vocabLoading: PropTypes.bool,\n    vocabLoaded: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    ),\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    wrapped: PropTypes.bool,\n    creatable: PropTypes.bool, //if widget has no vocab and you want to be creatable\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    creatable: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      !this.props.items?.choices?.length &&\n      !this.props.choices?.length &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (\n      !this.props.items?.choices?.length &&\n      !this.props.choices?.length &&\n      this.props.vocabLoading === undefined &&\n      !this.props.vocabLoaded &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.value) : null,\n    );\n  }\n\n  onSortEnd = (selectedOption, { oldIndex, newIndex }) => {\n    const newValue = arrayMove(selectedOption, oldIndex, newIndex);\n\n    this.handleChange(newValue);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const choices = normalizeChoices(this.props?.choices || []);\n    const selectedOption = normalizeArrayValue(choices, this.props.value);\n\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    const { SortableContainer } = this.props.reactSortableHOC;\n    const Select = this.props.reactSelect.default;\n    const SortableSelect =\n      // It will be only creatable if the named vocabulary is in the widget definition\n      // (hint) like:\n      // list_field_voc_unconstrained = schema.List(\n      //     title=u\"List field with values from vocabulary but not constrained to them.\",\n      //     description=u\"zope.schema.List\",\n      //     value_type=schema.TextLine(),\n      //     required=False,\n      //     missing_value=[],\n      // )\n      // directives.widget(\n      //     \"list_field_voc_unconstrained\",\n      //     AjaxSelectFieldWidget,\n      //     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n      // )\n      this.props?.choices &&\n      !getVocabFromHint(this.props) &&\n      !this.props.creatable\n        ? SortableContainer(Select)\n        : SortableContainer(CreatableSelect);\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <SortableSelect\n          useDragHandle\n          // react-sortable-hoc props:\n          axis=\"xy\"\n          onSortEnd={(sortProp) => {\n            this.onSortEnd(selectedOption, sortProp);\n          }}\n          menuShouldScrollIntoView={false}\n          distance={4}\n          // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n          getHelperDimensions={({ node }) => node.getBoundingClientRect()}\n          id={`field-${this.props.id}`}\n          aria-labelledby={`fieldset-${this.props.fieldSet}-field-label-${this.props.id}`}\n          key={this.props.id}\n          isDisabled={this.props.disabled || this.props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          /* eslint-disable jsx-a11y/no-autofocus */\n          autoFocus={this.props.focus}\n          /* eslint-enable jsx-a11y/no-autofocus */\n          options={\n            this.props.vocabBaseUrl\n              ? choices\n              : this.props.choices\n                ? [\n                    ...choices,\n                    ...(this.props.noValueOption &&\n                    (this.props.default === undefined ||\n                      this.props.default === null)\n                      ? [\n                          {\n                            label: this.props.intl.formatMessage(\n                              messages.no_value,\n                            ),\n                            value: 'no-value',\n                          },\n                        ]\n                      : []),\n                  ]\n                : [\n                    {\n                      label: this.props.intl.formatMessage(messages.no_value),\n                      value: 'no-value',\n                    },\n                  ]\n          }\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(this.props.choices?.length > 25 && {\n              MenuList,\n            }),\n            MultiValueContainer,\n            MultiValue: SortableMultiValue,\n            MultiValueLabel: SortableMultiValueLabel,\n            DropdownIndicator,\n            ClearIndicator,\n            Option,\n          }}\n          value={selectedOption || []}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={this.handleChange}\n          isValidNewOption={(\n            inputValue,\n            selectValue,\n            selectOptions,\n            accessors,\n          ) =>\n            !(\n              !inputValue ||\n              selectValue.some((option) =>\n                compareOption(inputValue, option, accessors),\n              ) ||\n              selectOptions.some((option) =>\n                compareOption(inputValue, option, accessors),\n              )\n            )\n          }\n          isClearable\n          isMulti\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const ArrayWidgetComponent = injectIntl(ArrayWidget);\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelect', 'reactSelectCreateable', 'reactSortableHOC']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.items?.choices) {\n        return {\n          choices: props.items.choices,\n          lang: state.intl.locale,\n        };\n      } else if (vocabState) {\n        return {\n          choices: vocabState.items,\n          vocabBaseUrl,\n          vocabLoading: vocabState.loading,\n          vocabLoaded: vocabState.loaded,\n          lang: state.intl.locale,\n        };\n      }\n      return { vocabBaseUrl, lang: state.intl.locale };\n    },\n    { getVocabulary },\n  ),\n)(ArrayWidget);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}