{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Relations/BrokenRelations.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Divider, Segment, Table } from 'semantic-ui-react';\nimport { queryRelations } from '@plone/volto/actions/relations/relations';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport ConditionalLink from '@plone/volto/components/manage/ConditionalLink/ConditionalLink';\nconst BrokenRelations = () => {\n  const dispatch = useDispatch();\n  const brokenRelationStats = useSelector(state => {\n    var _state$relations, _state$relations$stat, _state$relations$stat2;\n    return ((_state$relations = state.relations) === null || _state$relations === void 0 ? void 0 : (_state$relations$stat = _state$relations.stats) === null || _state$relations$stat === void 0 ? void 0 : (_state$relations$stat2 = _state$relations$stat.data) === null || _state$relations$stat2 === void 0 ? void 0 : _state$relations$stat2.broken) || {};\n  });\n  const brokenRelations = useSelector(state => {\n    var _state$relations2, _state$relations2$sub, _state$relations2$sub2;\n    return (_state$relations2 = state.relations) === null || _state$relations2 === void 0 ? void 0 : (_state$relations2$sub = _state$relations2.subrequests) === null || _state$relations2$sub === void 0 ? void 0 : (_state$relations2$sub2 = _state$relations2$sub.broken) === null || _state$relations2$sub2 === void 0 ? void 0 : _state$relations2$sub2.data;\n  });\n  useEffect(() => {\n    dispatch(queryRelations(null, true, 'broken'));\n  }, [dispatch]);\n  return brokenRelations && Object.keys(brokenRelations).length > 0 ? __jsx(React.Fragment, null, __jsx(Divider, {\n    section: true,\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Broken relations\",\n    defaultMessage: \"Broken relations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  })), Object.keys(brokenRelations).map(relationname => __jsx(\"div\", {\n    key: relationname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, __jsx(Divider, {\n    section: true,\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"countBrokenRelations\",\n    defaultMessage: \"{countofrelation} broken {countofrelation, plural, one {relation} other {relations}} of type {typeofrelation}\",\n    values: {\n      countofrelation: brokenRelationStats[relationname],\n      typeofrelation: relationname\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  })), __jsx(Table, {\n    compact: \"very\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, __jsx(Table.HeaderCell, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Source\",\n    defaultMessage: \"Source\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  })), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Target\",\n    defaultMessage: \"Target\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  })))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, uniqBy(brokenRelations[relationname].items, function (el) {\n    return el.toString();\n  }).map((el, index) => __jsx(Table.Row, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }, __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, el[0] && __jsx(ConditionalLink, {\n    to: `${el[0]}/edit`,\n    openLinkInNewTab: true,\n    condition: el[0].includes('http'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, flattenToAppURL(el[0]))), __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, el[1] && __jsx(ConditionalLink, {\n    to: `${el[1]}/edit`,\n    openLinkInNewTab: true,\n    condition: el[1].includes('http'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, flattenToAppURL(el[1]))))))))))) : null;\n};\nexport default BrokenRelations;","map":{"version":3,"names":["React","useEffect","uniqBy","FormattedMessage","useSelector","useDispatch","Divider","Segment","Table","queryRelations","flattenToAppURL","ConditionalLink","BrokenRelations","dispatch","brokenRelationStats","state","_state$relations","_state$relations$stat","_state$relations$stat2","relations","stats","data","broken","brokenRelations","_state$relations2","_state$relations2$sub","_state$relations2$sub2","subrequests","Object","keys","length","__jsx","Fragment","section","hidden","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","defaultMessage","map","relationname","key","values","countofrelation","typeofrelation","compact","Header","Row","HeaderCell","width","Body","items","el","toString","index","Cell","to","openLinkInNewTab","condition","includes"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Relations/BrokenRelations.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Divider, Segment, Table } from 'semantic-ui-react';\nimport { queryRelations } from '@plone/volto/actions/relations/relations';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport ConditionalLink from '@plone/volto/components/manage/ConditionalLink/ConditionalLink';\n\nconst BrokenRelations = () => {\n  const dispatch = useDispatch();\n  const brokenRelationStats = useSelector(\n    (state) => state.relations?.stats?.data?.broken || {},\n  );\n  const brokenRelations = useSelector(\n    (state) => state.relations?.subrequests?.broken?.data,\n  );\n\n  useEffect(() => {\n    dispatch(queryRelations(null, true, 'broken'));\n  }, [dispatch]);\n\n  return brokenRelations && Object.keys(brokenRelations).length > 0 ? (\n    <>\n      <Divider section hidden />\n      <Segment>\n        <h3>\n          <FormattedMessage\n            id=\"Broken relations\"\n            defaultMessage=\"Broken relations\"\n          />\n        </h3>\n        {Object.keys(brokenRelations).map((relationname) => (\n          <div key={relationname}>\n            <Divider section hidden />\n            <h4>\n              <FormattedMessage\n                id=\"countBrokenRelations\"\n                defaultMessage=\"{countofrelation} broken {countofrelation, plural, one {relation} other {relations}} of type {typeofrelation}\"\n                values={{\n                  countofrelation: brokenRelationStats[relationname],\n                  typeofrelation: relationname,\n                }}\n              />\n            </h4>\n            <Table compact=\"very\">\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell width={6}>\n                    <FormattedMessage id=\"Source\" defaultMessage=\"Source\" />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage id=\"Target\" defaultMessage=\"Target\" />\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {uniqBy(brokenRelations[relationname].items, function (el) {\n                  return el.toString();\n                }).map((el, index) => (\n                  <Table.Row key={index}>\n                    <Table.Cell>\n                      {el[0] && (\n                        <ConditionalLink\n                          to={`${el[0]}/edit`}\n                          openLinkInNewTab={true}\n                          condition={el[0].includes('http')}\n                        >\n                          {flattenToAppURL(el[0])}\n                        </ConditionalLink>\n                      )}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {el[1] && (\n                        <ConditionalLink\n                          to={`${el[1]}/edit`}\n                          openLinkInNewTab={true}\n                          condition={el[1].includes('http')}\n                        >\n                          {flattenToAppURL(el[1])}\n                        </ConditionalLink>\n                      )}\n                    </Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </div>\n        ))}\n      </Segment>\n    </>\n  ) : null;\n};\n\nexport default BrokenRelations;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Broken relations","defaultMessage":"Broken relations"},{"id":"countBrokenRelations","defaultMessage":"{countofrelation} broken {countofrelation, plural, one {relation} other {relations}} of type {typeofrelation}"},{"id":"Source","defaultMessage":"Source"},{"id":"Target","defaultMessage":"Target"}]}},"sourceType":"module","externalDependencies":[]}