{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/Form.jsx\";\nvar __jsx = React.createElement;\n/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Field, BlocksForm } from '@plone/volto/components/manage/Form';\nimport BlocksToolbar from '@plone/volto/components/manage/Form/BlocksToolbar';\nimport UndoToolbar from '@plone/volto/components/manage/Form/UndoToolbar';\nimport { difference } from '@plone/volto/helpers/Utils/Utils';\nimport FormValidation from '@plone/volto/helpers/FormValidation/FormValidation';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData } from '@plone/volto/helpers/Blocks/Blocks';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport findIndex from 'lodash/findIndex';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport mapValues from 'lodash/mapValues';\nimport pickBy from 'lodash/pickBy';\nimport without from 'lodash/without';\nimport cloneDeep from 'lodash/cloneDeep';\nimport xor from 'lodash/xor';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Accordion, Button, Container as SemanticContainer, Form as UiForm, Message, Segment, Tab } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { setMetadataFieldsets, resetMetadataFocus, setSidebarTab } from '@plone/volto/actions/sidebar/sidebar';\nimport { setFormData, setUIState } from '@plone/volto/actions/form/form';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\nimport SlotRenderer from '@plone/volto/components/theme/SlotRenderer/SlotRenderer';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    /**\n     * getOnlyFormModifiedValues handler\n     * It returns only the values of the fields that are have really changed since the\n     * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n     * send the changed data.\n     * @method getOnlyFormModifiedValues\n     * @param {Object} event Event object.\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"getOnlyFormModifiedValues\", () => {\n      const formData = this.state.formData;\n      const fieldsModified = Object.keys(difference(formData, this.state.initialFormData));\n      return _objectSpread(_objectSpread({}, pickBy(formData, (value, key) => fieldsModified.includes(key))), formData['@static_behaviors'] && {\n        '@static_behaviors': formData['@static_behaviors']\n      });\n    });\n    /**\n     * Removed blocks and blocks_layout fields from the form.\n     * @method removeBlocksLayoutFields\n     * @param {object} schema The schema definition of the form.\n     * @returns A modified copy of the given schema.\n     */\n    _defineProperty(this, \"removeBlocksLayoutFields\", schema => {\n      const newSchema = _objectSpread({}, schema);\n      const layoutFieldsetIndex = findIndex(newSchema.fieldsets, fieldset => fieldset.id === 'layout');\n      if (layoutFieldsetIndex > -1) {\n        const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n        newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(field => field !== 'blocks' && field !== 'blocks_layout');\n        if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n          newSchema.fieldsets = [...newSchema.fieldsets.slice(0, layoutFieldsetIndex), ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1)];\n        }\n      }\n      return newSchema;\n    });\n    const ids = {\n      title: uuid(),\n      text: uuid()\n    };\n    let {\n      formData: _formData,\n      schema: originalSchema\n    } = props;\n    const blocksFieldname = getBlocksFieldname(_formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(_formData);\n    const _schema = this.removeBlocksLayoutFields(originalSchema);\n    this.props.setMetadataFieldsets(_schema !== null && _schema !== void 0 && _schema.fieldsets ? _schema.fieldsets.map(fieldset => fieldset.id) : []);\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      _formData = _objectSpread(_objectSpread({}, mapValues(props.schema.properties, 'default')), _formData);\n    }\n\n    // We initialize the formData snapshot in here, before the initial data checks\n    const initialFormData = cloneDeep(_formData);\n\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (_formData.hasOwnProperty(blocksFieldname) && _formData.hasOwnProperty(blocksLayoutFieldname)) {\n      if (!_formData[blocksLayoutFieldname] || isEmpty(_formData[blocksLayoutFieldname].items)) {\n        _formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text]\n        };\n      }\n      if (!_formData[blocksFieldname] || isEmpty(_formData[blocksFieldname])) {\n        _formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title'\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType\n          }\n        };\n      }\n    }\n    let selectedBlock = null;\n    if (_formData.hasOwnProperty(blocksLayoutFieldname) && _formData[blocksLayoutFieldname].items.length > 0) {\n      var _config$blocks, _config$blocks2;\n      if (((_config$blocks = config.blocks) === null || _config$blocks === void 0 ? void 0 : _config$blocks.initialBlocksFocus) === null) {\n        selectedBlock = null;\n      } else if (this.props.type in ((_config$blocks2 = config.blocks) === null || _config$blocks2 === void 0 ? void 0 : _config$blocks2.initialBlocksFocus)) {\n        // Default selected is not the first block, but the one from config.\n        // TODO Select first block and not an arbitrary one.\n        Object.keys(_formData[blocksFieldname]).forEach(b_key => {\n          var _config$blocks3, _config$blocks3$initi;\n          if (_formData[blocksFieldname][b_key]['@type'] === ((_config$blocks3 = config.blocks) === null || _config$blocks3 === void 0 ? void 0 : (_config$blocks3$initi = _config$blocks3.initialBlocksFocus) === null || _config$blocks3$initi === void 0 ? void 0 : _config$blocks3$initi[this.props.type])) {\n            selectedBlock = b_key;\n          }\n        });\n      } else {\n        selectedBlock = _formData[blocksLayoutFieldname].items[0];\n      }\n    }\n\n    // Sync state to global state\n    if (this.props.global) {\n      this.props.setFormData(_formData);\n    }\n    this.props.setUIState({\n      selected: selectedBlock,\n      multiSelected: [],\n      hovered: null\n    });\n\n    // Set initial state\n    this.state = {\n      formData: _formData,\n      initialFormData,\n      errors: {},\n      isClient: false,\n      // Ensure focus remain in field after change\n      inFocus: {},\n      sidebarMetadataIsAvailable: false\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n    this.onToggleMetadataFieldset = this.onToggleMetadataFieldset.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let {\n      requestError\n    } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n    if (!this.props.isFormSelected && prevProps.isFormSelected) {\n      this.props.setUIState({\n        selected: null\n      });\n    }\n    if (requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(requestError);\n      if (!isEqual(prevProps.requestError, requestError) || !isEqual(this.state.errors, errors)) {\n        activeIndex = FormValidation.showFirstTabWithErrors({\n          errors,\n          schema: this.props.schema\n        });\n        this.setState({\n          errors,\n          activeIndex\n        });\n      }\n    }\n    if (this.props.onChangeFormData) {\n      if (!isEqual(prevState === null || prevState === void 0 ? void 0 : prevState.formData, this.state.formData)) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n    if (this.props.global && !isEqual(this.props.globalData, prevProps.globalData)) {\n      this.setState({\n        formData: this.props.globalData\n      });\n    }\n    if (!isEqual(prevProps.schema, this.props.schema)) {\n      this.props.setMetadataFieldsets(this.removeBlocksLayoutFields(this.props.schema).fieldsets.map(fieldset => fieldset.id));\n    }\n    if (this.props.metadataFieldFocus !== '' && !isEqual(prevProps.metadataFieldFocus, this.props.metadataFieldFocus)) {\n      var _document$querySelect;\n      // Scroll into view\n      document.querySelector(`.field-wrapper-${this.props.metadataFieldFocus}`).scrollIntoView();\n\n      // Set focus to first input if available\n      (_document$querySelect = document.querySelector(`.field-wrapper-${this.props.metadataFieldFocus} input`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.focus();\n\n      // Reset focus field\n      this.props.resetMetadataFocus();\n    }\n    if (!this.state.sidebarMetadataIsAvailable && document.getElementById('sidebar-metadata')) {\n      this.setState(() => ({\n        sidebarMetadataIsAvailable: true\n      }));\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, {\n    activeIndex\n  }) {\n    const defaultFocus = this.props.schema.fieldsets[activeIndex].fields[0];\n    this.setState(_objectSpread({\n      activeIndex\n    }, defaultFocus ? {\n      inFocus: {\n        [defaultFocus]: true\n      }\n    } : {}));\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interaction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({\n      isFormPristine: false\n    });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: {\n          [id]: value\n        }\n      });\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState(prevState => {\n      const {\n        errors,\n        formData\n      } = prevState;\n      const newFormData = _objectSpread(_objectSpread({}, formData), {}, {\n        // We need to catch also when the value equals false this fixes #888\n        [id]: value || value !== undefined && isBoolean(value) ? value : null\n      });\n      delete errors[id];\n      if (this.props.global) {\n        this.props.setFormData(newFormData);\n      }\n      return {\n        errors,\n        formData: newFormData,\n        // Changing the form data re-renders the select widget which causes the\n        // focus to get lost. To circumvent this, we set the focus back to\n        // the input.\n        // This could fix other widgets too but currently targeted\n        // against the select widget only.\n        // Ensure field to be in focus after the change\n        inFocus: {\n          [id]: true\n        }\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n    const formData = this.state.formData;\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n      const blocks_layout = formData[blocksLayoutFieldname].items;\n      if (event.shiftKey) {\n        const anchor = this.props.uiState.multiSelected.length > 0 ? blocks_layout.indexOf(this.props.uiState.multiSelected[0]) : blocks_layout.indexOf(this.props.uiState.selected);\n        const focus = blocks_layout.indexOf(id);\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n        window.getSelection().empty();\n      }\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.props.uiState.multiSelected || [];\n        if (!this.props.uiState.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.props.uiState.selected];\n          selected = null;\n        }\n        if (this.props.uiState.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n    this.props.setUIState({\n      selected,\n      multiSelected,\n      gridSelected: null\n    });\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData\n      });\n      if (this.props.global) {\n        this.props.setFormData(this.props.formData);\n      }\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const formData = this.state.formData;\n    if (event) {\n      event.preventDefault();\n    }\n    const errors = this.props.schema ? FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData,\n      formatMessage: this.props.intl.formatMessage\n    }) : {};\n    let blocksErrors = {};\n    if (hasBlocksData(formData)) {\n      // Validate blocks\n      const blocks = this.state.formData[getBlocksFieldname(formData)];\n      const blocksLayout = this.state.formData[getBlocksLayoutFieldname(formData)];\n      const defaultSchema = {\n        properties: {},\n        fieldsets: [],\n        required: []\n      };\n      blocksLayout.items.forEach(block => {\n        let blockSchema = config.blocks.blocksConfig[blocks[block]['@type']].blockSchema || defaultSchema;\n        if (typeof blockSchema === 'function') {\n          blockSchema = blockSchema({\n            intl: this.props.intl,\n            formData: blocks[block]\n          });\n        }\n        const blockErrors = FormValidation.validateFieldsPerFieldset({\n          schema: blockSchema,\n          formData: blocks[block],\n          formatMessage: this.props.intl.formatMessage\n        });\n        if (keys(blockErrors).length > 0) {\n          blocksErrors = _objectSpread(_objectSpread({}, blocksErrors), {}, {\n            [block]: _objectSpread({}, blockErrors)\n          });\n        }\n      });\n    }\n    if (keys(errors).length > 0 || keys(blocksErrors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema\n      });\n      this.setState({\n        errors: _objectSpread(_objectSpread({}, errors), !isEmpty(blocksErrors) && {\n          blocks: blocksErrors\n        }),\n        activeIndex\n      });\n      if (keys(errors).length > 0) {\n        // Changes the focus to the metadata tab in the sidebar if error\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.error),\n          content: __jsx(\"ul\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 15\n            }\n          }, Object.keys(errors).map((err, index) => __jsx(\"li\", {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 19\n            }\n          }, __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 21\n            }\n          }, this.props.schema.properties[err].title || err, \":\"), ' ', errors[err]))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 11\n          }\n        }));\n        this.props.setSidebarTab(0);\n      } else if (keys(blocksErrors).length > 0) {\n        const errorField = Object.entries(Object.entries(blocksErrors)[0][1])[0][0];\n        const errorMessage = Object.entries(Object.entries(blocksErrors)[0][1])[0][1];\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.blocksFieldsErrorTitle, {\n            errorField\n          }),\n          content: errorMessage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 11\n          }\n        }));\n        this.props.setSidebarTab(1);\n        this.props.setUIState({\n          selected: Object.keys(blocksErrors)[0],\n          multiSelected: [],\n          hovered: null\n        });\n      }\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData\n        });\n        if (this.props.global) {\n          this.props.setFormData(this.props.formData);\n        }\n      }\n    }\n  }\n  /**\n   * Toggle metadata fieldset handler\n   * @method onToggleMetadataFieldset\n   * @param {Object} event Event object.\n   * @param {Object} blockProps Block properties.\n   * @returns {undefined}\n   */\n  onToggleMetadataFieldset(event, blockProps) {\n    const {\n      index\n    } = blockProps;\n    this.props.setMetadataFieldsets(xor(this.props.metadataFieldsets, [index]));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      settings\n    } = config;\n    const {\n      schema: originalSchema,\n      onCancel,\n      onSubmit,\n      navRoot,\n      type,\n      metadataFieldsets\n    } = this.props;\n    const formData = this.state.formData;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n    const Container = config.getComponent({\n      name: 'Container'\n    }).component || SemanticContainer;\n    return this.props.visual ?\n    // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n    // but draftJS don't like it much and the hydration gets messed up\n    this.state.isClient && __jsx(React.Fragment, null, __jsx(SlotRenderer, {\n      name: \"aboveContent\",\n      content: this.props.content,\n      navRoot: navRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 11\n      }\n    }, __jsx(React.Fragment, null, __jsx(BlocksToolbar, {\n      formData: formData,\n      selectedBlock: this.props.uiState.selected,\n      selectedBlocks: this.props.uiState.multiSelected,\n      onChangeBlocks: newBlockData => {\n        const newFormData = _objectSpread(_objectSpread({}, formData), newBlockData);\n        this.setState({\n          formData: newFormData\n        });\n        if (this.props.global) {\n          this.props.setFormData(newFormData);\n        }\n      },\n      onSetSelectedBlocks: blockIds => this.props.setUIState({\n        multiSelected: blockIds\n      }),\n      onSelectBlock: this.onSelectBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 15\n      }\n    }), __jsx(UndoToolbar, {\n      state: {\n        formData,\n        selected: this.props.uiState.selected,\n        multiSelected: this.props.uiState.multiSelected\n      },\n      enableHotKeys: true,\n      onUndoRedo: ({\n        state\n      }) => {\n        if (this.props.global) {\n          this.props.setFormData(state.formData);\n        }\n        return this.setState(state);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 15\n      }\n    }), __jsx(BlocksForm, {\n      onChangeFormData: newData => {\n        const newFormData = _objectSpread(_objectSpread({}, formData), newData);\n        this.setState({\n          formData: newFormData\n        });\n        if (this.props.global) {\n          this.props.setFormData(newFormData);\n        }\n      },\n      onChangeField: this.onChangeField,\n      onSelectBlock: this.onSelectBlock,\n      properties: formData,\n      navRoot: navRoot,\n      type: type,\n      pathname: this.props.pathname,\n      selectedBlock: this.props.uiState.selected,\n      multiSelected: this.props.uiState.multiSelected,\n      manage: this.props.isAdminForm,\n      allowedBlocks: this.props.allowedBlocks,\n      showRestricted: this.props.showRestricted,\n      editable: this.props.editable,\n      isMainForm: this.props.editable\n      // Properties to pass to the BlocksForm to match the View ones\n      ,\n      history: this.props.history,\n      location: this.props.location,\n      token: this.props.token,\n      errors: this.state.errors,\n      blocksErrors: this.state.errors.blocks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 15\n      }\n    }), this.state.isClient && this.state.sidebarMetadataIsAvailable && this.props.editable && /*#__PURE__*/createPortal(__jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: keys(this.state.errors).length > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 19\n      }\n    }, schema && map(schema.fieldsets, fieldset => __jsx(Accordion, {\n      fluid: true,\n      styled: true,\n      className: \"form\",\n      key: fieldset.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 25\n      }\n    }, __jsx(\"div\", {\n      key: fieldset.id,\n      id: `metadataform-fieldset-${fieldset.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 27\n      }\n    }, __jsx(Accordion.Title, {\n      active: metadataFieldsets.includes(fieldset.id),\n      index: fieldset.id,\n      onClick: this.onToggleMetadataFieldset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 29\n      }\n    }, fieldset.title, metadataFieldsets.includes(fieldset.id) ? __jsx(Icon, {\n      name: upSVG,\n      size: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 33\n      }\n    }) : __jsx(Icon, {\n      name: downSVG,\n      size: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 33\n      }\n    })), __jsx(Accordion.Content, {\n      active: metadataFieldsets.includes(fieldset.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 29\n      }\n    }, __jsx(Segment, {\n      className: \"attached\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 31\n      }\n    }, map(fieldset.fields, (field, index) => {\n      var _document$getElementB;\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        fieldSet: fieldset.title.toLowerCase(),\n        formData: formData,\n        focus: this.state.isClient && (_document$getElementB = document.getElementById('sidebar-metadata')) !== null && _document$getElementB !== void 0 && _document$getElementB.contains(document.activeElement) ? this.state.inFocus[field] : false,\n        value: formData === null || formData === void 0 ? void 0 : formData[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: this.onChangeField,\n        onBlur: this.onBlurField,\n        onClick: this.onClickInput,\n        key: field,\n        error: this.state.errors[field],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 35\n        }\n      }));\n    }))))))), document.getElementById('sidebar-metadata')), __jsx(SlotRenderer, {\n      name: \"belowContent\",\n      content: this.props.content,\n      navRoot: navRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 15\n      }\n    })))) : __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 7\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: keys(this.state.errors).length > 0,\n      className: settings.verticalFormTabs ? 'vertical-form' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 9\n      }\n    }, __jsx(\"fieldset\", {\n      className: \"invisible\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 11\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 13\n      }\n    }, schema && schema.fieldsets.length > 1 && __jsx(React.Fragment, null, settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n      secondary: true,\n      attached: true,\n      key: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 21\n      }\n    }, this.props.title), __jsx(Tab, {\n      menu: {\n        secondary: true,\n        pointing: true,\n        attached: true,\n        tabular: true,\n        className: 'formtabs',\n        vertical: settings.verticalFormTabs\n      },\n      grid: {\n        paneWidth: 9,\n        tabWidth: 3,\n        stackable: true\n      },\n      onTabChange: this.onTabChange,\n      activeIndex: this.state.activeIndex,\n      panes: map(schema.fieldsets, item => ({\n        menuItem: item.title,\n        render: () => [!settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n          secondary: true,\n          attached: true,\n          key: this.props.title,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 27\n          }\n        }, this.props.title), item.description && __jsx(Message, {\n          attached: \"bottom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 27\n          }\n        }, item.description), ...map(item.fields, (field, index) => __jsx(Field, _extends({}, schema.properties[field], {\n          id: field,\n          formData: formData,\n          fieldSet: item.id,\n          focus: this.state.inFocus[field],\n          value: formData === null || formData === void 0 ? void 0 : formData[field],\n          required: schema.required.indexOf(field) !== -1,\n          onChange: this.props.editable ? this.onChangeField : () => {},\n          onBlur: this.onBlurField,\n          onClick: this.onClickInput,\n          key: field,\n          error: this.state.errors[field],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 27\n          }\n        })))]\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 19\n      }\n    })), schema && schema.fieldsets.length === 1 && __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 17\n      }\n    }, this.props.title && __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 21\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957,\n        columnNumber: 23\n      }\n    }, \" \", this.props.title)), this.props.description && __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 21\n      }\n    }, this.props.description), keys(this.state.errors).length > 0 && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.intl.formatMessage(messages.thereWereSomeErrors),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 21\n      }\n    }), this.props.error && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 21\n      }\n    }), map(schema.fieldsets[0].fields, field => __jsx(Field, _extends({}, schema.properties[field], {\n      id: field,\n      value: formData === null || formData === void 0 ? void 0 : formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: this.onChangeField,\n      onBlur: this.onBlurField,\n      onClick: this.onClickInput,\n      key: field,\n      error: this.state.errors[field],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 21\n      }\n    })))), !this.props.hideActions && __jsx(Segment, {\n      className: \"actions\",\n      clearing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 17\n      }\n    }, onSubmit && __jsx(Button, {\n      basic: true,\n      primary: true,\n      floated: \"right\",\n      type: \"submit\",\n      \"aria-label\": this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      title: this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: aheadSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 23\n      }\n    })), onCancel && __jsx(Button, {\n      basic: true,\n      secondary: true,\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      onClick: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 23\n      }\n    })))))));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(Form, \"propTypes\", {\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  globalData: PropTypes.objectOf(PropTypes.any),\n  metadataFieldsets: PropTypes.arrayOf(PropTypes.string),\n  metadataFieldFocus: PropTypes.string,\n  pathname: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n  submitLabel: PropTypes.string,\n  resetAfterSubmit: PropTypes.bool,\n  resetOnCancel: PropTypes.bool,\n  isEditForm: PropTypes.bool,\n  isAdminForm: PropTypes.bool,\n  title: PropTypes.string,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  loading: PropTypes.bool,\n  hideActions: PropTypes.bool,\n  description: PropTypes.string,\n  visual: PropTypes.bool,\n  blocks: PropTypes.arrayOf(PropTypes.object),\n  isFormSelected: PropTypes.bool,\n  onSelectForm: PropTypes.func,\n  editable: PropTypes.bool,\n  onChangeFormData: PropTypes.func,\n  requestError: PropTypes.string,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool,\n  global: PropTypes.bool\n});\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(Form, \"defaultProps\", {\n  formData: null,\n  onSubmit: null,\n  onCancel: null,\n  submitLabel: null,\n  resetAfterSubmit: false,\n  resetOnCancel: false,\n  isEditForm: false,\n  isAdminForm: false,\n  title: null,\n  description: null,\n  error: null,\n  loading: null,\n  hideActions: false,\n  visual: false,\n  blocks: [],\n  pathname: '',\n  schema: {},\n  isFormSelected: true,\n  onSelectForm: null,\n  editable: true,\n  requestError: null,\n  allowedBlocks: null,\n  global: false\n});\nconst FormIntl = injectIntl(Form, {\n  forwardRef: true\n});\n_c = FormIntl;\nexport default compose(connect((state, props) => {\n  var _state$form, _state$form2, _state$sidebar, _state$sidebar2;\n  return {\n    content: state.content.data,\n    globalData: (_state$form = state.form) === null || _state$form === void 0 ? void 0 : _state$form.global,\n    uiState: (_state$form2 = state.form) === null || _state$form2 === void 0 ? void 0 : _state$form2.ui,\n    metadataFieldsets: (_state$sidebar = state.sidebar) === null || _state$sidebar === void 0 ? void 0 : _state$sidebar.metadataFieldsets,\n    metadataFieldFocus: (_state$sidebar2 = state.sidebar) === null || _state$sidebar2 === void 0 ? void 0 : _state$sidebar2.metadataFieldFocus\n  };\n}, {\n  setMetadataFieldsets,\n  setSidebarTab,\n  setFormData,\n  setUIState,\n  resetMetadataFocus\n}, null, {\n  forwardRef: true\n}))(FormIntl);\nvar _c;\n$RefreshReg$(_c, \"FormIntl\");","map":{"version":3,"names":["Icon","Toast","Field","BlocksForm","BlocksToolbar","UndoToolbar","difference","FormValidation","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","messages","aheadSVG","clearSVG","upSVG","downSVG","findIndex","isEmpty","isEqual","keys","map","mapValues","pickBy","without","cloneDeep","xor","isBoolean","PropTypes","React","Component","injectIntl","createPortal","connect","Accordion","Button","Container","SemanticContainer","Form","UiForm","Message","Segment","Tab","v4","uuid","toast","setMetadataFieldsets","resetMetadataFocus","setSidebarTab","setFormData","setUIState","compose","config","SlotRenderer","constructor","props","_defineProperty","formData","state","fieldsModified","Object","initialFormData","_objectSpread","value","key","includes","schema","newSchema","layoutFieldsetIndex","fieldsets","fieldset","id","layoutFields","fields","filter","field","length","slice","ids","title","text","originalSchema","blocksFieldname","blocksLayoutFieldname","removeBlocksLayoutFields","isEditForm","properties","hasOwnProperty","items","settings","defaultBlockType","selectedBlock","_config$blocks","_config$blocks2","blocks","initialBlocksFocus","type","forEach","b_key","_config$blocks3","_config$blocks3$initi","global","selected","multiSelected","hovered","errors","isClient","inFocus","sidebarMetadataIsAvailable","onChangeField","bind","onSelectBlock","onSubmit","onCancel","onTabChange","onBlurField","onClickInput","onToggleMetadataFieldset","componentDidUpdate","prevProps","prevState","requestError","activeIndex","isFormSelected","giveServerErrorsToCorrespondingFields","showFirstTabWithErrors","setState","onChangeFormData","globalData","metadataFieldFocus","_document$querySelect","document","querySelector","scrollIntoView","focus","getElementById","e","defaultFocus","isFormPristine","validateFieldsPerFieldset","formatMessage","intl","touchedField","componentDidMount","newFormData","undefined","isMultipleSelection","event","blocks_layout","shiftKey","anchor","uiState","indexOf","window","getSelection","empty","ctrlKey","metaKey","gridSelected","onSelectForm","nativeEvent","stopImmediatePropagation","preventDefault","resetOnCancel","resetAfterSubmit","blocksErrors","blocksLayout","defaultSchema","required","block","blockSchema","blocksConfig","blockErrors","error","__jsx","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","err","index","errorField","entries","errorMessage","blocksFieldsErrorTitle","getOnlyFormModifiedValues","blockProps","metadataFieldsets","render","navRoot","getComponent","name","component","visual","Fragment","selectedBlocks","onChangeBlocks","newBlockData","onSetSelectedBlocks","blockIds","enableHotKeys","onUndoRedo","newData","pathname","manage","isAdminForm","allowedBlocks","showRestricted","editable","isMainForm","history","location","token","method","fluid","styled","className","Title","active","onClick","size","Content","_document$getElementB","_extends","fieldSet","toLowerCase","contains","activeElement","onChange","onBlur","verticalFormTabs","Group","raised","secondary","attached","menu","pointing","tabular","vertical","grid","paneWidth","tabWidth","stackable","panes","item","menuItem","description","style","fontSize","icon","negative","header","thereWereSomeErrors","message","hideActions","clearing","basic","primary","floated","submitLabel","save","loading","cancel","shape","arrayOf","string","objectOf","any","definitions","func","bool","object","FormIntl","forwardRef","_c","_state$form","_state$form2","_state$sidebar","_state$sidebar2","data","form","ui","sidebar","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/Form.jsx"],"sourcesContent":["/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Field, BlocksForm } from '@plone/volto/components/manage/Form';\nimport BlocksToolbar from '@plone/volto/components/manage/Form/BlocksToolbar';\nimport UndoToolbar from '@plone/volto/components/manage/Form/UndoToolbar';\nimport { difference } from '@plone/volto/helpers/Utils/Utils';\nimport FormValidation from '@plone/volto/helpers/FormValidation/FormValidation';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport findIndex from 'lodash/findIndex';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport mapValues from 'lodash/mapValues';\nimport pickBy from 'lodash/pickBy';\nimport without from 'lodash/without';\nimport cloneDeep from 'lodash/cloneDeep';\nimport xor from 'lodash/xor';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport {\n  Accordion,\n  Button,\n  Container as SemanticContainer,\n  Form as UiForm,\n  Message,\n  Segment,\n  Tab,\n} from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport {\n  setMetadataFieldsets,\n  resetMetadataFocus,\n  setSidebarTab,\n} from '@plone/volto/actions/sidebar/sidebar';\nimport { setFormData, setUIState } from '@plone/volto/actions/form/form';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\nimport SlotRenderer from '@plone/volto/components/theme/SlotRenderer/SlotRenderer';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    globalData: PropTypes.objectOf(PropTypes.any),\n    metadataFieldsets: PropTypes.arrayOf(PropTypes.string),\n    metadataFieldFocus: PropTypes.string,\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    resetOnCancel: PropTypes.bool,\n    isEditForm: PropTypes.bool,\n    isAdminForm: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n    isFormSelected: PropTypes.bool,\n    onSelectForm: PropTypes.func,\n    editable: PropTypes.bool,\n    onChangeFormData: PropTypes.func,\n    requestError: PropTypes.string,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n    global: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    resetOnCancel: false,\n    isEditForm: false,\n    isAdminForm: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n    isFormSelected: true,\n    onSelectForm: null,\n    editable: true,\n    requestError: null,\n    allowedBlocks: null,\n    global: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData, schema: originalSchema } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n\n    this.props.setMetadataFieldsets(\n      schema?.fieldsets ? schema.fieldsets.map((fieldset) => fieldset.id) : [],\n    );\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = {\n        ...mapValues(props.schema.properties, 'default'),\n        ...formData,\n      };\n    }\n\n    // We initialize the formData snapshot in here, before the initial data checks\n    const initialFormData = cloneDeep(formData);\n\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (\n      formData.hasOwnProperty(blocksFieldname) &&\n      formData.hasOwnProperty(blocksLayoutFieldname)\n    ) {\n      if (\n        !formData[blocksLayoutFieldname] ||\n        isEmpty(formData[blocksLayoutFieldname].items)\n      ) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text],\n        };\n      }\n      if (!formData[blocksFieldname] || isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title',\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType,\n          },\n        };\n      }\n    }\n\n    let selectedBlock = null;\n    if (\n      formData.hasOwnProperty(blocksLayoutFieldname) &&\n      formData[blocksLayoutFieldname].items.length > 0\n    ) {\n      if (config.blocks?.initialBlocksFocus === null) {\n        selectedBlock = null;\n      } else if (this.props.type in config.blocks?.initialBlocksFocus) {\n        // Default selected is not the first block, but the one from config.\n        // TODO Select first block and not an arbitrary one.\n        Object.keys(formData[blocksFieldname]).forEach((b_key) => {\n          if (\n            formData[blocksFieldname][b_key]['@type'] ===\n            config.blocks?.initialBlocksFocus?.[this.props.type]\n          ) {\n            selectedBlock = b_key;\n          }\n        });\n      } else {\n        selectedBlock = formData[blocksLayoutFieldname].items[0];\n      }\n    }\n\n    // Sync state to global state\n    if (this.props.global) {\n      this.props.setFormData(formData);\n    }\n\n    this.props.setUIState({\n      selected: selectedBlock,\n      multiSelected: [],\n      hovered: null,\n    });\n\n    // Set initial state\n    this.state = {\n      formData,\n      initialFormData,\n      errors: {},\n      isClient: false,\n      // Ensure focus remain in field after change\n      inFocus: {},\n      sidebarMetadataIsAvailable: false,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n    this.onToggleMetadataFieldset = this.onToggleMetadataFieldset.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let { requestError } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (!this.props.isFormSelected && prevProps.isFormSelected) {\n      this.props.setUIState({\n        selected: null,\n      });\n    }\n    if (requestError) {\n      errors =\n        FormValidation.giveServerErrorsToCorrespondingFields(requestError);\n      if (\n        !isEqual(prevProps.requestError, requestError) ||\n        !isEqual(this.state.errors, errors)\n      ) {\n        activeIndex = FormValidation.showFirstTabWithErrors({\n          errors,\n          schema: this.props.schema,\n        });\n        this.setState({\n          errors,\n          activeIndex,\n        });\n      }\n    }\n\n    if (this.props.onChangeFormData) {\n      if (!isEqual(prevState?.formData, this.state.formData)) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n    if (\n      this.props.global &&\n      !isEqual(this.props.globalData, prevProps.globalData)\n    ) {\n      this.setState({\n        formData: this.props.globalData,\n      });\n    }\n\n    if (!isEqual(prevProps.schema, this.props.schema)) {\n      this.props.setMetadataFieldsets(\n        this.removeBlocksLayoutFields(this.props.schema).fieldsets.map(\n          (fieldset) => fieldset.id,\n        ),\n      );\n    }\n\n    if (\n      this.props.metadataFieldFocus !== '' &&\n      !isEqual(prevProps.metadataFieldFocus, this.props.metadataFieldFocus)\n    ) {\n      // Scroll into view\n      document\n        .querySelector(`.field-wrapper-${this.props.metadataFieldFocus}`)\n        .scrollIntoView();\n\n      // Set focus to first input if available\n      document\n        .querySelector(`.field-wrapper-${this.props.metadataFieldFocus} input`)\n        ?.focus();\n\n      // Reset focus field\n      this.props.resetMetadataFocus();\n    }\n\n    if (\n      !this.state.sidebarMetadataIsAvailable &&\n      document.getElementById('sidebar-metadata')\n    ) {\n      this.setState(() => ({ sidebarMetadataIsAvailable: true }));\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, { activeIndex }) {\n    const defaultFocus = this.props.schema.fieldsets[activeIndex].fields[0];\n    this.setState({\n      activeIndex,\n      ...(defaultFocus ? { inFocus: { [defaultFocus]: true } } : {}),\n    });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interaction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: { [id]: value },\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState((prevState) => {\n      const { errors, formData } = prevState;\n      const newFormData = {\n        ...formData,\n        // We need to catch also when the value equals false this fixes #888\n        [id]: value || (value !== undefined && isBoolean(value)) ? value : null,\n      };\n      delete errors[id];\n      if (this.props.global) {\n        this.props.setFormData(newFormData);\n      }\n      return {\n        errors,\n        formData: newFormData,\n        // Changing the form data re-renders the select widget which causes the\n        // focus to get lost. To circumvent this, we set the focus back to\n        // the input.\n        // This could fix other widgets too but currently targeted\n        // against the select widget only.\n        // Ensure field to be in focus after the change\n        inFocus: { [id]: true },\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n    const formData = this.state.formData;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n      const blocks_layout = formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.props.uiState.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.props.uiState.multiSelected[0])\n            : blocks_layout.indexOf(this.props.uiState.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n        window.getSelection().empty();\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.props.uiState.multiSelected || [];\n        if (!this.props.uiState.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.props.uiState.selected];\n          selected = null;\n        }\n        if (this.props.uiState.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n\n    this.props.setUIState({\n      selected,\n      multiSelected,\n      gridSelected: null,\n    });\n\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData,\n      });\n      if (this.props.global) {\n        this.props.setFormData(this.props.formData);\n      }\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const formData = this.state.formData;\n\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = this.props.schema\n      ? FormValidation.validateFieldsPerFieldset({\n          schema: this.props.schema,\n          formData,\n          formatMessage: this.props.intl.formatMessage,\n        })\n      : {};\n\n    let blocksErrors = {};\n\n    if (hasBlocksData(formData)) {\n      // Validate blocks\n      const blocks = this.state.formData[getBlocksFieldname(formData)];\n      const blocksLayout =\n        this.state.formData[getBlocksLayoutFieldname(formData)];\n      const defaultSchema = {\n        properties: {},\n        fieldsets: [],\n        required: [],\n      };\n      blocksLayout.items.forEach((block) => {\n        let blockSchema =\n          config.blocks.blocksConfig[blocks[block]['@type']].blockSchema ||\n          defaultSchema;\n        if (typeof blockSchema === 'function') {\n          blockSchema = blockSchema({\n            intl: this.props.intl,\n            formData: blocks[block],\n          });\n        }\n        const blockErrors = FormValidation.validateFieldsPerFieldset({\n          schema: blockSchema,\n          formData: blocks[block],\n          formatMessage: this.props.intl.formatMessage,\n        });\n        if (keys(blockErrors).length > 0) {\n          blocksErrors = {\n            ...blocksErrors,\n            [block]: { ...blockErrors },\n          };\n        }\n      });\n    }\n    if (keys(errors).length > 0 || keys(blocksErrors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n      this.setState({\n        errors: {\n          ...errors,\n          ...(!isEmpty(blocksErrors) && { blocks: blocksErrors }),\n        },\n        activeIndex,\n      });\n\n      if (keys(errors).length > 0) {\n        // Changes the focus to the metadata tab in the sidebar if error\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(messages.error)}\n            content={\n              <ul>\n                {Object.keys(errors).map((err, index) => (\n                  <li key={index}>\n                    <strong>\n                      {this.props.schema.properties[err].title || err}:\n                    </strong>{' '}\n                    {errors[err]}\n                  </li>\n                ))}\n              </ul>\n            }\n          />,\n        );\n        this.props.setSidebarTab(0);\n      } else if (keys(blocksErrors).length > 0) {\n        const errorField = Object.entries(\n          Object.entries(blocksErrors)[0][1],\n        )[0][0];\n        const errorMessage = Object.entries(\n          Object.entries(blocksErrors)[0][1],\n        )[0][1];\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(\n              messages.blocksFieldsErrorTitle,\n              { errorField },\n            )}\n            content={errorMessage}\n          />,\n        );\n        this.props.setSidebarTab(1);\n        this.props.setUIState({\n          selected: Object.keys(blocksErrors)[0],\n          multiSelected: [],\n          hovered: null,\n        });\n      }\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n        if (this.props.global) {\n          this.props.setFormData(this.props.formData);\n        }\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  getOnlyFormModifiedValues = () => {\n    const formData = this.state.formData;\n\n    const fieldsModified = Object.keys(\n      difference(formData, this.state.initialFormData),\n    );\n    return {\n      ...pickBy(formData, (value, key) => fieldsModified.includes(key)),\n      ...(formData['@static_behaviors'] && {\n        '@static_behaviors': formData['@static_behaviors'],\n      }),\n    };\n  };\n\n  /**\n   * Removed blocks and blocks_layout fields from the form.\n   * @method removeBlocksLayoutFields\n   * @param {object} schema The schema definition of the form.\n   * @returns A modified copy of the given schema.\n   */\n  removeBlocksLayoutFields = (schema) => {\n    const newSchema = { ...schema };\n    const layoutFieldsetIndex = findIndex(\n      newSchema.fieldsets,\n      (fieldset) => fieldset.id === 'layout',\n    );\n    if (layoutFieldsetIndex > -1) {\n      const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n      newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(\n        (field) => field !== 'blocks' && field !== 'blocks_layout',\n      );\n      if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n        newSchema.fieldsets = [\n          ...newSchema.fieldsets.slice(0, layoutFieldsetIndex),\n          ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1),\n        ];\n      }\n    }\n    return newSchema;\n  };\n\n  /**\n   * Toggle metadata fieldset handler\n   * @method onToggleMetadataFieldset\n   * @param {Object} event Event object.\n   * @param {Object} blockProps Block properties.\n   * @returns {undefined}\n   */\n  onToggleMetadataFieldset(event, blockProps) {\n    const { index } = blockProps;\n    this.props.setMetadataFieldsets(xor(this.props.metadataFieldsets, [index]));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const {\n      schema: originalSchema,\n      onCancel,\n      onSubmit,\n      navRoot,\n      type,\n      metadataFieldsets,\n    } = this.props;\n    const formData = this.state.formData;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n    const Container =\n      config.getComponent({ name: 'Container' }).component || SemanticContainer;\n    return this.props.visual ? (\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && (\n        <>\n          <SlotRenderer\n            name=\"aboveContent\"\n            content={this.props.content}\n            navRoot={navRoot}\n          />\n\n          <Container>\n            <>\n              <BlocksToolbar\n                formData={formData}\n                selectedBlock={this.props.uiState.selected}\n                selectedBlocks={this.props.uiState.multiSelected}\n                onChangeBlocks={(newBlockData) => {\n                  const newFormData = {\n                    ...formData,\n                    ...newBlockData,\n                  };\n                  this.setState({\n                    formData: newFormData,\n                  });\n                  if (this.props.global) {\n                    this.props.setFormData(newFormData);\n                  }\n                }}\n                onSetSelectedBlocks={(blockIds) =>\n                  this.props.setUIState({ multiSelected: blockIds })\n                }\n                onSelectBlock={this.onSelectBlock}\n              />\n              <UndoToolbar\n                state={{\n                  formData,\n                  selected: this.props.uiState.selected,\n                  multiSelected: this.props.uiState.multiSelected,\n                }}\n                enableHotKeys\n                onUndoRedo={({ state }) => {\n                  if (this.props.global) {\n                    this.props.setFormData(state.formData);\n                  }\n                  return this.setState(state);\n                }}\n              />\n              <BlocksForm\n                onChangeFormData={(newData) => {\n                  const newFormData = {\n                    ...formData,\n                    ...newData,\n                  };\n                  this.setState({\n                    formData: newFormData,\n                  });\n                  if (this.props.global) {\n                    this.props.setFormData(newFormData);\n                  }\n                }}\n                onChangeField={this.onChangeField}\n                onSelectBlock={this.onSelectBlock}\n                properties={formData}\n                navRoot={navRoot}\n                type={type}\n                pathname={this.props.pathname}\n                selectedBlock={this.props.uiState.selected}\n                multiSelected={this.props.uiState.multiSelected}\n                manage={this.props.isAdminForm}\n                allowedBlocks={this.props.allowedBlocks}\n                showRestricted={this.props.showRestricted}\n                editable={this.props.editable}\n                isMainForm={this.props.editable}\n                // Properties to pass to the BlocksForm to match the View ones\n                history={this.props.history}\n                location={this.props.location}\n                token={this.props.token}\n                errors={this.state.errors}\n                blocksErrors={this.state.errors.blocks}\n              />\n              {this.state.isClient &&\n                this.state.sidebarMetadataIsAvailable &&\n                this.props.editable &&\n                createPortal(\n                  <UiForm\n                    method=\"post\"\n                    onSubmit={this.onSubmit}\n                    error={keys(this.state.errors).length > 0}\n                  >\n                    {schema &&\n                      map(schema.fieldsets, (fieldset) => (\n                        <Accordion\n                          fluid\n                          styled\n                          className=\"form\"\n                          key={fieldset.title}\n                        >\n                          <div\n                            key={fieldset.id}\n                            id={`metadataform-fieldset-${fieldset.id}`}\n                          >\n                            <Accordion.Title\n                              active={metadataFieldsets.includes(fieldset.id)}\n                              index={fieldset.id}\n                              onClick={this.onToggleMetadataFieldset}\n                            >\n                              {fieldset.title}\n                              {metadataFieldsets.includes(fieldset.id) ? (\n                                <Icon name={upSVG} size=\"20px\" />\n                              ) : (\n                                <Icon name={downSVG} size=\"20px\" />\n                              )}\n                            </Accordion.Title>\n                            <Accordion.Content\n                              active={metadataFieldsets.includes(fieldset.id)}\n                            >\n                              <Segment className=\"attached\">\n                                {map(fieldset.fields, (field, index) => (\n                                  <Field\n                                    {...schema.properties[field]}\n                                    id={field}\n                                    fieldSet={fieldset.title.toLowerCase()}\n                                    formData={formData}\n                                    focus={\n                                      this.state.isClient &&\n                                      document\n                                        .getElementById('sidebar-metadata')\n                                        ?.contains(document.activeElement)\n                                        ? this.state.inFocus[field]\n                                        : false\n                                    }\n                                    value={formData?.[field]}\n                                    required={\n                                      schema.required.indexOf(field) !== -1\n                                    }\n                                    onChange={this.onChangeField}\n                                    onBlur={this.onBlurField}\n                                    onClick={this.onClickInput}\n                                    key={field}\n                                    error={this.state.errors[field]}\n                                  />\n                                ))}\n                              </Segment>\n                            </Accordion.Content>\n                          </div>\n                        </Accordion>\n                      ))}\n                  </UiForm>,\n                  document.getElementById('sidebar-metadata'),\n                )}\n\n              <SlotRenderer\n                name=\"belowContent\"\n                content={this.props.content}\n                navRoot={navRoot}\n              />\n            </>\n          </Container>\n        </>\n      )\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n          className={settings.verticalFormTabs ? 'vertical-form' : ''}\n        >\n          <fieldset className=\"invisible\">\n            <Segment.Group raised>\n              {schema && schema.fieldsets.length > 1 && (\n                <>\n                  {settings.verticalFormTabs && this.props.title && (\n                    <Segment secondary attached key={this.props.title}>\n                      {this.props.title}\n                    </Segment>\n                  )}\n                  <Tab\n                    menu={{\n                      secondary: true,\n                      pointing: true,\n                      attached: true,\n                      tabular: true,\n                      className: 'formtabs',\n                      vertical: settings.verticalFormTabs,\n                    }}\n                    grid={{ paneWidth: 9, tabWidth: 3, stackable: true }}\n                    onTabChange={this.onTabChange}\n                    activeIndex={this.state.activeIndex}\n                    panes={map(schema.fieldsets, (item) => ({\n                      menuItem: item.title,\n                      render: () => [\n                        !settings.verticalFormTabs && this.props.title && (\n                          <Segment secondary attached key={this.props.title}>\n                            {this.props.title}\n                          </Segment>\n                        ),\n                        item.description && (\n                          <Message attached=\"bottom\">\n                            {item.description}\n                          </Message>\n                        ),\n                        ...map(item.fields, (field, index) => (\n                          <Field\n                            {...schema.properties[field]}\n                            id={field}\n                            formData={formData}\n                            fieldSet={item.id}\n                            focus={this.state.inFocus[field]}\n                            value={formData?.[field]}\n                            required={schema.required.indexOf(field) !== -1}\n                            onChange={\n                              this.props.editable\n                                ? this.onChangeField\n                                : () => {}\n                            }\n                            onBlur={this.onBlurField}\n                            onClick={this.onClickInput}\n                            key={field}\n                            error={this.state.errors[field]}\n                          />\n                        )),\n                      ],\n                    }))}\n                  />\n                </>\n              )}\n              {schema && schema.fieldsets.length === 1 && (\n                <Segment>\n                  {this.props.title && (\n                    <Segment className=\"primary\">\n                      <h1 style={{ fontSize: '16px' }}> {this.props.title}</h1>\n                    </Segment>\n                  )}\n                  {this.props.description && (\n                    <Segment secondary>{this.props.description}</Segment>\n                  )}\n                  {keys(this.state.errors).length > 0 && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.intl.formatMessage(\n                        messages.thereWereSomeErrors,\n                      )}\n                    />\n                  )}\n                  {this.props.error && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.error.message}\n                    />\n                  )}\n                  {map(schema.fieldsets[0].fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={formData?.[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={this.onChangeField}\n                      onBlur={this.onBlurField}\n                      onClick={this.onClickInput}\n                      key={field}\n                      error={this.state.errors[field]}\n                    />\n                  ))}\n                </Segment>\n              )}\n              {!this.props.hideActions && (\n                <Segment className=\"actions\" clearing>\n                  {onSubmit && (\n                    <Button\n                      basic\n                      primary\n                      floated=\"right\"\n                      type=\"submit\"\n                      aria-label={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      title={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      loading={this.props.loading}\n                    >\n                      <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                  {onCancel && (\n                    <Button\n                      basic\n                      secondary\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                      floated=\"right\"\n                      onClick={this.onCancel}\n                    >\n                      <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                </Segment>\n              )}\n            </Segment.Group>\n          </fieldset>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nconst FormIntl = injectIntl(Form, { forwardRef: true });\n\nexport default compose(\n  connect(\n    (state, props) => ({\n      content: state.content.data,\n      globalData: state.form?.global,\n      uiState: state.form?.ui,\n      metadataFieldsets: state.sidebar?.metadataFieldsets,\n      metadataFieldFocus: state.sidebar?.metadataFieldFocus,\n    }),\n    {\n      setMetadataFieldsets,\n      setSidebarTab,\n      setFormData,\n      setUIState,\n      resetMetadataFocus,\n    },\n    null,\n    { forwardRef: true },\n  ),\n)(FormIntl);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}