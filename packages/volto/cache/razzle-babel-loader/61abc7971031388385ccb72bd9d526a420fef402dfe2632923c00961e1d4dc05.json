{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/ManageTranslations.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport reduce from 'lodash/reduce';\nimport { Link, useLocation } from 'react-router-dom';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { deleteLinkTranslation, linkTranslation } from '@plone/volto/actions/translations/translations';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createPortal } from 'react-dom';\nimport { toast } from 'react-toastify';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  linked: {\n    \"id\": \"Translation linked\",\n    \"defaultMessage\": \"Translation linked\"\n  },\n  unlinked: {\n    \"id\": \"Translation linking removed\",\n    \"defaultMessage\": \"Translation linking removed\"\n  },\n  link: {\n    \"id\": \"Link translation for\",\n    \"defaultMessage\": \"Link translation for\"\n  },\n  unlink: {\n    \"id\": \"Unlink translation for\",\n    \"defaultMessage\": \"Unlink translation for\"\n  },\n  ManageTranslations: {\n    \"id\": \"Manage Translations\",\n    \"defaultMessage\": \"Manage Translations\"\n  },\n  ManageTranslationsTitle: {\n    \"id\": \"Manage translations for {title}\",\n    \"defaultMessage\": \"Manage translations for {title}\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  }\n});\nconst ManageTranslations = props => {\n  _s();\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector(state => state.content.data);\n  const dispatch = useDispatch();\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(false);\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  const {\n    isObjectBrowserOpen,\n    openObjectBrowser\n  } = props;\n  const currentSelectedItem = React.useRef(null);\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(linkTranslation(flattenToAppURL(content['@id']), currentSelectedItem.current)).then(resp => {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.linked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }\n        }));\n        dispatch(getContent(getBaseUrl(pathname)));\n      }).catch(error => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: shadowedError.error.type,\n          content: shadowedError.error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }\n        }), {\n          toastId: 'linkFailed'\n        });\n      });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n  const translations = content && content['@components'].translations.items && _objectSpread({\n    [content.language.token]: {\n      url: content['@id']\n    }\n  }, reduce(content['@components'].translations.items, (acc, value) => {\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [value.language]: {\n        url: value['@id']\n      }\n    });\n  }, {}));\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang)).then(resp => {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.unlinked),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      }));\n      dispatch(getContent(getBaseUrl(pathname)));\n    }).catch(error => {\n      // TODO: The true error sent by the API is shadowed by the superagent one\n      // Update this when this issue is fixed.\n      const shadowedError = JSON.parse(error.response.text);\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: shadowedError.error.type,\n        content: shadowedError.error.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }), {\n        toastId: 'linkFailed'\n      });\n    });\n  }\n  return __jsx(Container, {\n    id: \"page-manage-translations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.ManageTranslations),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }), __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Manage translations for {title}\",\n    defaultMessage: \"Manage translations for {title}\",\n    values: {\n      title: __jsx(\"q\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 30\n        }\n      }, content.title)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  })), content && __jsx(Table, {\n    selectable: true,\n    compact: true,\n    singleLine: true,\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  }, __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, \"Language\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, \"Path\"), __jsx(Table.HeaderCell, {\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, \"Tools\"))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, config.settings.supportedLanguages.map(lang => {\n    var _translations$lang, _translations$lang2;\n    return __jsx(Table.Row, {\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      collapsing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, lang === content.language.token ? __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 23\n      }\n    }, langmap[lang].nativeName) : langmap[lang].nativeName), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      to: flattenToAppURL(((_translations$lang = translations[lang]) === null || _translations$lang === void 0 ? void 0 : _translations$lang.url) || ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, flattenToAppURL(((_translations$lang2 = translations[lang]) === null || _translations$lang2 === void 0 ? void 0 : _translations$lang2.url) || ''))), __jsx(Table.Cell, {\n      textAlign: \"right\",\n      className: \"manage-multilingual-tools\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token || (translations === null || translations === void 0 ? void 0 : translations[lang]),\n      as: Link,\n      to: {\n        pathname: `${pathname}/create-translation`,\n        state: {\n          type: content['@type'],\n          translationOf: flattenToAppURL(content['@id']),\n          language: lang\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }\n    }))), translations !== null && translations !== void 0 && translations[lang] ? __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.unlink)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => onDeleteTranslation(lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: lang === content.language.token ? linkSVG : unlinkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 27\n      }\n    }))) : __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.link)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => openObjectBrowser({\n        mode: 'link',\n        overlay: true,\n        onSelectItem: url => {\n          onSelectTarget(url, isObjectBrowserOpen);\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: linkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 27\n      }\n    })))));\n  }))), isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(Link, {\n      to: `${getBaseUrl(pathname)}`,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }), document.getElementById('toolbar'))));\n};\n_s(ManageTranslations, \"HfK5IIlyPVPRUR3hwdTbHgW+jNY=\", false, function () {\n  return [useIntl, useLocation, useSelector, useDispatch];\n});\n_c = ManageTranslations;\nexport default _c2 = withObjectBrowser(ManageTranslations);\nvar _c, _c2;\n$RefreshReg$(_c, \"ManageTranslations\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","Button","Container","Segment","Table","Helmet","flattenToAppURL","getBaseUrl","langmap","reduce","Link","useLocation","Icon","Toast","Toolbar","config","withObjectBrowser","deleteLinkTranslation","linkTranslation","getContent","defineMessages","FormattedMessage","useIntl","useSelector","useDispatch","createPortal","toast","addSVG","backSVG","linkSVG","unlinkSVG","messages","success","linked","unlinked","link","unlink","ManageTranslations","ManageTranslationsTitle","back","props","_s","intl","pathname","content","state","data","dispatch","isClient","setIsClient","isObjectBrowserOpen","openObjectBrowser","currentSelectedItem","useRef","current","then","resp","__jsx","title","formatMessage","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","catch","error","shadowedError","JSON","parse","response","text","type","message","toastId","translations","items","_objectSpread","language","token","url","acc","value","onSelectTarget","target","onDeleteTranslation","lang","id","Group","raised","className","defaultMessage","values","selectable","compact","singleLine","attached","Header","Row","HeaderCell","textAlign","Body","settings","supportedLanguages","map","_translations$lang","_translations$lang2","key","Cell","collapsing","nativeName","to","basic","icon","disabled","as","translationOf","name","size","toLowerCase","onClick","mode","overlay","onSelectItem","hideDefaultViewButtons","inner","document","getElementById","_c","_c2","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/ManageTranslations.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport reduce from 'lodash/reduce';\nimport { Link, useLocation } from 'react-router-dom';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport config from '@plone/volto/registry';\n\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport {\n  deleteLinkTranslation,\n  linkTranslation,\n} from '@plone/volto/actions/translations/translations';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createPortal } from 'react-dom';\nimport { toast } from 'react-toastify';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  linked: {\n    id: 'Translation linked',\n    defaultMessage: 'Translation linked',\n  },\n  unlinked: {\n    id: 'Translation linking removed',\n    defaultMessage: 'Translation linking removed',\n  },\n  link: {\n    id: 'Link translation for',\n    defaultMessage: 'Link translation for',\n  },\n  unlink: {\n    id: 'Unlink translation for',\n    defaultMessage: 'Unlink translation for',\n  },\n  ManageTranslations: {\n    id: 'Manage Translations',\n    defaultMessage: 'Manage Translations',\n  },\n  ManageTranslationsTitle: {\n    id: 'Manage translations for {title}',\n    defaultMessage: 'Manage translations for {title}',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\nconst ManageTranslations = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector((state) => state.content.data);\n  const dispatch = useDispatch();\n\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const { isObjectBrowserOpen, openObjectBrowser } = props;\n\n  const currentSelectedItem = React.useRef(null);\n\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(\n        linkTranslation(\n          flattenToAppURL(content['@id']),\n          currentSelectedItem.current,\n        ),\n      )\n        .then((resp) => {\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.linked)}\n            />,\n          );\n          dispatch(getContent(getBaseUrl(pathname)));\n        })\n        .catch((error) => {\n          // TODO: The true error sent by the API is shadowed by the superagent one\n          // Update this when this issue is fixed.\n          const shadowedError = JSON.parse(error.response.text);\n          toast.error(\n            <Toast\n              error\n              title={shadowedError.error.type}\n              content={shadowedError.error.message}\n            />,\n            { toastId: 'linkFailed' },\n          );\n        });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n\n  const translations = content &&\n    content['@components'].translations.items && {\n      [content.language.token]: {\n        url: content['@id'],\n      },\n      ...reduce(\n        content['@components'].translations.items,\n        (acc, value) => {\n          return { ...acc, [value.language]: { url: value['@id'] } };\n        },\n        {},\n      ),\n    };\n\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang))\n      .then((resp) => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.unlinked)}\n          />,\n        );\n        dispatch(getContent(getBaseUrl(pathname)));\n      })\n      .catch((error) => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(\n          <Toast\n            error\n            title={shadowedError.error.type}\n            content={shadowedError.error.message}\n          />,\n          { toastId: 'linkFailed' },\n        );\n      });\n  }\n\n  return (\n    <Container id=\"page-manage-translations\">\n      <Helmet title={intl.formatMessage(messages.ManageTranslations)} />\n      <Segment.Group raised>\n        <Segment className=\"primary\">\n          <FormattedMessage\n            id=\"Manage translations for {title}\"\n            defaultMessage=\"Manage translations for {title}\"\n            values={{ title: <q>{content.title}</q> }}\n          />\n        </Segment>\n        {content && (\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Language</Table.HeaderCell>\n                <Table.HeaderCell>Path</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"right\">Tools</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {config.settings.supportedLanguages.map((lang) => (\n                <Table.Row key={lang}>\n                  <Table.Cell collapsing>\n                    {lang === content.language.token ? (\n                      <strong>{langmap[lang].nativeName}</strong>\n                    ) : (\n                      langmap[lang].nativeName\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Link to={flattenToAppURL(translations[lang]?.url || '')}>\n                      {flattenToAppURL(translations[lang]?.url || '')}\n                    </Link>\n                  </Table.Cell>\n                  <Table.Cell\n                    textAlign=\"right\"\n                    className=\"manage-multilingual-tools\"\n                  >\n                    <Button.Group>\n                      <Button\n                        basic\n                        icon\n                        disabled={\n                          lang === content.language.token ||\n                          translations?.[lang]\n                        }\n                        as={Link}\n                        to={{\n                          pathname: `${pathname}/create-translation`,\n                          state: {\n                            type: content['@type'],\n                            translationOf: flattenToAppURL(content['@id']),\n                            language: lang,\n                          },\n                        }}\n                      >\n                        <Icon name={addSVG} size=\"24px\" />\n                      </Button>\n                    </Button.Group>\n                    {translations?.[lang] ? (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.unlink,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() => onDeleteTranslation(lang)}\n                        >\n                          <Icon\n                            name={\n                              lang === content.language.token\n                                ? linkSVG\n                                : unlinkSVG\n                            }\n                            size=\"24px\"\n                          />\n                        </Button>\n                      </Button.Group>\n                    ) : (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.link,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() =>\n                            openObjectBrowser({\n                              mode: 'link',\n                              overlay: true,\n                              onSelectItem: (url) => {\n                                onSelectTarget(url, isObjectBrowserOpen);\n                              },\n                            })\n                          }\n                        >\n                          <Icon name={linkSVG} size=\"24px\" />\n                        </Button>\n                      </Button.Group>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {isClient &&\n          createPortal(\n            <Toolbar\n              pathname={pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to={`${getBaseUrl(pathname)}`} className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </Segment.Group>\n    </Container>\n  );\n};\n\nexport default withObjectBrowser(ManageTranslations);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Translation linked","defaultMessage":"Translation linked"},{"id":"Translation linking removed","defaultMessage":"Translation linking removed"},{"id":"Link translation for","defaultMessage":"Link translation for"},{"id":"Unlink translation for","defaultMessage":"Unlink translation for"},{"id":"Manage Translations","defaultMessage":"Manage Translations"},{"id":"Manage translations for {title}","defaultMessage":"Manage translations for {title}"},{"id":"Back","defaultMessage":"Back"}]}},"sourceType":"module","externalDependencies":[]}