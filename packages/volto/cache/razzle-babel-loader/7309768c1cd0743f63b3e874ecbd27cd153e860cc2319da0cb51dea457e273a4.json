{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/CompareLanguages.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { useDetectClickOutside } from '@plone/volto/helpers/Utils/useDetectClickOutside';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  compare_to: {\n    \"id\": \"compare_to\",\n    \"defaultMessage\": \"Compare to language\"\n  },\n  stop_compare: {\n    \"id\": \"Stop compare\",\n    \"defaultMessage\": \"Stop compare\"\n  }\n});\nconst CompareLanguagesMenu = ({\n  theToolbar,\n  translations,\n  comparingLanguage,\n  setComparingLanguage,\n  closeMenu\n}) => {\n  const intl = useIntl();\n  const ClickOutsideListener = () => {\n    closeMenu();\n  };\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape']\n  });\n  return __jsx(\"div\", {\n    className: \"toolbar-content show compare-languages\",\n    ref: ref,\n    style: {\n      flex: theToolbar.current ? `0 0 ${theToolbar.current.getBoundingClientRect().width}px` : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"pastanaga-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.compare_to)), __jsx(\"div\", {\n    className: \"pastanaga-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, translations.map(t => __jsx(\"li\", {\n    key: t['@id'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, comparingLanguage === t.language ? __jsx(\"button\", {\n    \"aria-label\": `${intl.formatMessage(messages.stop_compare)} ${langmap[t.language].nativeName}`,\n    title: `${intl.formatMessage(messages.stop_compare)} ${langmap[t.language].nativeName}`,\n    onClick: () => {\n      setComparingLanguage(null);\n      closeMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }\n  }, langmap[t.language].nativeName, __jsx(Icon, {\n    name: clearSVG,\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  })) : __jsx(\"button\", {\n    \"aria-label\": `${intl.formatMessage(messages.compare_to)} ${langmap[t.language].nativeName.toLowerCase()}`,\n    title: `${intl.formatMessage(messages.compare_to)} ${langmap[t.language].nativeName.toLowerCase()}`,\n    onClick: () => {\n      setComparingLanguage(t.language);\n      closeMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, langmap[t.language].nativeName)))))));\n};\nconst CompareLanguages = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _content$Components, _content$Components$t;\n  const {\n    content,\n    comparingLanguage,\n    setComparingLanguage,\n    pathname,\n    toolbarRef\n  } = props;\n  const intl = useIntl();\n  const {\n    0: viewMenu,\n    1: setViewMenu\n  } = useState(false);\n  const translations = config.settings.isMultilingual ? (content === null || content === void 0 ? void 0 : (_content$Components = content['@components']) === null || _content$Components === void 0 ? void 0 : (_content$Components$t = _content$Components.translations) === null || _content$Components$t === void 0 ? void 0 : _content$Components$t.items) || [] : [];\n  const translationsObject = {};\n  translations.forEach(t => {\n    translationsObject[t.language] = t['@id'];\n  });\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return __jsx(\"div\", {\n      className: \"toolbar-compare-translations-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"toolbar-button-spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }), __jsx(Button, {\n      \"aria-label\": intl.formatMessage(messages.compare_to),\n      title: intl.formatMessage(messages.compare_to),\n      onClick: () => {\n        setViewMenu(!viewMenu);\n      },\n      id: \"toolbar-compare-translations\",\n      className: \"toolbar-button-compare-translations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      className: \"mobile hidden\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }), viewMenu ? __jsx(Icon, {\n      className: \"mobile only\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }) : __jsx(Icon, {\n      className: \"mobile only\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    })), viewMenu && __jsx(CompareLanguagesMenu, {\n      pathname: pathname,\n      theToolbar: toolbarRef,\n      key: `compareLanguagesComponent`,\n      closeMenu: () => setViewMenu(false),\n      translations: translations,\n      setComparingLanguage: value => {\n        setComparingLanguage(value, translationsObject[value]);\n      },\n      comparingLanguage: comparingLanguage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return null;\n  }\n});\nexport default CompareLanguages;","map":{"version":3,"names":["React","useState","defineMessages","useIntl","config","langmap","useDetectClickOutside","Icon","Button","translateSVG","clearSVG","messages","compare_to","stop_compare","CompareLanguagesMenu","theToolbar","translations","comparingLanguage","setComparingLanguage","closeMenu","intl","ClickOutsideListener","ref","onTriggered","triggerKeys","__jsx","className","style","flex","current","getBoundingClientRect","width","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMessage","map","t","key","language","nativeName","title","onClick","name","size","toLowerCase","CompareLanguages","forwardRef","props","_content$Components","_content$Components$t","content","pathname","toolbarRef","viewMenu","setViewMenu","settings","isMultilingual","items","translationsObject","forEach","length","id","value"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/CompareLanguages.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { useDetectClickOutside } from '@plone/volto/helpers/Utils/useDetectClickOutside';\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  compare_to: {\n    id: 'compare_to',\n    defaultMessage: 'Compare to language',\n  },\n  stop_compare: {\n    id: 'Stop compare',\n    defaultMessage: 'Stop compare',\n  },\n});\n\nconst CompareLanguagesMenu = ({\n  theToolbar,\n  translations,\n  comparingLanguage,\n  setComparingLanguage,\n  closeMenu,\n}) => {\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    closeMenu();\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n  });\n\n  return (\n    <div\n      className=\"toolbar-content show compare-languages\"\n      ref={ref}\n      style={{\n        flex: theToolbar.current\n          ? `0 0 ${theToolbar.current.getBoundingClientRect().width}px`\n          : null,\n      }}\n    >\n      <div className=\"pastanaga-menu\">\n        <header>{intl.formatMessage(messages.compare_to)}</header>\n        <div className=\"pastanaga-menu-list\">\n          <ul>\n            {translations.map((t) => (\n              <li key={t['@id']}>\n                {comparingLanguage === t.language ? (\n                  <button\n                    aria-label={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    title={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    onClick={() => {\n                      setComparingLanguage(null);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                    <Icon name={clearSVG} size=\"30px\" />\n                  </button>\n                ) : (\n                  <button\n                    aria-label={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    title={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    onClick={() => {\n                      setComparingLanguage(t.language);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CompareLanguages = React.forwardRef((props, ref) => {\n  const {\n    content,\n    comparingLanguage,\n    setComparingLanguage,\n    pathname,\n    toolbarRef,\n  } = props;\n\n  const intl = useIntl();\n  const [viewMenu, setViewMenu] = useState(false);\n  const translations = config.settings.isMultilingual\n    ? content?.['@components']?.translations?.items || []\n    : [];\n\n  const translationsObject = {};\n  translations.forEach((t) => {\n    translationsObject[t.language] = t['@id'];\n  });\n\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return (\n      <div className=\"toolbar-compare-translations-wrapper\">\n        <div className=\"toolbar-button-spacer\" />\n\n        <Button\n          aria-label={intl.formatMessage(messages.compare_to)}\n          title={intl.formatMessage(messages.compare_to)}\n          onClick={() => {\n            setViewMenu(!viewMenu);\n          }}\n          id=\"toolbar-compare-translations\"\n          className=\"toolbar-button-compare-translations\"\n        >\n          <Icon className=\"mobile hidden\" name={translateSVG} size=\"30px\" />\n          {viewMenu ? (\n            <Icon className=\"mobile only\" name={clearSVG} size=\"30px\" />\n          ) : (\n            <Icon className=\"mobile only\" name={translateSVG} size=\"30px\" />\n          )}\n        </Button>\n\n        {viewMenu && (\n          <CompareLanguagesMenu\n            pathname={pathname}\n            theToolbar={toolbarRef}\n            key={`compareLanguagesComponent`}\n            closeMenu={() => setViewMenu(false)}\n            translations={translations}\n            setComparingLanguage={(value) => {\n              setComparingLanguage(value, translationsObject[value]);\n            }}\n            comparingLanguage={comparingLanguage}\n          />\n        )}\n      </div>\n    );\n  } else {\n    return null;\n  }\n});\n\nexport default CompareLanguages;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"compare_to","defaultMessage":"Compare to language"},{"id":"Stop compare","defaultMessage":"Stop compare"}]}},"sourceType":"module","externalDependencies":[]}