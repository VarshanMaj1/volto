{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/ModalForm.jsx\";\nvar __jsx = React.createElement;\n/**\n * Modal form component.\n * @module components/manage/Form/ModalForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport { Button, Form as UiForm, Header, Menu, Message, Modal, Dimmer, Loader } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport FormValidation from '@plone/volto/helpers/FormValidation/FormValidation';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Field } from '@plone/volto/components/manage/Form';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  required: {\n    \"id\": \"Required input is missing.\",\n    \"defaultMessage\": \"Required input is missing.\"\n  },\n  minLength: {\n    \"id\": \"Minimum length is {len}.\",\n    \"defaultMessage\": \"Minimum length is {len}.\"\n  },\n  uniqueItems: {\n    \"id\": \"Items must be unique.\",\n    \"defaultMessage\": \"Items must be unique.\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  }\n});\n\n/**\n * Modal form container class.\n * @class ModalForm\n * @extends Component\n */\nclass ModalForm extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ModalForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0,\n      errors: {},\n      isFormPristine: true,\n      formData: props.formData\n    };\n    this.selectTab = this.selectTab.bind(this);\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: _objectSpread(_objectSpread({}, this.state.formData), {}, {\n        [id]: value\n      })\n    });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interaction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({\n      isFormPristine: false\n    });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: {\n          [id]: value\n        }\n      });\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    event.preventDefault();\n    const errors = FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage\n    });\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors\n      });\n    } else {\n      let setFormDataCallback = formData => {\n        this.setState({\n          formData: formData,\n          errors: {}\n        });\n      };\n      this.props.onSubmit(this.state.formData, setFormDataCallback);\n    }\n  }\n\n  /**\n   * Select tab handler\n   * @method selectTab\n   * @param {Object} event Event object.\n   * @param {number} index Selected tab index.\n   * @returns {undefined}\n   */\n  selectTab(event, {\n    index\n  }) {\n    this.setState({\n      currentTab: index\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      schema,\n      onCancel,\n      description\n    } = this.props;\n    const currentFieldset = schema.fieldsets[this.state.currentTab];\n    const fields = map(currentFieldset.fields, field => _objectSpread(_objectSpread({}, schema.properties[field]), {}, {\n      id: field,\n      value: this.state.formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: this.onChangeField,\n      onBlur: this.onBlurField,\n      onClick: this.onClickInput\n    }));\n    const state_errors = keys(this.state.errors).length > 0;\n    return __jsx(Modal, {\n      dimmer: this.props.dimmer,\n      open: this.props.open,\n      className: this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }\n    }, this.props.title), __jsx(Dimmer, {\n      active: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, this.props.loadingMessage || __jsx(FormattedMessage, {\n      id: \"Loading\",\n      defaultMessage: \"Loading.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }))), __jsx(Modal.Content, {\n      scrolling: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: state_errors || Boolean(this.props.submitError),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, description, __jsx(Message, {\n      error: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, state_errors ? __jsx(FormattedMessage, {\n      id: \"There were some errors.\",\n      defaultMessage: \"There were some errors.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }) : '', __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 15\n      }\n    }, this.props.submitError)), schema.fieldsets.length > 1 && __jsx(Menu, {\n      tabular: true,\n      stackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, map(schema.fieldsets, (item, index) => __jsx(Menu.Item, {\n      name: item.id,\n      index: index,\n      key: item.id,\n      active: this.state.currentTab === index,\n      onClick: this.selectTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 19\n      }\n    }, item.title))), fields.map(field => __jsx(Field, _extends({}, field, {\n      key: field.id,\n      onBlur: this.onBlurField,\n      onClick: this.onClickInput,\n      error: this.state.errors[field.id],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 15\n      }\n    }))))), __jsx(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      basic: true,\n      circular: true,\n      primary: true,\n      floated: \"right\",\n      \"aria-label\": this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      title: this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      onClick: this.onSubmit,\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    }, __jsx(Icon, {\n      name: aheadSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    })), onCancel && __jsx(Button, {\n      basic: true,\n      circular: true,\n      secondary: true,\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      onClick: onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, __jsx(Icon, {\n      name: clearSVG,\n      className: \"circled\",\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 15\n      }\n    }))));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(ModalForm, \"propTypes\", {\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.objectOf(PropTypes.any),\n  formData: PropTypes.objectOf(PropTypes.any),\n  submitError: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func,\n  open: PropTypes.bool,\n  submitLabel: PropTypes.string,\n  loading: PropTypes.bool,\n  loadingMessage: PropTypes.string,\n  className: PropTypes.string\n});\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(ModalForm, \"defaultProps\", {\n  submitLabel: null,\n  onCancel: null,\n  formData: {},\n  open: true,\n  loading: null,\n  loadingMessage: null,\n  submitError: null,\n  className: null,\n  dimmer: null\n});\nexport default _c = injectIntl(ModalForm);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","PropTypes","keys","map","Button","Form","UiForm","Header","Menu","Message","Modal","Dimmer","Loader","FormattedMessage","defineMessages","injectIntl","FormValidation","Icon","Field","aheadSVG","clearSVG","messages","required","minLength","uniqueItems","save","cancel","ModalForm","constructor","props","state","currentTab","errors","isFormPristine","formData","selectTab","bind","onChangeField","onBlurField","onClickInput","onSubmit","id","value","setState","_objectSpread","e","validateFieldsPerFieldset","schema","formatMessage","intl","touchedField","event","preventDefault","length","setFormDataCallback","index","render","onCancel","description","currentFieldset","fieldsets","fields","field","properties","indexOf","onChange","onBlur","onClick","state_errors","__jsx","dimmer","open","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","active","loading","loadingMessage","defaultMessage","Content","scrolling","method","error","Boolean","submitError","tabular","stackable","item","Item","name","key","_extends","Actions","basic","circular","primary","floated","submitLabel","size","secondary","_defineProperty","shape","arrayOf","string","objectOf","any","isRequired","func","bool","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/ModalForm.jsx"],"sourcesContent":["/**\n * Modal form component.\n * @module components/manage/Form/ModalForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport keys from 'lodash/keys';\nimport map from 'lodash/map';\nimport {\n  Button,\n  Form as UiForm,\n  Header,\n  Menu,\n  Message,\n  Modal,\n  Dimmer,\n  Loader,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport FormValidation from '@plone/volto/helpers/FormValidation/FormValidation';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Field } from '@plone/volto/components/manage/Form';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\n/**\n * Modal form container class.\n * @class ModalForm\n * @extends Component\n */\nclass ModalForm extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.objectOf(PropTypes.any),\n    formData: PropTypes.objectOf(PropTypes.any),\n    submitError: PropTypes.string,\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func,\n    open: PropTypes.bool,\n    submitLabel: PropTypes.string,\n    loading: PropTypes.bool,\n    loadingMessage: PropTypes.string,\n    className: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    submitLabel: null,\n    onCancel: null,\n    formData: {},\n    open: true,\n    loading: null,\n    loadingMessage: null,\n    submitError: null,\n    className: null,\n    dimmer: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ModalForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0,\n      errors: {},\n      isFormPristine: true,\n      formData: props.formData,\n    };\n    this.selectTab = this.selectTab.bind(this);\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interaction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: { [id]: value },\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    event.preventDefault();\n    const errors = FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage,\n    });\n\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors,\n      });\n    } else {\n      let setFormDataCallback = (formData) => {\n        this.setState({ formData: formData, errors: {} });\n      };\n      this.props.onSubmit(this.state.formData, setFormDataCallback);\n    }\n  }\n\n  /**\n   * Select tab handler\n   * @method selectTab\n   * @param {Object} event Event object.\n   * @param {number} index Selected tab index.\n   * @returns {undefined}\n   */\n  selectTab(event, { index }) {\n    this.setState({\n      currentTab: index,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { schema, onCancel, description } = this.props;\n    const currentFieldset = schema.fieldsets[this.state.currentTab];\n\n    const fields = map(currentFieldset.fields, (field) => ({\n      ...schema.properties[field],\n      id: field,\n      value: this.state.formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: this.onChangeField,\n      onBlur: this.onBlurField,\n      onClick: this.onClickInput,\n    }));\n\n    const state_errors = keys(this.state.errors).length > 0;\n    return (\n      <Modal\n        dimmer={this.props.dimmer}\n        open={this.props.open}\n        className={this.props.className}\n      >\n        <Header>{this.props.title}</Header>\n        <Dimmer active={this.props.loading}>\n          <Loader>\n            {this.props.loadingMessage || (\n              <FormattedMessage id=\"Loading\" defaultMessage=\"Loading.\" />\n            )}\n          </Loader>\n        </Dimmer>\n        <Modal.Content scrolling>\n          <UiForm\n            method=\"post\"\n            onSubmit={this.onSubmit}\n            error={state_errors || Boolean(this.props.submitError)}\n          >\n            {description}\n            <Message error>\n              {state_errors ? (\n                <FormattedMessage\n                  id=\"There were some errors.\"\n                  defaultMessage=\"There were some errors.\"\n                />\n              ) : (\n                ''\n              )}\n              <div>{this.props.submitError}</div>\n            </Message>\n            {schema.fieldsets.length > 1 && (\n              <Menu tabular stackable>\n                {map(schema.fieldsets, (item, index) => (\n                  <Menu.Item\n                    name={item.id}\n                    index={index}\n                    key={item.id}\n                    active={this.state.currentTab === index}\n                    onClick={this.selectTab}\n                  >\n                    {item.title}\n                  </Menu.Item>\n                ))}\n              </Menu>\n            )}\n            {fields.map((field) => (\n              <Field\n                {...field}\n                key={field.id}\n                onBlur={this.onBlurField}\n                onClick={this.onClickInput}\n                error={this.state.errors[field.id]}\n              />\n            ))}\n          </UiForm>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            basic\n            circular\n            primary\n            floated=\"right\"\n            aria-label={\n              this.props.submitLabel\n                ? this.props.submitLabel\n                : this.props.intl.formatMessage(messages.save)\n            }\n            title={\n              this.props.submitLabel\n                ? this.props.submitLabel\n                : this.props.intl.formatMessage(messages.save)\n            }\n            onClick={this.onSubmit}\n            loading={this.props.loading}\n          >\n            <Icon name={aheadSVG} className=\"contents circled\" size=\"30px\" />\n          </Button>\n          {onCancel && (\n            <Button\n              basic\n              circular\n              secondary\n              aria-label={this.props.intl.formatMessage(messages.cancel)}\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              onClick={onCancel}\n            >\n              <Icon name={clearSVG} className=\"circled\" size=\"30px\" />\n            </Button>\n          )}\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default injectIntl(ModalForm);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,GAAG,MAAM,YAAY;AAC5B,SACEC,MAAM,EACNC,IAAI,IAAIC,MAAM,EACdC,MAAM,EACNC,IAAI,EACJC,OAAO,EACPC,KAAK,EACLC,MAAM,EACNC,MAAM,QACD,mBAAmB;AAC1B,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACzE,OAAOC,cAAc,MAAM,oDAAoD;AAC/E,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,SAASC,KAAK,QAAQ,qCAAqC;AAC3D,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,QAAQ,MAAM,8BAA8B;AAEnD,MAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,SAAS;IAAA;IAAA;EAAA,CAGR;EACDC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,MAAM;IAAA;IAAA;EAAA;AAIR,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAAS3B,SAAS,CAAC;EAgDhC;AACF;AACA;AACA;AACA;AACA;EACE4B,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,UAAU,EAAE,CAAC;MACbC,MAAM,EAAE,CAAC,CAAC;MACVC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAEL,KAAK,CAACK;IAClB,CAAC;IACD,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACD,IAAI,CAAC,IAAI,CAAC;IAClD,IAAI,CAACE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACF,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACG,YAAY,GAAG,IAAI,CAACA,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACJ,IAAI,CAAC,IAAI,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,aAAaA,CAACI,EAAE,EAAEC,KAAK,EAAE;IACvB,IAAI,CAACC,QAAQ,CAAC;MACZT,QAAQ,EAAAU,aAAA,CAAAA,aAAA,KACH,IAAI,CAACd,KAAK,CAACI,QAAQ;QACtB,CAACO,EAAE,GAAGC;MAAK;IAEf,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEH,YAAYA,CAACM,CAAC,EAAE;IACd,IAAI,CAACF,QAAQ,CAAC;MAAEV,cAAc,EAAE;IAAM,CAAC,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,WAAWA,CAACG,EAAE,EAAEC,KAAK,EAAE;IACrB,IAAI,CAAC,IAAI,CAACZ,KAAK,CAACG,cAAc,EAAE;MAC9B,MAAMD,MAAM,GAAGhB,cAAc,CAAC8B,yBAAyB,CAAC;QACtDC,MAAM,EAAE,IAAI,CAAClB,KAAK,CAACkB,MAAM;QACzBb,QAAQ,EAAE,IAAI,CAACJ,KAAK,CAACI,QAAQ;QAC7Bc,aAAa,EAAE,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAACD,aAAa;QAC5CE,YAAY,EAAE;UAAE,CAACT,EAAE,GAAGC;QAAM;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAAC;QACZX;MACF,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEQ,QAAQA,CAACW,KAAK,EAAE;IACdA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMpB,MAAM,GAAGhB,cAAc,CAAC8B,yBAAyB,CAAC;MACtDC,MAAM,EAAE,IAAI,CAAClB,KAAK,CAACkB,MAAM;MACzBb,QAAQ,EAAE,IAAI,CAACJ,KAAK,CAACI,QAAQ;MAC7Bc,aAAa,EAAE,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAACD;IACjC,CAAC,CAAC;IAEF,IAAI9C,IAAI,CAAC8B,MAAM,CAAC,CAACqB,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACV,QAAQ,CAAC;QACZX;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIsB,mBAAmB,GAAIpB,QAAQ,IAAK;QACtC,IAAI,CAACS,QAAQ,CAAC;UAAET,QAAQ,EAAEA,QAAQ;UAAEF,MAAM,EAAE,CAAC;QAAE,CAAC,CAAC;MACnD,CAAC;MACD,IAAI,CAACH,KAAK,CAACW,QAAQ,CAAC,IAAI,CAACV,KAAK,CAACI,QAAQ,EAAEoB,mBAAmB,CAAC;IAC/D;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEnB,SAASA,CAACgB,KAAK,EAAE;IAAEI;EAAM,CAAC,EAAE;IAC1B,IAAI,CAACZ,QAAQ,CAAC;MACZZ,UAAU,EAAEwB;IACd,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAET,MAAM;MAAEU,QAAQ;MAAEC;IAAY,CAAC,GAAG,IAAI,CAAC7B,KAAK;IACpD,MAAM8B,eAAe,GAAGZ,MAAM,CAACa,SAAS,CAAC,IAAI,CAAC9B,KAAK,CAACC,UAAU,CAAC;IAE/D,MAAM8B,MAAM,GAAG1D,GAAG,CAACwD,eAAe,CAACE,MAAM,EAAGC,KAAK,IAAAlB,aAAA,CAAAA,aAAA,KAC5CG,MAAM,CAACgB,UAAU,CAACD,KAAK,CAAC;MAC3BrB,EAAE,EAAEqB,KAAK;MACTpB,KAAK,EAAE,IAAI,CAACZ,KAAK,CAACI,QAAQ,CAAC4B,KAAK,CAAC;MACjCxC,QAAQ,EAAEyB,MAAM,CAACzB,QAAQ,CAAC0C,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC;MAC/CG,QAAQ,EAAE,IAAI,CAAC5B,aAAa;MAC5B6B,MAAM,EAAE,IAAI,CAAC5B,WAAW;MACxB6B,OAAO,EAAE,IAAI,CAAC5B;IAAY,EAC1B,CAAC;IAEH,MAAM6B,YAAY,GAAGlE,IAAI,CAAC,IAAI,CAAC4B,KAAK,CAACE,MAAM,CAAC,CAACqB,MAAM,GAAG,CAAC;IACvD,OACEgB,KAAA,CAAC3D,KAAK;MACJ4D,MAAM,EAAE,IAAI,CAACzC,KAAK,CAACyC,MAAO;MAC1BC,IAAI,EAAE,IAAI,CAAC1C,KAAK,CAAC0C,IAAK;MACtBC,SAAS,EAAE,IAAI,CAAC3C,KAAK,CAAC2C,SAAU;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEhCT,KAAA,CAAC9D,MAAM;MAAAkE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE,IAAI,CAACjD,KAAK,CAACkD,KAAc,CAAC,EACnCV,KAAA,CAAC1D,MAAM;MAACqE,MAAM,EAAE,IAAI,CAACnD,KAAK,CAACoD,OAAQ;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACjCT,KAAA,CAACzD,MAAM;MAAA6D,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACJ,IAAI,CAACjD,KAAK,CAACqD,cAAc,IACxBb,KAAA,CAACxD,gBAAgB;MAAC4B,EAAE,EAAC,SAAS;MAAC0C,cAAc,EAAC,UAAU;MAAAV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAEtD,CACF,CAAC,EACTT,KAAA,CAAC3D,KAAK,CAAC0E,OAAO;MAACC,SAAS;MAAAZ,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACtBT,KAAA,CAAC/D,MAAM;MACLgF,MAAM,EAAC,MAAM;MACb9C,QAAQ,EAAE,IAAI,CAACA,QAAS;MACxB+C,KAAK,EAAEnB,YAAY,IAAIoB,OAAO,CAAC,IAAI,CAAC3D,KAAK,CAAC4D,WAAW,CAAE;MAAAhB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEtDpB,WAAW,EACZW,KAAA,CAAC5D,OAAO;MAAC8E,KAAK;MAAAd,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACXV,YAAY,GACXC,KAAA,CAACxD,gBAAgB;MACf4B,EAAE,EAAC,yBAAyB;MAC5B0C,cAAc,EAAC,yBAAyB;MAAAV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACzC,CAAC,GAEF,EACD,EACDT,KAAA;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAM,IAAI,CAACjD,KAAK,CAAC4D,WAAiB,CAC3B,CAAC,EACT1C,MAAM,CAACa,SAAS,CAACP,MAAM,GAAG,CAAC,IAC1BgB,KAAA,CAAC7D,IAAI;MAACkF,OAAO;MAACC,SAAS;MAAAlB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACpB3E,GAAG,CAAC4C,MAAM,CAACa,SAAS,EAAE,CAACgC,IAAI,EAAErC,KAAK,KACjCc,KAAA,CAAC7D,IAAI,CAACqF,IAAI;MACRC,IAAI,EAAEF,IAAI,CAACnD,EAAG;MACdc,KAAK,EAAEA,KAAM;MACbwC,GAAG,EAAEH,IAAI,CAACnD,EAAG;MACbuC,MAAM,EAAE,IAAI,CAAClD,KAAK,CAACC,UAAU,KAAKwB,KAAM;MACxCY,OAAO,EAAE,IAAI,CAAChC,SAAU;MAAAsC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEvBc,IAAI,CAACb,KACG,CACZ,CACG,CACP,EACAlB,MAAM,CAAC1D,GAAG,CAAE2D,KAAK,IAChBO,KAAA,CAACnD,KAAK,EAAA8E,QAAA,KACAlC,KAAK;MACTiC,GAAG,EAAEjC,KAAK,CAACrB,EAAG;MACdyB,MAAM,EAAE,IAAI,CAAC5B,WAAY;MACzB6B,OAAO,EAAE,IAAI,CAAC5B,YAAa;MAC3BgD,KAAK,EAAE,IAAI,CAACzD,KAAK,CAACE,MAAM,CAAC8B,KAAK,CAACrB,EAAE,CAAE;MAAAgC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EACpC,CACF,CACK,CACK,CAAC,EAChBT,KAAA,CAAC3D,KAAK,CAACuF,OAAO;MAAAxB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACZT,KAAA,CAACjE,MAAM;MACL8F,KAAK;MACLC,QAAQ;MACRC,OAAO;MACPC,OAAO,EAAC,OAAO;MACf,cACE,IAAI,CAACxE,KAAK,CAACyE,WAAW,GAClB,IAAI,CAACzE,KAAK,CAACyE,WAAW,GACtB,IAAI,CAACzE,KAAK,CAACoB,IAAI,CAACD,aAAa,CAAC3B,QAAQ,CAACI,IAAI,CAChD;MACDsD,KAAK,EACH,IAAI,CAAClD,KAAK,CAACyE,WAAW,GAClB,IAAI,CAACzE,KAAK,CAACyE,WAAW,GACtB,IAAI,CAACzE,KAAK,CAACoB,IAAI,CAACD,aAAa,CAAC3B,QAAQ,CAACI,IAAI,CAChD;MACD0C,OAAO,EAAE,IAAI,CAAC3B,QAAS;MACvByC,OAAO,EAAE,IAAI,CAACpD,KAAK,CAACoD,OAAQ;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAE5BT,KAAA,CAACpD,IAAI;MAAC6E,IAAI,EAAE3E,QAAS;MAACqD,SAAS,EAAC,kBAAkB;MAAC+B,IAAI,EAAC,MAAM;MAAA9B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAC1D,CAAC,EACRrB,QAAQ,IACPY,KAAA,CAACjE,MAAM;MACL8F,KAAK;MACLC,QAAQ;MACRK,SAAS;MACT,cAAY,IAAI,CAAC3E,KAAK,CAACoB,IAAI,CAACD,aAAa,CAAC3B,QAAQ,CAACK,MAAM,CAAE;MAC3DqD,KAAK,EAAE,IAAI,CAAClD,KAAK,CAACoB,IAAI,CAACD,aAAa,CAAC3B,QAAQ,CAACK,MAAM,CAAE;MACtD2E,OAAO,EAAC,OAAO;MACflC,OAAO,EAAEV,QAAS;MAAAgB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAElBT,KAAA,CAACpD,IAAI;MAAC6E,IAAI,EAAE1E,QAAS;MAACoD,SAAS,EAAC,SAAS;MAAC+B,IAAI,EAAC,MAAM;MAAA9B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACjD,CAEG,CACV,CAAC;EAEZ;AACF;AA9QE;AACF;AACA;AACA;AACA;AAJE2B,eAAA,CADI9E,SAAS,eAMM;EACjBoB,MAAM,EAAE9C,SAAS,CAACyG,KAAK,CAAC;IACtB9C,SAAS,EAAE3D,SAAS,CAAC0G,OAAO,CAC1B1G,SAAS,CAACyG,KAAK,CAAC;MACd7C,MAAM,EAAE5D,SAAS,CAAC0G,OAAO,CAAC1G,SAAS,CAAC2G,MAAM,CAAC;MAC3CnE,EAAE,EAAExC,SAAS,CAAC2G,MAAM;MACpB7B,KAAK,EAAE9E,SAAS,CAAC2G;IACnB,CAAC,CACH,CAAC;IACD7C,UAAU,EAAE9D,SAAS,CAAC4G,QAAQ,CAAC5G,SAAS,CAAC6G,GAAG,CAAC;IAC7CxF,QAAQ,EAAErB,SAAS,CAAC0G,OAAO,CAAC1G,SAAS,CAAC2G,MAAM;EAC9C,CAAC,CAAC,CAACG,UAAU;EACbhC,KAAK,EAAE9E,SAAS,CAAC2G,MAAM,CAACG,UAAU;EAClCrD,WAAW,EAAEzD,SAAS,CAAC4G,QAAQ,CAAC5G,SAAS,CAAC6G,GAAG,CAAC;EAC9C5E,QAAQ,EAAEjC,SAAS,CAAC4G,QAAQ,CAAC5G,SAAS,CAAC6G,GAAG,CAAC;EAC3CrB,WAAW,EAAExF,SAAS,CAAC2G,MAAM;EAC7BpE,QAAQ,EAAEvC,SAAS,CAAC+G,IAAI,CAACD,UAAU;EACnCtD,QAAQ,EAAExD,SAAS,CAAC+G,IAAI;EACxBzC,IAAI,EAAEtE,SAAS,CAACgH,IAAI;EACpBX,WAAW,EAAErG,SAAS,CAAC2G,MAAM;EAC7B3B,OAAO,EAAEhF,SAAS,CAACgH,IAAI;EACvB/B,cAAc,EAAEjF,SAAS,CAAC2G,MAAM;EAChCpC,SAAS,EAAEvE,SAAS,CAAC2G;AACvB,CAAC;AAED;AACF;AACA;AACA;AACA;AAJEH,eAAA,CA/BI9E,SAAS,kBAoCS;EACpB2E,WAAW,EAAE,IAAI;EACjB7C,QAAQ,EAAE,IAAI;EACdvB,QAAQ,EAAE,CAAC,CAAC;EACZqC,IAAI,EAAE,IAAI;EACVU,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE,IAAI;EACpBO,WAAW,EAAE,IAAI;EACjBjB,SAAS,EAAE,IAAI;EACfF,MAAM,EAAE;AACV,CAAC;AAmOH,eAAA4C,EAAA,GAAenG,UAAU,CAACY,SAAS,CAAC;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Required input is missing.","defaultMessage":"Required input is missing."},{"id":"Minimum length is {len}.","defaultMessage":"Minimum length is {len}."},{"id":"Items must be unique.","defaultMessage":"Items must be unique."},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Loading","defaultMessage":"Loading."},{"id":"There were some errors.","defaultMessage":"There were some errors."}]}},"sourceType":"module","externalDependencies":[]}