{"ast":null,"code":"/**\n * Robots helper.\n * @module helpers/Robots\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { formatUrl } from '@plone/volto/helpers/Api/Api';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = req => new Promise(resolve => {\n  const request = superagent.get(formatUrl('@site'));\n  request.set('Accept', 'application/json');\n  const authToken = req.universalCookies.get('auth_token');\n  if (authToken) {\n    request.set('Authorization', `Bearer ${authToken}`);\n  }\n  request.use(addHeadersFactory(req));\n  request.end((error, {\n    text,\n    body\n  }) => {\n    if (error) {\n      resolve(text || error);\n    } else {\n      resolve(body['plone.robots_txt'].replace('{portal_url}', config.settings.publicURL).replace('sitemap.xml.gz', 'sitemap-index.xml'));\n    }\n  });\n});","map":{"version":3,"names":["superagent","config","formatUrl","addHeadersFactory","generateRobots","req","Promise","resolve","request","get","set","authToken","universalCookies","use","end","error","text","body","replace","settings","publicURL"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Robots/Robots.js"],"sourcesContent":["/**\n * Robots helper.\n * @module helpers/Robots\n */\n\nimport superagent from 'superagent';\n\nimport config from '@plone/volto/registry';\nimport { formatUrl } from '@plone/volto/helpers/Api/Api';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = (req) =>\n  new Promise((resolve) => {\n    const request = superagent.get(formatUrl('@site'));\n    request.set('Accept', 'application/json');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.end((error, { text, body }) => {\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(\n          body['plone.robots_txt']\n            .replace('{portal_url}', config.settings.publicURL)\n            .replace('sitemap.xml.gz', 'sitemap-index.xml'),\n        );\n      }\n    });\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AAEnC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,iBAAiB,QAAQ,kCAAkC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,GAAG,IAChC,IAAIC,OAAO,CAAEC,OAAO,IAAK;EACvB,MAAMC,OAAO,GAAGR,UAAU,CAACS,GAAG,CAACP,SAAS,CAAC,OAAO,CAAC,CAAC;EAClDM,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;EACzC,MAAMC,SAAS,GAAGN,GAAG,CAACO,gBAAgB,CAACH,GAAG,CAAC,YAAY,CAAC;EACxD,IAAIE,SAAS,EAAE;IACbH,OAAO,CAACE,GAAG,CAAC,eAAe,EAAE,UAAUC,SAAS,EAAE,CAAC;EACrD;EACAH,OAAO,CAACK,GAAG,CAACV,iBAAiB,CAACE,GAAG,CAAC,CAAC;EACnCG,OAAO,CAACM,GAAG,CAAC,CAACC,KAAK,EAAE;IAAEC,IAAI;IAAEC;EAAK,CAAC,KAAK;IACrC,IAAIF,KAAK,EAAE;MACTR,OAAO,CAACS,IAAI,IAAID,KAAK,CAAC;IACxB,CAAC,MAAM;MACLR,OAAO,CACLU,IAAI,CAAC,kBAAkB,CAAC,CACrBC,OAAO,CAAC,cAAc,EAAEjB,MAAM,CAACkB,QAAQ,CAACC,SAAS,CAAC,CAClDF,OAAO,CAAC,gBAAgB,EAAE,mBAAmB,CAClD,CAAC;IACH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}