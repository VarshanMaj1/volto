{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport config from '@plone/volto/registry';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport BlockChooserButton from '@plone/volto/components/manage/BlockChooser/BlockChooserButton';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { createImageBlock, deconstructToVoltoBlocks } from '@plone/volto-slate/utils/volto-blocks';\nimport { parseDefaultSelection } from '@plone/volto-slate/utils/selection';\nimport { Transforms } from 'slate';\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nconst DEBUG = false;\nexport const DefaultTextBlockEditor = props => {\n  _s();\n  var _data$instructions, _data$plaintext;\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription,\n    navRoot,\n    contentType\n  } = props;\n  const {\n    slate\n  } = config.settings;\n  const {\n    textblockExtensions\n  } = slate;\n  const {\n    value\n  } = data;\n  const intl = useIntl();\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n  const prevReq = React.useRef(null);\n  const withBlockProperties = React.useCallback(editor => {\n    editor.getBlockProps = () => props;\n    return editor;\n  }, [props]);\n  const slateSettings = React.useMemo(() => _objectSpread(_objectSpread({}, config.settings.slate), {}, {\n    persistentHelpers: [...config.settings.slate.persistentHelpers, PersistentSlashMenu]\n  }), []);\n  const onDrop = React.useCallback(files => {\n    // TODO: need to fix setUploading, treat uploading indicator\n    // inteligently, show progress report on uploading files\n    setUploading(true);\n    files.forEach(file => {\n      const [mime] = file.type.split('/');\n      if (mime !== 'image') return;\n      if (!validateFileUploadSize(file, intl.formatMessage)) return;\n      readAsDataURL(file).then(data => {\n        const fields = data.match(/^data:(.*);(.*),(.*)$/);\n        uploadContent(getBaseUrl(pathname), {\n          '@type': 'Image',\n          title: file.name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name\n          }\n        }, block);\n      });\n    });\n    setShowDropzone(false);\n  }, [pathname, uploadContent, block, intl.formatMessage]);\n  const {\n    loaded,\n    loading\n  } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n      createImageBlock(url, index, props, intl);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index, intl]);\n  const handleUpdate = React.useCallback(editor => {\n    // defaultSelection is used for things such as \"restoring\" the selection\n    // when joining blocks or moving the selection to block start on block\n    // split\n    if (defaultSelection) {\n      const selection = parseDefaultSelection(editor, defaultSelection);\n      if (selection) {\n        Transforms.select(editor, selection);\n        saveSlateBlockSelection(block, null);\n      }\n    }\n  }, [defaultSelection, block, saveSlateBlockSelection]);\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n  const disableNewBlocks = (data === null || data === void 0 ? void 0 : data.disableNewBlocks) || detached;\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Dropzone, {\n    disableClick: true,\n    onDrop: onDrop,\n    className: \"dropzone\",\n    onDragOver: () => setShowDropzone(true),\n    onDragLeave: () => setShowDropzone(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => {\n    return showDropzone ? __jsx(\"div\", {\n      className: \"drop-indicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, uploading ? __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, \"Uploading image\")) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: imageBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 23\n      }\n    })))) : __jsx(React.Fragment, null, __jsx(SlateEditor, {\n      index: index,\n      readOnly: !inView,\n      properties: properties,\n      extensions: textblockExtensions,\n      renderExtensions: [withBlockProperties],\n      value: value,\n      block: block /* is this needed? */,\n      defaultSelection: defaultSelection,\n      onUpdate: handleUpdate,\n      debug: DEBUG,\n      onFocus: handleFocus,\n      onChange: (value, editor) => onEditorChange(value, editor),\n      onKeyDown: handleKey,\n      selected: selected,\n      placeholder: placeholder,\n      slateSettings: slateSettings,\n      editableProps: {\n        'aria-multiline': 'false'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    }), DEBUG ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 26\n      }\n    }, block) : '');\n  }), !config.experimental.addBlockButton.enabled && selected && !((_data$plaintext = data.plaintext) !== null && _data$plaintext !== void 0 && _data$plaintext.trim()) && !disableNewBlocks && __jsx(BlockChooserButton, {\n    data: data,\n    block: block,\n    onInsertBlock: (id, value) => {\n      onSelectBlock(onInsertBlock(id, value));\n    },\n    onMutateBlock: onMutateBlock,\n    allowedBlocks: allowedBlocks,\n    blocksConfig: blocksConfig,\n    size: \"24px\",\n    properties: properties,\n    navRoot: navRoot,\n    contentType: contentType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"slate-plugin-sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }), instructions ? __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(ShortcutListing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }), __jsx(MarkdownIntroduction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }), __jsx(BlockDataForm, {\n    block: block,\n    schema: schema,\n    title: schema.title,\n    onChangeBlock: onChangeBlock,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  })))));\n};\n_s(DefaultTextBlockEditor, \"HR+g/tUvRh9PQ+UgJTt2oWr6ifg=\", false, function () {\n  return [useIntl, useInView];\n});\n_c = DefaultTextBlockEditor;\nexport default DefaultTextBlockEditor;\nvar _c;\n$RefreshReg$(_c, \"DefaultTextBlockEditor\");","map":{"version":3,"names":["ReactDOM","React","readAsDataURL","Dropzone","defineMessages","useIntl","useInView","Dimmer","Loader","Message","Segment","flattenToAppURL","getBaseUrl","validateFileUploadSize","config","SidebarPortal","BlockChooserButton","BlockDataForm","SlateEditor","serializeNodesToText","createImageBlock","deconstructToVoltoBlocks","parseDefaultSelection","Transforms","PersistentSlashMenu","ShortcutListing","MarkdownIntroduction","handleKey","TextBlockSchema","imageBlockSVG","messages","text","DEBUG","DefaultTextBlockEditor","props","_s","_data$instructions","_data$plaintext","block","blocksConfig","data","detached","index","onChangeBlock","onInsertBlock","onMutateBlock","onSelectBlock","pathname","properties","selected","uploadRequest","uploadContent","uploadedContent","defaultSelection","saveSlateBlockSelection","allowedBlocks","formTitle","formDescription","navRoot","contentType","slate","settings","textblockExtensions","value","intl","showDropzone","setShowDropzone","useState","uploading","setUploading","newImageId","setNewImageId","prevReq","useRef","withBlockProperties","useCallback","editor","getBlockProps","slateSettings","useMemo","_objectSpread","persistentHelpers","onDrop","files","forEach","file","mime","type","split","formatMessage","then","fields","match","title","name","image","encoding","filename","loaded","loading","imageId","prevLoaded","current","useEffect","url","handleUpdate","selection","select","onEditorChange","unstable_batchedUpdates","plaintext","instructions","placeholder","schema","disableNewBlocks","ref","inView","threshold","rootMargin","handleFocus","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","disableClick","onDragOver","onDragLeave","getRootProps","getInputProps","active","indeterminate","src","alt","readOnly","extensions","renderExtensions","onUpdate","debug","onFocus","onChange","onKeyDown","editableProps","experimental","addBlockButton","enabled","trim","id","size","attached","dangerouslySetInnerHTML","__html","onChangeField","formData","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\n\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport config from '@plone/volto/registry';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport BlockChooserButton from '@plone/volto/components/manage/BlockChooser/BlockChooserButton';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\n\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport {\n  createImageBlock,\n  deconstructToVoltoBlocks,\n} from '@plone/volto-slate/utils/volto-blocks';\nimport { parseDefaultSelection } from '@plone/volto-slate/utils/selection';\nimport { Transforms } from 'slate';\n\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nconst DEBUG = false;\n\nexport const DefaultTextBlockEditor = (props) => {\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription,\n    navRoot,\n    contentType,\n  } = props;\n\n  const { slate } = config.settings;\n  const { textblockExtensions } = slate;\n  const { value } = data;\n  const intl = useIntl();\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n\n  const prevReq = React.useRef(null);\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  const slateSettings = React.useMemo(\n    () => ({\n      ...config.settings.slate,\n      persistentHelpers: [\n        ...config.settings.slate.persistentHelpers,\n        PersistentSlashMenu,\n      ],\n    }),\n    [],\n  );\n\n  const onDrop = React.useCallback(\n    (files) => {\n      // TODO: need to fix setUploading, treat uploading indicator\n      // inteligently, show progress report on uploading files\n      setUploading(true);\n      files.forEach((file) => {\n        const [mime] = file.type.split('/');\n        if (mime !== 'image') return;\n        if (!validateFileUploadSize(file, intl.formatMessage)) return;\n\n        readAsDataURL(file).then((data) => {\n          const fields = data.match(/^data:(.*);(.*),(.*)$/);\n          uploadContent(\n            getBaseUrl(pathname),\n            {\n              '@type': 'Image',\n              title: file.name,\n              image: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            },\n            block,\n          );\n        });\n      });\n      setShowDropzone(false);\n    },\n    [pathname, uploadContent, block, intl.formatMessage],\n  );\n\n  const { loaded, loading } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n\n      createImageBlock(url, index, props, intl);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index, intl]);\n\n  const handleUpdate = React.useCallback(\n    (editor) => {\n      // defaultSelection is used for things such as \"restoring\" the selection\n      // when joining blocks or moving the selection to block start on block\n      // split\n      if (defaultSelection) {\n        const selection = parseDefaultSelection(editor, defaultSelection);\n        if (selection) {\n          Transforms.select(editor, selection);\n          saveSlateBlockSelection(block, null);\n        }\n      }\n    },\n    [defaultSelection, block, saveSlateBlockSelection],\n  );\n\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, {\n        ...data,\n        value,\n        plaintext: serializeNodesToText(value || []),\n        // TODO: also add html serialized value\n      });\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n\n  const disableNewBlocks = data?.disableNewBlocks || detached;\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n\n  return (\n    <div className=\"text-slate-editor-inner\" ref={ref}>\n      <>\n        <Dropzone\n          disableClick\n          onDrop={onDrop}\n          className=\"dropzone\"\n          onDragOver={() => setShowDropzone(true)}\n          onDragLeave={() => setShowDropzone(false)}\n        >\n          {({ getRootProps, getInputProps }) => {\n            return showDropzone ? (\n              <div className=\"drop-indicator\">\n                {uploading ? (\n                  <Dimmer active>\n                    <Loader indeterminate>Uploading image</Loader>\n                  </Dimmer>\n                ) : (\n                  <Message>\n                    <center>\n                      <img src={imageBlockSVG} alt=\"\" />\n                    </center>\n                  </Message>\n                )}\n              </div>\n            ) : (\n              <>\n                <SlateEditor\n                  index={index}\n                  readOnly={!inView}\n                  properties={properties}\n                  extensions={textblockExtensions}\n                  renderExtensions={[withBlockProperties]}\n                  value={value}\n                  block={block /* is this needed? */}\n                  defaultSelection={defaultSelection}\n                  onUpdate={handleUpdate}\n                  debug={DEBUG}\n                  onFocus={handleFocus}\n                  onChange={(value, editor) => onEditorChange(value, editor)}\n                  onKeyDown={handleKey}\n                  selected={selected}\n                  placeholder={placeholder}\n                  slateSettings={slateSettings}\n                  editableProps={{ 'aria-multiline': 'false' }}\n                />\n                {DEBUG ? <div>{block}</div> : ''}\n              </>\n            );\n          }}\n        </Dropzone>\n\n        {!config.experimental.addBlockButton.enabled &&\n          selected &&\n          !data.plaintext?.trim() &&\n          !disableNewBlocks && (\n            <BlockChooserButton\n              data={data}\n              block={block}\n              onInsertBlock={(id, value) => {\n                onSelectBlock(onInsertBlock(id, value));\n              }}\n              onMutateBlock={onMutateBlock}\n              allowedBlocks={allowedBlocks}\n              blocksConfig={blocksConfig}\n              size=\"24px\"\n              properties={properties}\n              navRoot={navRoot}\n              contentType={contentType}\n            />\n          )}\n\n        <SidebarPortal selected={selected}>\n          <div id=\"slate-plugin-sidebar\"></div>\n          {instructions ? (\n            <Segment attached>\n              <div dangerouslySetInnerHTML={{ __html: instructions }} />\n            </Segment>\n          ) : (\n            <>\n              <ShortcutListing />\n              <MarkdownIntroduction />\n              <BlockDataForm\n                block={block}\n                schema={schema}\n                title={schema.title}\n                onChangeBlock={onChangeBlock}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n              />\n            </>\n          )}\n        </SidebarPortal>\n      </>\n    </div>\n  );\n};\n\nexport default DefaultTextBlockEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}