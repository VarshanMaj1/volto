{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"icon\", \"active\"];\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/StyleMenu/StyleMenu.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport omit from 'lodash/omit';\nimport { isBlockStyleActive, isInlineStyleActive, toggleStyle } from './utils';\nimport config from '@plone/volto/registry';\nimport ToolbarButton from '@plone/volto-slate/editor/ui/ToolbarButton';\nimport paintSVG from '@plone/volto/icons/paint.svg';\nconst messages = defineMessages({\n  inlineStyle: {\n    \"id\": \"Inline Style\",\n    \"defaultMessage\": \"Inline Style\"\n  },\n  paragraphStyle: {\n    \"id\": \"Paragraph Style\",\n    \"defaultMessage\": \"Paragraph Style\"\n  },\n  additionalStyles: {\n    \"id\": \"Additional Styles\",\n    \"defaultMessage\": \"Additional Styles\"\n  }\n});\nconst StyleMenuButton = _ref => {\n  let {\n      icon,\n      active\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return __jsx(ToolbarButton, _extends({}, props, {\n    icon: icon,\n    active: active,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }));\n};\n_c = StyleMenuButton;\nconst MenuOpts = ({\n  editor,\n  toSelect,\n  option,\n  type\n}) => {\n  const isActive = toSelect.includes(option);\n  return __jsx(Dropdown.Item, _extends({\n    as: \"span\",\n    active: isActive,\n    className: cx(`${type}-${option.value}`, {\n      active: isActive\n    })\n  }, omit(option, ['isBlock']), {\n    \"data-isblock\": option.isBlock,\n    onClick: (event, selItem) => {\n      toggleStyle(editor, {\n        cssClass: selItem.value,\n        isBlock: selItem.isBlock\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }));\n};\n_c2 = MenuOpts;\nconst StylingsButton = props => {\n  _s();\n  var _config$settings$slat;\n  const editor = useSlate();\n  const intl = useIntl();\n\n  // Converting the settings to a format that is required by dropdowns.\n  const inlineOpts = [...config.settings.slate.styleMenu.inlineStyles.map(def => {\n    return {\n      value: def.cssClass,\n      text: def.label,\n      icon: def.icon,\n      isBlock: false\n    };\n  })];\n  const blockOpts = [...config.settings.slate.styleMenu.blockStyles.map(def => {\n    return {\n      value: def.cssClass,\n      text: def.label,\n      icon: def.icon,\n      isBlock: true\n    };\n  })];\n\n  // Calculating the initial selection.\n  const toSelect = [];\n  // block styles\n  for (const val of blockOpts) {\n    const ia = isBlockStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n  // inline styles\n  for (const val of inlineOpts) {\n    const ia = isInlineStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n  const menuItemProps = {\n    toSelect,\n    editor\n  };\n  const showMenu = inlineOpts.length || blockOpts.length;\n  return showMenu ? __jsx(Dropdown, {\n    id: \"style-menu\",\n    pointing: \"top left\",\n    multiple: true,\n    value: toSelect,\n    disabled: (_config$settings$slat = config.settings.slate.styleMenu.disabled) !== null && _config$settings$slat !== void 0 ? _config$settings$slat : false,\n    additionLabel: intl.formatMessage(messages.additionalStyles),\n    trigger: __jsx(StyleMenuButton, {\n      title: intl.formatMessage(messages.additionalStyles),\n      icon: paintSVG,\n      active: toSelect.length > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, inlineOpts.length && __jsx(React.Fragment, null, __jsx(Dropdown.Header, {\n    content: intl.formatMessage(messages.inlineStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), inlineOpts.map((option, index) => __jsx(MenuOpts, _extends({}, menuItemProps, {\n    type: \"inline-style\",\n    option: option,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })))), blockOpts.length && __jsx(React.Fragment, null, __jsx(Dropdown.Header, {\n    content: intl.formatMessage(messages.paragraphStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), blockOpts.map((option, index) => __jsx(MenuOpts, _extends({}, menuItemProps, {\n    type: \"block-style\",\n    option: option,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  })))))) : '';\n};\n_s(StylingsButton, \"w0F3wW8W/mVBIh/dlncHu6vL3c0=\", false, function () {\n  return [useSlate, useIntl];\n});\n_c3 = StylingsButton;\nexport default StylingsButton;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyleMenuButton\");\n$RefreshReg$(_c2, \"MenuOpts\");\n$RefreshReg$(_c3, \"StylingsButton\");","map":{"version":3,"names":["React","useSlate","Dropdown","useIntl","defineMessages","cx","omit","isBlockStyleActive","isInlineStyleActive","toggleStyle","config","ToolbarButton","paintSVG","messages","inlineStyle","paragraphStyle","additionalStyles","StyleMenuButton","_ref","icon","active","props","_objectWithoutProperties","_excluded","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","MenuOpts","editor","toSelect","option","type","isActive","includes","Item","as","className","value","isBlock","onClick","event","selItem","cssClass","_c2","StylingsButton","_s","_config$settings$slat","intl","inlineOpts","settings","slate","styleMenu","inlineStyles","map","def","text","label","blockOpts","blockStyles","val","ia","push","menuItemProps","showMenu","length","id","pointing","multiple","disabled","additionLabel","formatMessage","trigger","title","Menu","Fragment","Header","content","index","key","_c3","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/StyleMenu/StyleMenu.jsx"],"sourcesContent":["import React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport omit from 'lodash/omit';\nimport { isBlockStyleActive, isInlineStyleActive, toggleStyle } from './utils';\nimport config from '@plone/volto/registry';\nimport ToolbarButton from '@plone/volto-slate/editor/ui/ToolbarButton';\nimport paintSVG from '@plone/volto/icons/paint.svg';\n\nconst messages = defineMessages({\n  inlineStyle: {\n    id: 'Inline Style',\n    defaultMessage: 'Inline Style',\n  },\n  paragraphStyle: {\n    id: 'Paragraph Style',\n    defaultMessage: 'Paragraph Style',\n  },\n  additionalStyles: {\n    id: 'Additional Styles',\n    defaultMessage: 'Additional Styles',\n  },\n});\n\nconst StyleMenuButton = ({ icon, active, ...props }) => (\n  <ToolbarButton {...props} icon={icon} active={active} />\n);\n\nconst MenuOpts = ({ editor, toSelect, option, type }) => {\n  const isActive = toSelect.includes(option);\n  return (\n    <Dropdown.Item\n      as=\"span\"\n      active={isActive}\n      className={cx(`${type}-${option.value}`, { active: isActive })}\n      {...omit(option, ['isBlock'])}\n      data-isblock={option.isBlock}\n      onClick={(event, selItem) => {\n        toggleStyle(editor, {\n          cssClass: selItem.value,\n          isBlock: selItem.isBlock,\n        });\n      }}\n    />\n  );\n};\n\nconst StylingsButton = (props) => {\n  const editor = useSlate();\n  const intl = useIntl();\n\n  // Converting the settings to a format that is required by dropdowns.\n  const inlineOpts = [\n    ...config.settings.slate.styleMenu.inlineStyles.map((def) => {\n      return {\n        value: def.cssClass,\n        text: def.label,\n        icon: def.icon,\n        isBlock: false,\n      };\n    }),\n  ];\n  const blockOpts = [\n    ...config.settings.slate.styleMenu.blockStyles.map((def) => {\n      return {\n        value: def.cssClass,\n        text: def.label,\n        icon: def.icon,\n        isBlock: true,\n      };\n    }),\n  ];\n\n  // Calculating the initial selection.\n  const toSelect = [];\n  // block styles\n  for (const val of blockOpts) {\n    const ia = isBlockStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n  // inline styles\n  for (const val of inlineOpts) {\n    const ia = isInlineStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n\n  const menuItemProps = {\n    toSelect,\n    editor,\n  };\n  const showMenu = inlineOpts.length || blockOpts.length;\n  return showMenu ? (\n    <Dropdown\n      id=\"style-menu\"\n      pointing=\"top left\"\n      multiple\n      value={toSelect}\n      disabled={config.settings.slate.styleMenu.disabled ?? false}\n      additionLabel={intl.formatMessage(messages.additionalStyles)}\n      trigger={\n        <StyleMenuButton\n          title={intl.formatMessage(messages.additionalStyles)}\n          icon={paintSVG}\n          active={toSelect.length > 0}\n        />\n      }\n    >\n      <Dropdown.Menu>\n        {inlineOpts.length && (\n          <>\n            <Dropdown.Header\n              content={intl.formatMessage(messages.inlineStyle)}\n            />\n            {inlineOpts.map((option, index) => (\n              <MenuOpts\n                {...menuItemProps}\n                type=\"inline-style\"\n                option={option}\n                key={index}\n              />\n            ))}\n          </>\n        )}\n\n        {blockOpts.length && (\n          <>\n            <Dropdown.Header\n              content={intl.formatMessage(messages.paragraphStyle)}\n            />\n            {blockOpts.map((option, index) => (\n              <MenuOpts\n                {...menuItemProps}\n                type=\"block-style\"\n                option={option}\n                key={index}\n              />\n            ))}\n          </>\n        )}\n      </Dropdown.Menu>\n    </Dropdown>\n  ) : (\n    ''\n  );\n};\n\nexport default StylingsButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Inline Style","defaultMessage":"Inline Style"},{"id":"Paragraph Style","defaultMessage":"Paragraph Style"},{"id":"Additional Styles","defaultMessage":"Additional Styles"}]}},"sourceType":"module","externalDependencies":[]}