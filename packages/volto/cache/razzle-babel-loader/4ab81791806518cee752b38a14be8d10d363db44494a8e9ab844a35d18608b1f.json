{"ast":null,"code":"/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport compact from 'lodash/compact';\nimport concat from 'lodash/concat';\nimport isArray from 'lodash/isArray';\nimport join from 'lodash/join';\nimport map from 'lodash/map';\nimport pickBy from 'lodash/pickBy';\nimport toPairs from 'lodash/toPairs';\nimport { RESET_SEARCH_CONTENT, SEARCH_CONTENT } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Search content function.\n * @function searchContent\n * @param {string} url Url to use as base.\n * @param {Object} options Search options.\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function searchContent(url, options, subrequest = null) {\n  let queryArray = [];\n  options = pickBy(options, value => value !== undefined && value !== null && value !== '');\n  const arrayOptions = pickBy(options, item => isArray(item));\n  queryArray = concat(queryArray, options ? join(map(toPairs(pickBy(options, item => !isArray(item))), item => {\n    if (item[0] === 'SearchableText') {\n      // Adds the wildcard to the SearchableText param\n      item[1] = `${item[1]}*`;\n    }\n    return join(item, '=');\n  }), '&') : '');\n  queryArray = concat(queryArray, arrayOptions ? join(map(pickBy(arrayOptions), (item, key) => join(item.map(value => `${key}:list=${value}`), '&')), '&') : '');\n  const querystring = join(compact(queryArray), '&');\n  return {\n    type: SEARCH_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}/@search${querystring ? `?${querystring}` : ''}`\n    }\n  };\n}\n\n/**\n * Reset search content function.\n * @function resetSearchContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function resetSearchContent(subrequest = null) {\n  return {\n    type: RESET_SEARCH_CONTENT,\n    subrequest\n  };\n}","map":{"version":3,"names":["compact","concat","isArray","join","map","pickBy","toPairs","RESET_SEARCH_CONTENT","SEARCH_CONTENT","searchContent","url","options","subrequest","queryArray","value","undefined","arrayOptions","item","key","querystring","type","request","op","path","resetSearchContent"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/actions/search/search.js"],"sourcesContent":["/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport compact from 'lodash/compact';\nimport concat from 'lodash/concat';\nimport isArray from 'lodash/isArray';\nimport join from 'lodash/join';\nimport map from 'lodash/map';\nimport pickBy from 'lodash/pickBy';\nimport toPairs from 'lodash/toPairs';\n\nimport {\n  RESET_SEARCH_CONTENT,\n  SEARCH_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Search content function.\n * @function searchContent\n * @param {string} url Url to use as base.\n * @param {Object} options Search options.\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function searchContent(url, options, subrequest = null) {\n  let queryArray = [];\n  options = pickBy(\n    options,\n    (value) => value !== undefined && value !== null && value !== '',\n  );\n  const arrayOptions = pickBy(options, (item) => isArray(item));\n\n  queryArray = concat(\n    queryArray,\n    options\n      ? join(\n          map(toPairs(pickBy(options, (item) => !isArray(item))), (item) => {\n            if (item[0] === 'SearchableText') {\n              // Adds the wildcard to the SearchableText param\n              item[1] = `${item[1]}*`;\n            }\n            return join(item, '=');\n          }),\n          '&',\n        )\n      : '',\n  );\n\n  queryArray = concat(\n    queryArray,\n    arrayOptions\n      ? join(\n          map(pickBy(arrayOptions), (item, key) =>\n            join(\n              item.map((value) => `${key}:list=${value}`),\n              '&',\n            ),\n          ),\n          '&',\n        )\n      : '',\n  );\n\n  const querystring = join(compact(queryArray), '&');\n\n  return {\n    type: SEARCH_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}/@search${querystring ? `?${querystring}` : ''}`,\n    },\n  };\n}\n\n/**\n * Reset search content function.\n * @function resetSearchContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function resetSearchContent(subrequest = null) {\n  return {\n    type: RESET_SEARCH_CONTENT,\n    subrequest,\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAM,gBAAgB;AACpC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,SACEC,oBAAoB,EACpBC,cAAc,QACT,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,GAAG,EAAEC,OAAO,EAAEC,UAAU,GAAG,IAAI,EAAE;EAC7D,IAAIC,UAAU,GAAG,EAAE;EACnBF,OAAO,GAAGN,MAAM,CACdM,OAAO,EACNG,KAAK,IAAKA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAChE,CAAC;EACD,MAAME,YAAY,GAAGX,MAAM,CAACM,OAAO,EAAGM,IAAI,IAAKf,OAAO,CAACe,IAAI,CAAC,CAAC;EAE7DJ,UAAU,GAAGZ,MAAM,CACjBY,UAAU,EACVF,OAAO,GACHR,IAAI,CACFC,GAAG,CAACE,OAAO,CAACD,MAAM,CAACM,OAAO,EAAGM,IAAI,IAAK,CAACf,OAAO,CAACe,IAAI,CAAC,CAAC,CAAC,EAAGA,IAAI,IAAK;IAChE,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE;MAChC;MACAA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG;IACzB;IACA,OAAOd,IAAI,CAACc,IAAI,EAAE,GAAG,CAAC;EACxB,CAAC,CAAC,EACF,GACF,CAAC,GACD,EACN,CAAC;EAEDJ,UAAU,GAAGZ,MAAM,CACjBY,UAAU,EACVG,YAAY,GACRb,IAAI,CACFC,GAAG,CAACC,MAAM,CAACW,YAAY,CAAC,EAAE,CAACC,IAAI,EAAEC,GAAG,KAClCf,IAAI,CACFc,IAAI,CAACb,GAAG,CAAEU,KAAK,IAAK,GAAGI,GAAG,SAASJ,KAAK,EAAE,CAAC,EAC3C,GACF,CACF,CAAC,EACD,GACF,CAAC,GACD,EACN,CAAC;EAED,MAAMK,WAAW,GAAGhB,IAAI,CAACH,OAAO,CAACa,UAAU,CAAC,EAAE,GAAG,CAAC;EAElD,OAAO;IACLO,IAAI,EAAEZ,cAAc;IACpBI,UAAU;IACVS,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAE,GAAGb,GAAG,WAAWS,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE;IAC7D;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,kBAAkBA,CAACZ,UAAU,GAAG,IAAI,EAAE;EACpD,OAAO;IACLQ,IAAI,EAAEb,oBAAoB;IAC1BK;EACF,CAAC;AACH","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}