{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Maps/Edit.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers/Extensions';\nimport { compose } from 'redux';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport MapsSidebar from '@plone/volto/components/manage/Blocks/Maps/MapsSidebar';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\nconst Edit = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n  const intl = useIntl();\n  const {\n    0: url,\n    1: setUrl\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    onChangeBlock,\n    data,\n    block,\n    selected\n  } = props;\n  const onChangeUrl = ({\n    target\n  }) => {\n    setUrl(target.value);\n  };\n  const onSubmitUrl = useCallback(() => {\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      url: getSrc(url)\n    }));\n  }, [onChangeBlock, block, data, url]);\n  const onKeyDownVariantMenuForm = useCallback(e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }, [onSubmitUrl]);\n  const getSrc = embed => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      setError(true);\n      return '';\n    }\n    setError(false);\n    return iframe[0].src;\n  };\n  const resetSubmitUrl = () => {\n    setUrl('');\n  };\n  const placeholder = useMemo(() => data.placeholder || intl.formatMessage(messages.MapsBlockInputPlaceholder), [data, intl]);\n  return __jsx(\"div\", {\n    className: cx('block maps align', {\n      center: !Boolean(data.align)\n    }, data.align),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, data.url ? __jsx(\"div\", {\n    className: cx('maps-inner', {\n      'full-width': data.align === 'full'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(\"iframe\", {\n    title: intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n    src: data.url,\n    className: \"google-map\",\n    frameBorder: \"0\",\n    allowFullScreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })) : __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: mapsBlockSVG,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"toolbar-inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    onKeyDown: onKeyDownVariantMenuForm,\n    onChange: onChangeUrl,\n    placeholder: placeholder,\n    value: url\n    // Prevents propagation to the Dropzone and the opening\n    // of the upload browser dialog\n    ,\n    onClick: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }), url && __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    basic: true,\n    className: \"cancel\",\n    onClick: e => {\n      e.stopPropagation();\n      setUrl('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    name: clearSVG,\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }))), __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    basic: true,\n    primary: true,\n    onClick: e => {\n      e.stopPropagation();\n      onSubmitUrl();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: aheadSVG,\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  })))), __jsx(\"div\", {\n    className: \"message-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n    defaultMessage: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }), error && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Embed code error, please follow the instructions and try again.\",\n    defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }))))), !selected && __jsx(\"div\", {\n    className: \"map-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, __jsx(MapsSidebar, _extends({}, props, {\n    resetSubmitUrl: resetSubmitUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }))));\n}, \"O10kO5m5DwGzraed7HnHnAuk5/s=\", false, function () {\n  return [useIntl];\n})), \"O10kO5m5DwGzraed7HnHnAuk5/s=\", false, function () {\n  return [useIntl];\n});\n_c2 = Edit;\nEdit.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n};\nexport default compose(withBlockExtensions)(Edit);\nvar _c, _c2;\n$RefreshReg$(_c, \"Edit$React.memo\");\n$RefreshReg$(_c2, \"Edit\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","PropTypes","Button","Input","Message","defineMessages","FormattedMessage","useIntl","cx","withBlockExtensions","compose","Icon","SidebarPortal","MapsSidebar","clearSVG","aheadSVG","mapsBlockSVG","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","_s","memo","_c","props","intl","url","setUrl","error","setError","onChangeBlock","data","block","selected","onChangeUrl","target","value","onSubmitUrl","_objectSpread","getSrc","onKeyDownVariantMenuForm","e","key","preventDefault","stopPropagation","embed","parser","DOMParser","doc","parseFromString","iframe","getElementsByTagName","length","src","resetSubmitUrl","placeholder","formatMessage","__jsx","className","Boolean","align","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","frameBorder","allowFullScreen","alt","onKeyDown","onChange","onClick","Group","basic","name","size","primary","id","defaultMessage","style","color","_extends","_c2","propTypes","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Maps/Edit.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers/Extensions';\nimport { compose } from 'redux';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport MapsSidebar from '@plone/volto/components/manage/Blocks/Maps/MapsSidebar';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\nconst Edit = React.memo((props) => {\n  const intl = useIntl();\n  const [url, setUrl] = useState('');\n  const [error, setError] = useState(null);\n\n  const { onChangeBlock, data, block, selected } = props;\n  const onChangeUrl = ({ target }) => {\n    setUrl(target.value);\n  };\n\n  const onSubmitUrl = useCallback(() => {\n    onChangeBlock(block, {\n      ...data,\n      url: getSrc(url),\n    });\n  }, [onChangeBlock, block, data, url]);\n\n  const onKeyDownVariantMenuForm = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n        onSubmitUrl();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        e.stopPropagation();\n        // TODO: Do something on ESC key\n      }\n    },\n    [onSubmitUrl],\n  );\n\n  const getSrc = (embed) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      setError(true);\n      return '';\n    }\n    setError(false);\n    return iframe[0].src;\n  };\n\n  const resetSubmitUrl = () => {\n    setUrl('');\n  };\n\n  const placeholder = useMemo(\n    () =>\n      data.placeholder ||\n      intl.formatMessage(messages.MapsBlockInputPlaceholder),\n    [data, intl],\n  );\n\n  return (\n    <div\n      className={cx(\n        'block maps align',\n        {\n          center: !Boolean(data.align),\n        },\n        data.align,\n      )}\n    >\n      {data.url ? (\n        <div\n          className={cx('maps-inner', {\n            'full-width': data.align === 'full',\n          })}\n        >\n          <iframe\n            title={intl.formatMessage(messages.GoogleMapsEmbeddedBlock)}\n            src={data.url}\n            className=\"google-map\"\n            frameBorder=\"0\"\n            allowFullScreen\n          />\n        </div>\n      ) : (\n        <Message>\n          <center>\n            <img src={mapsBlockSVG} alt=\"\" />\n            <div className=\"toolbar-inner\">\n              <Input\n                onKeyDown={onKeyDownVariantMenuForm}\n                onChange={onChangeUrl}\n                placeholder={placeholder}\n                value={url}\n                // Prevents propagation to the Dropzone and the opening\n                // of the upload browser dialog\n                onClick={(e) => e.stopPropagation()}\n              />\n              {url && (\n                <Button.Group>\n                  <Button\n                    basic\n                    className=\"cancel\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setUrl('');\n                    }}\n                  >\n                    <Icon name={clearSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              )}\n              <Button.Group>\n                <Button\n                  basic\n                  primary\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onSubmitUrl();\n                  }}\n                >\n                  <Icon name={aheadSVG} size=\"30px\" />\n                </Button>\n              </Button.Group>\n            </div>\n            <div className=\"message-text\">\n              <FormattedMessage\n                id=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                defaultMessage=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n              />\n              {error && (\n                <div style={{ color: 'red' }}>\n                  <FormattedMessage\n                    id=\"Embed code error, please follow the instructions and try again.\"\n                    defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                  />\n                </div>\n              )}\n            </div>\n          </center>\n        </Message>\n      )}\n      {!selected && <div className=\"map-overlay\" />}\n      <SidebarPortal selected={selected}>\n        <MapsSidebar {...props} resetSubmitUrl={resetSubmitUrl} />\n      </SidebarPortal>\n    </div>\n  );\n});\n\nEdit.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n};\nexport default compose(withBlockExtensions)(Edit);\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC7D,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,MAAM,EAAEC,KAAK,EAAEC,OAAO,QAAQ,mBAAmB;AAC1D,SAASC,cAAc,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,YAAY;AACtE,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,aAAa,MAAM,sDAAsD;AAChF,OAAOC,WAAW,MAAM,wDAAwD;AAChF,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,YAAY,MAAM,2DAA2D;AAEpF,MAAMC,QAAQ,GAAGZ,cAAc,CAAC;EAC9Ba,yBAAyB;IAAA;IAAA;EAAA,CAGxB;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,uBAAuB;IAAA;IAAA;EAAA;AAIzB,CAAC,CAAC;AAEF,MAAMC,IAAI,gBAAAC,EAAA,cAAG5B,KAAK,CAAC6B,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAEG,KAAK,IAAK;EAAAH,EAAA;EACjC,MAAMI,IAAI,GAAGtB,OAAO,CAAC,CAAC;EACtB,MAAM;IAAA,GAACuB,GAAG;IAAA,GAAEC;EAAM,IAAIjC,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAA,GAACkC,KAAK;IAAA,GAAEC;EAAQ,IAAInC,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM;IAAEoC,aAAa;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGT,KAAK;EACtD,MAAMU,WAAW,GAAGA,CAAC;IAAEC;EAAO,CAAC,KAAK;IAClCR,MAAM,CAACQ,MAAM,CAACC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMC,WAAW,GAAG1C,WAAW,CAAC,MAAM;IACpCmC,aAAa,CAACE,KAAK,EAAAM,aAAA,CAAAA,aAAA,KACdP,IAAI;MACPL,GAAG,EAAEa,MAAM,CAACb,GAAG;IAAC,EACjB,CAAC;EACJ,CAAC,EAAE,CAACI,aAAa,EAAEE,KAAK,EAAED,IAAI,EAAEL,GAAG,CAAC,CAAC;EAErC,MAAMc,wBAAwB,GAAG7C,WAAW,CACzC8C,CAAC,IAAK;IACL,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACrBD,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBF,CAAC,CAACG,eAAe,CAAC,CAAC;MACnBP,WAAW,CAAC,CAAC;IACf,CAAC,MAAM,IAAII,CAAC,CAACC,GAAG,KAAK,QAAQ,EAAE;MAC7BD,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBF,CAAC,CAACG,eAAe,CAAC,CAAC;MACnB;IACF;EACF,CAAC,EACD,CAACP,WAAW,CACd,CAAC;EAED,MAAME,MAAM,GAAIM,KAAK,IAAK;IACxB,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,KAAK,EAAE,WAAW,CAAC;IACtD,MAAMK,MAAM,GAAGF,GAAG,CAACG,oBAAoB,CAAC,QAAQ,CAAC;IACjD,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MACvBvB,QAAQ,CAAC,IAAI,CAAC;MACd,OAAO,EAAE;IACX;IACAA,QAAQ,CAAC,KAAK,CAAC;IACf,OAAOqB,MAAM,CAAC,CAAC,CAAC,CAACG,GAAG;EACtB,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B3B,MAAM,CAAC,EAAE,CAAC;EACZ,CAAC;EAED,MAAM4B,WAAW,GAAG3D,OAAO,CACzB,MACEmC,IAAI,CAACwB,WAAW,IAChB9B,IAAI,CAAC+B,aAAa,CAAC3C,QAAQ,CAACC,yBAAyB,CAAC,EACxD,CAACiB,IAAI,EAAEN,IAAI,CACb,CAAC;EAED,OACEgC,KAAA;IACEC,SAAS,EAAEtD,EAAE,CACX,kBAAkB,EAClB;MACEa,MAAM,EAAE,CAAC0C,OAAO,CAAC5B,IAAI,CAAC6B,KAAK;IAC7B,CAAC,EACD7B,IAAI,CAAC6B,KACP,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEDnC,IAAI,CAACL,GAAG,GACP+B,KAAA;IACEC,SAAS,EAAEtD,EAAE,CAAC,YAAY,EAAE;MAC1B,YAAY,EAAE2B,IAAI,CAAC6B,KAAK,KAAK;IAC/B,CAAC,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEHT,KAAA;IACEU,KAAK,EAAE1C,IAAI,CAAC+B,aAAa,CAAC3C,QAAQ,CAACM,uBAAuB,CAAE;IAC5DkC,GAAG,EAAEtB,IAAI,CAACL,GAAI;IACdgC,SAAS,EAAC,YAAY;IACtBU,WAAW,EAAC,GAAG;IACfC,eAAe;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAChB,CACE,CAAC,GAENT,KAAA,CAACzD,OAAO;IAAA6D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACNT,KAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACET,KAAA;IAAKJ,GAAG,EAAEzC,YAAa;IAAC0D,GAAG,EAAC,EAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EACjCT,KAAA;IAAKC,SAAS,EAAC,eAAe;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5BT,KAAA,CAAC1D,KAAK;IACJwE,SAAS,EAAE/B,wBAAyB;IACpCgC,QAAQ,EAAEtC,WAAY;IACtBqB,WAAW,EAAEA,WAAY;IACzBnB,KAAK,EAAEV;IACP;IACA;IAAA;IACA+C,OAAO,EAAGhC,CAAC,IAAKA,CAAC,CAACG,eAAe,CAAC,CAAE;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACrC,CAAC,EACDxC,GAAG,IACF+B,KAAA,CAAC3D,MAAM,CAAC4E,KAAK;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACXT,KAAA,CAAC3D,MAAM;IACL6E,KAAK;IACLjB,SAAS,EAAC,QAAQ;IAClBe,OAAO,EAAGhC,CAAC,IAAK;MACdA,CAAC,CAACG,eAAe,CAAC,CAAC;MACnBjB,MAAM,CAAC,EAAE,CAAC;IACZ,CAAE;IAAAkC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEFT,KAAA,CAAClD,IAAI;IAACqE,IAAI,EAAElE,QAAS;IAACmE,IAAI,EAAC,MAAM;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAC7B,CACI,CACf,EACDT,KAAA,CAAC3D,MAAM,CAAC4E,KAAK;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACXT,KAAA,CAAC3D,MAAM;IACL6E,KAAK;IACLG,OAAO;IACPL,OAAO,EAAGhC,CAAC,IAAK;MACdA,CAAC,CAACG,eAAe,CAAC,CAAC;MACnBP,WAAW,CAAC,CAAC;IACf,CAAE;IAAAwB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEFT,KAAA,CAAClD,IAAI;IAACqE,IAAI,EAAEjE,QAAS;IAACkE,IAAI,EAAC,MAAM;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAC7B,CACI,CACX,CAAC,EACNT,KAAA;IAAKC,SAAS,EAAC,cAAc;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3BT,KAAA,CAACvD,gBAAgB;IACf6E,EAAE,EAAC,uHAAuH;IAC1HC,cAAc,EAAC,uHAAuH;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACvI,CAAC,EACDtC,KAAK,IACJ6B,KAAA;IAAKwB,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAArB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3BT,KAAA,CAACvD,gBAAgB;IACf6E,EAAE,EAAC,iEAAiE;IACpEC,cAAc,EAAC,iEAAiE;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjF,CACE,CAEJ,CACC,CACD,CACV,EACA,CAACjC,QAAQ,IAAIwB,KAAA;IAAKC,SAAS,EAAC,aAAa;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EAC7CT,KAAA,CAACjD,aAAa;IAACyB,QAAQ,EAAEA,QAAS;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAChCT,KAAA,CAAChD,WAAW,EAAA0E,QAAA,KAAK3D,KAAK;IAAE8B,cAAc,EAAEA,cAAe;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAE,CAC5C,CACZ,CAAC;AAEV,CAAC;EAAA,QA9Ic/D,OAAO;AAAA,EA8IrB,CAAC;EAAA,QA9IaA,OAAO;AAAA,EA8IpB;AAACiF,GAAA,GA/IGhE,IAAI;AAiJVA,IAAI,CAACiE,SAAS,GAAG;EACfpD,QAAQ,EAAEpC,SAAS,CAACyF,IAAI,CAACC,UAAU;EACnCvD,KAAK,EAAEnC,SAAS,CAAC2F,MAAM,CAACD,UAAU;EAClCE,KAAK,EAAE5F,SAAS,CAAC6F,MAAM,CAACH,UAAU;EAClCxD,IAAI,EAAElC,SAAS,CAAC8F,QAAQ,CAAC9F,SAAS,CAAC+F,GAAG,CAAC,CAACL,UAAU;EAClDM,QAAQ,EAAEhG,SAAS,CAAC2F,MAAM,CAACD,UAAU;EACrCzD,aAAa,EAAEjC,SAAS,CAACiG,IAAI,CAACP,UAAU;EACxCQ,aAAa,EAAElG,SAAS,CAACiG,IAAI,CAACP,UAAU;EACxCS,aAAa,EAAEnG,SAAS,CAACiG,IAAI,CAACP,UAAU;EACxCU,oBAAoB,EAAEpG,SAAS,CAACiG,IAAI,CAACP,UAAU;EAC/CW,gBAAgB,EAAErG,SAAS,CAACiG,IAAI,CAACP,UAAU;EAC3CY,aAAa,EAAEtG,SAAS,CAACiG,IAAI,CAACP;AAChC,CAAC;AACD,eAAejF,OAAO,CAACD,mBAAmB,CAAC,CAACe,IAAI,CAAC;AAAC,IAAAG,EAAA,EAAA6D,GAAA;AAAAgB,YAAA,CAAA7E,EAAA;AAAA6E,YAAA,CAAAhB,GAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.","defaultMessage":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module","externalDependencies":[]}