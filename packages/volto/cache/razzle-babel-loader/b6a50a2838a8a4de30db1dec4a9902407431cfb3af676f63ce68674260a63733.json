{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/ContentMetadataTags/ContentMetadataTags.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { toPublicURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { hasApiExpander } from '@plone/volto/helpers/Utils/Utils';\nimport { getNavroot } from '@plone/volto/actions/navroot/navroot';\nimport config from '@plone/volto/registry';\nimport { useDispatch, useSelector } from 'react-redux';\nconst ContentMetadataTags = props => {\n  var _getTitle;\n  const {\n    opengraph_title,\n    opengraph_description,\n    seo_title,\n    seo_description,\n    seo_canonical_url,\n    seo_noindex,\n    title,\n    description\n  } = props.content;\n  const dispatch = useDispatch();\n  const pathname = useSelector(state => state.router.location.pathname);\n  const navroot = useSelector(state => {\n    var _state$navroot, _state$navroot$data;\n    return (_state$navroot = state.navroot) === null || _state$navroot === void 0 ? void 0 : (_state$navroot$data = _state$navroot.data) === null || _state$navroot$data === void 0 ? void 0 : _state$navroot$data.navroot;\n  });\n  const site = useSelector(state => {\n    var _state$site;\n    return (_state$site = state.site) === null || _state$site === void 0 ? void 0 : _state$site.data;\n  });\n  useEffect(() => {\n    if (pathname && !hasApiExpander('navroot', getBaseUrl(pathname))) {\n      dispatch(getNavroot(getBaseUrl(pathname)));\n    }\n  }, [dispatch, pathname]);\n  const getContentImageInfo = () => {\n    var _opengraph_image$scal, _opengraph_image$scal2, _image$scales, _image$scales$large, _opengraph_image$scal3;\n    const {\n      contentMetadataTagsImageField\n    } = config.settings;\n    const image = props.content[contentMetadataTagsImageField];\n    const {\n      opengraph_image\n    } = props.content;\n    const contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null\n    };\n    contentImageInfo.contentHasImage = (opengraph_image === null || opengraph_image === void 0 ? void 0 : (_opengraph_image$scal = opengraph_image.scales) === null || _opengraph_image$scal === void 0 ? void 0 : (_opengraph_image$scal2 = _opengraph_image$scal.large) === null || _opengraph_image$scal2 === void 0 ? void 0 : _opengraph_image$scal2.download) || (image === null || image === void 0 ? void 0 : (_image$scales = image.scales) === null || _image$scales === void 0 ? void 0 : (_image$scales$large = _image$scales.large) === null || _image$scales$large === void 0 ? void 0 : _image$scales$large.download) || false;\n    if (contentImageInfo.contentHasImage && opengraph_image !== null && opengraph_image !== void 0 && (_opengraph_image$scal3 = opengraph_image.scales) !== null && _opengraph_image$scal3 !== void 0 && _opengraph_image$scal3.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n    return contentImageInfo;\n  };\n  const contentImageInfo = getContentImageInfo();\n  const getTitle = () => {\n    var _config$settings, _config$settings$site, _config$settings2;\n    const includeSiteTitle = (config === null || config === void 0 ? void 0 : (_config$settings = config.settings) === null || _config$settings === void 0 ? void 0 : (_config$settings$site = _config$settings.siteTitleFormat) === null || _config$settings$site === void 0 ? void 0 : _config$settings$site.includeSiteTitle) || false;\n    const titleAndSiteTitleSeparator = (config === null || config === void 0 ? void 0 : (_config$settings2 = config.settings) === null || _config$settings2 === void 0 ? void 0 : _config$settings2.titleAndSiteTitleSeparator) || '-';\n    const navRootTitle = navroot === null || navroot === void 0 ? void 0 : navroot.title;\n    const siteRootTitle = site === null || site === void 0 ? void 0 : site['plone.site_title'];\n    const titlePart = navRootTitle || siteRootTitle;\n    if (includeSiteTitle && titlePart && titlePart !== title) {\n      return seo_title || `${title} ${titleAndSiteTitleSeparator} ${titlePart}`;\n    } else {\n      return seo_title || title;\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, (_getTitle = getTitle()) === null || _getTitle === void 0 ? void 0 : _getTitle.replace(/\\u00AD/g, '')), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: seo_canonical_url || toPublicURL(props.content['@id']),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: seo_description || description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: opengraph_title || seo_title || title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: seo_canonical_url || toPublicURL(props.content['@id']),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), seo_noindex && __jsx(\"meta\", {\n    name: \"robots\",\n    content: \"noindex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image\",\n    content: toPublicURL(contentImageInfo.url),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:width\",\n    content: contentImageInfo.width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:height\",\n    content: contentImageInfo.height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), (opengraph_description || seo_description || description) && __jsx(\"meta\", {\n    property: \"og:description\",\n    content: opengraph_description || seo_description || description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })));\n};\nexport default ContentMetadataTags;","map":{"version":3,"names":["React","useEffect","Helmet","toPublicURL","getBaseUrl","hasApiExpander","getNavroot","config","useDispatch","useSelector","ContentMetadataTags","props","_getTitle","opengraph_title","opengraph_description","seo_title","seo_description","seo_canonical_url","seo_noindex","title","description","content","dispatch","pathname","state","router","location","navroot","_state$navroot","_state$navroot$data","data","site","_state$site","getContentImageInfo","_opengraph_image$scal","_opengraph_image$scal2","_image$scales","_image$scales$large","_opengraph_image$scal3","contentMetadataTagsImageField","settings","image","opengraph_image","contentImageInfo","contentHasImage","url","height","width","scales","large","download","getTitle","_config$settings","_config$settings$site","_config$settings2","includeSiteTitle","siteTitleFormat","titleAndSiteTitleSeparator","navRootTitle","siteRootTitle","titlePart","__jsx","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","replace","rel","href","name","property"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/ContentMetadataTags/ContentMetadataTags.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { toPublicURL, getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { hasApiExpander } from '@plone/volto/helpers/Utils/Utils';\nimport { getNavroot } from '@plone/volto/actions/navroot/navroot';\nimport config from '@plone/volto/registry';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ContentMetadataTags = (props) => {\n  const {\n    opengraph_title,\n    opengraph_description,\n    seo_title,\n    seo_description,\n    seo_canonical_url,\n    seo_noindex,\n    title,\n    description,\n  } = props.content;\n\n  const dispatch = useDispatch();\n  const pathname = useSelector((state) => state.router.location.pathname);\n  const navroot = useSelector((state) => state.navroot?.data?.navroot);\n  const site = useSelector((state) => state.site?.data);\n\n  useEffect(() => {\n    if (pathname && !hasApiExpander('navroot', getBaseUrl(pathname))) {\n      dispatch(getNavroot(getBaseUrl(pathname)));\n    }\n  }, [dispatch, pathname]);\n\n  const getContentImageInfo = () => {\n    const { contentMetadataTagsImageField } = config.settings;\n    const image = props.content[contentMetadataTagsImageField];\n    const { opengraph_image } = props.content;\n\n    const contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null,\n    };\n    contentImageInfo.contentHasImage =\n      opengraph_image?.scales?.large?.download ||\n      image?.scales?.large?.download ||\n      false;\n\n    if (contentImageInfo.contentHasImage && opengraph_image?.scales?.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n\n    return contentImageInfo;\n  };\n\n  const contentImageInfo = getContentImageInfo();\n\n  const getTitle = () => {\n    const includeSiteTitle =\n      config?.settings?.siteTitleFormat?.includeSiteTitle || false;\n    const titleAndSiteTitleSeparator =\n      config?.settings?.titleAndSiteTitleSeparator || '-';\n    const navRootTitle = navroot?.title;\n    const siteRootTitle = site?.['plone.site_title'];\n    const titlePart = navRootTitle || siteRootTitle;\n\n    if (includeSiteTitle && titlePart && titlePart !== title) {\n      return seo_title || `${title} ${titleAndSiteTitleSeparator} ${titlePart}`;\n    } else {\n      return seo_title || title;\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{getTitle()?.replace(/\\u00AD/g, '')}</title>\n        <link\n          rel=\"canonical\"\n          href={seo_canonical_url || toPublicURL(props.content['@id'])}\n        />\n        <meta name=\"description\" content={seo_description || description} />\n        <meta\n          property=\"og:title\"\n          content={opengraph_title || seo_title || title}\n        />\n        <meta\n          property=\"og:url\"\n          content={seo_canonical_url || toPublicURL(props.content['@id'])}\n        />\n        {seo_noindex && <meta name=\"robots\" content=\"noindex\" />}\n        {contentImageInfo.contentHasImage && (\n          <meta\n            property=\"og:image\"\n            content={toPublicURL(contentImageInfo.url)}\n          />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:width\" content={contentImageInfo.width} />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:height\" content={contentImageInfo.height} />\n        )}\n        {(opengraph_description || seo_description || description) && (\n          <meta\n            property=\"og:description\"\n            content={opengraph_description || seo_description || description}\n          />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Helmet>\n    </>\n  );\n};\n\nexport default ContentMetadataTags;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}