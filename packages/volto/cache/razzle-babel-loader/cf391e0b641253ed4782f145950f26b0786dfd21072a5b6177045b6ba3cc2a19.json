{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/SlotRenderer/SlotRenderer.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLocation } from 'react-router-dom';\nimport config from '@plone/volto/registry';\n/*\nUsage:\n<SlotRenderer name=\"aboveContent\" content={content} />\n*/\n\nconst SlotRenderer = ({\n  name,\n  content,\n  navRoot\n}) => {\n  _s();\n  var _content$Components, _content$Components$n;\n  const location = useLocation();\n  let slots = config.getSlot(name, {\n    content,\n    location: location,\n    // Since we are using an older version of history, we need to cast it to any\n    // This is to cover the use case while adding a new content and we don't have\n    // have the navRoot information in the initial content. This will be\n    // useful for SlotRenderers rendered in the `Add` route.\n    navRoot: (content === null || content === void 0 ? void 0 : (_content$Components = content['@components']) === null || _content$Components === void 0 ? void 0 : (_content$Components$n = _content$Components.navroot) === null || _content$Components$n === void 0 ? void 0 : _content$Components$n.navroot) || navRoot\n  });\n  if (!slots) {\n    return null;\n  }\n  return __jsx(React.Fragment, null, slots.map(({\n    component,\n    name\n  }) => {\n    // ^^ Weird compilation issue for Jest tests, that forced to re-declare the type above\n    const SlotComponent = component;\n    return __jsx(SlotComponent, {\n      key: name,\n      content: content,\n      location: location,\n      navRoot: navRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n_s(SlotRenderer, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = SlotRenderer;\nexport default SlotRenderer;\nvar _c;\n$RefreshReg$(_c, \"SlotRenderer\");","map":{"version":3,"names":["useLocation","config","SlotRenderer","name","content","navRoot","_s","_content$Components","_content$Components$n","location","slots","getSlot","navroot","__jsx","React","Fragment","map","component","SlotComponent","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/SlotRenderer/SlotRenderer.tsx"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport config from '@plone/volto/registry';\nimport type { Content } from '@plone/types';\n\n/*\nUsage:\n<SlotRenderer name=\"aboveContent\" content={content} />\n*/\n\nconst SlotRenderer = ({\n  name,\n  content,\n  navRoot,\n}: {\n  name: string;\n  content: Content;\n  navRoot?: Content;\n}) => {\n  const location = useLocation();\n\n  let slots = config.getSlot(name, {\n    content,\n    location: location as any, // Since we are using an older version of history, we need to cast it to any\n    // This is to cover the use case while adding a new content and we don't have\n    // have the navRoot information in the initial content. This will be\n    // useful for SlotRenderers rendered in the `Add` route.\n    navRoot: content?.['@components']?.navroot?.navroot || navRoot,\n  });\n\n  if (!slots) {\n    return null;\n  }\n\n  return (\n    <>\n      {slots.map(\n        ({\n          component,\n          name,\n        }: {\n          component: React.ComponentType<any>;\n          name: string;\n        }) => {\n          // ^^ Weird compilation issue for Jest tests, that forced to re-declare the type above\n          const SlotComponent = component;\n          return (\n            <SlotComponent\n              key={name}\n              content={content}\n              location={location}\n              navRoot={navRoot}\n            />\n          );\n        },\n      )}\n    </>\n  );\n};\n\nexport default SlotRenderer;\n"],"mappings":";;;;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,uBAAuB;AAG1C;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGA,CAAC;EACpBC,IAAI;EACJC,OAAO;EACPC;AAKF,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,mBAAA,EAAAC,qBAAA;EACJ,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,IAAIU,KAAK,GAAGT,MAAM,CAACU,OAAO,CAACR,IAAI,EAAE;IAC/BC,OAAO;IACPK,QAAQ,EAAEA,QAAe;IAAE;IAC3B;IACA;IACA;IACAJ,OAAO,EAAE,CAAAD,OAAO,aAAPA,OAAO,wBAAAG,mBAAA,GAAPH,OAAO,CAAG,aAAa,CAAC,cAAAG,mBAAA,wBAAAC,qBAAA,GAAxBD,mBAAA,CAA0BK,OAAO,cAAAJ,qBAAA,uBAAjCA,qBAAA,CAAmCI,OAAO,KAAIP;EACzD,CAAC,CAAC;EAEF,IAAI,CAACK,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,OACEG,KAAA,CAAAC,KAAA,CAAAC,QAAA,QACGL,KAAK,CAACM,GAAG,CACR,CAAC;IACCC,SAAS;IACTd;EAIF,CAAC,KAAK;IACJ;IACA,MAAMe,aAAa,GAAGD,SAAS;IAC/B,OACEJ,KAAA,CAACK,aAAa;MACZC,GAAG,EAAEhB,IAAK;MACVC,OAAO,EAAEA,OAAQ;MACjBK,QAAQ,EAAEA,QAAS;MACnBJ,OAAO,EAAEA,OAAQ;MAAAe,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAClB,CAAC;EAEN,CACF,CACA,CAAC;AAEP,CAAC;AAACnB,EAAA,CAhDIJ,YAAY;EAAA,QASCF,WAAW;AAAA;AAAA0B,EAAA,GATxBxB,YAAY;AAkDlB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}