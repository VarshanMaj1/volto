{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Preferences/ChangePassword.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { useClient } from '@plone/volto/hooks/client/useClient';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { updatePassword } from '@plone/volto/actions/users/users';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changePassword: {\n    \"id\": \"Change Password\",\n    \"defaultMessage\": \"Change Password\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  oldPasswordTitle: {\n    \"id\": \"Current password\",\n    \"defaultMessage\": \"Current password\"\n  },\n  oldPasswordDescription: {\n    \"id\": \"Enter your current password.\",\n    \"defaultMessage\": \"Enter your current password.\"\n  },\n  newPasswordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  newPasswordDescription: {\n    \"id\": \"Enter your new password. Minimum 8 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 8 characters.\"\n  },\n  newPasswordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  newPasswordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\nconst ChangePassword = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const isClient = useClient();\n  const userId = useSelector(state => state.userSession.token ? jwtDecode(state.userSession.token).sub : '', shallowEqual);\n  const loading = useSelector(state => state.users.update_password.loading);\n  const {\n    pathname\n  } = useLocation();\n  const history = useHistory();\n  const onSubmit = data => {\n    if (data.newPassword === data.newPasswordRepeat) {\n      dispatch(updatePassword(userId, data.oldPassword, data.newPassword)).then(() => {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.saved),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }\n        }));\n      });\n    }\n  };\n  const onCancel = () => {\n    history.goBack();\n  };\n  return __jsx(Container, {\n    id: \"page-change-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.changePassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), __jsx(Form, {\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n      }],\n      properties: {\n        oldPassword: {\n          description: intl.formatMessage(messages.oldPasswordDescription),\n          title: intl.formatMessage(messages.oldPasswordTitle),\n          type: 'string',\n          widget: 'password'\n        },\n        newPassword: {\n          description: intl.formatMessage(messages.newPasswordDescription),\n          title: intl.formatMessage(messages.newPasswordTitle),\n          type: 'string',\n          widget: 'password'\n        },\n        newPasswordRepeat: {\n          description: intl.formatMessage(messages.newPasswordRepeatDescription),\n          title: intl.formatMessage(messages.newPasswordRepeatTitle),\n          type: 'string',\n          widget: 'password'\n        }\n      },\n      required: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n    },\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(Link, {\n      to: `${getBaseUrl(pathname)}`,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }), document.getElementById('toolbar')));\n};\nexport default ChangePassword;","map":{"version":3,"names":["useSelector","useDispatch","shallowEqual","Link","useHistory","useLocation","defineMessages","useIntl","createPortal","Container","jwtDecode","toast","Helmet","useClient","Form","Icon","Toast","Toolbar","updatePassword","getBaseUrl","backSVG","messages","changePassword","default","oldPasswordTitle","oldPasswordDescription","newPasswordTitle","newPasswordDescription","newPasswordRepeatTitle","newPasswordRepeatDescription","saved","back","success","ChangePassword","intl","dispatch","isClient","userId","state","userSession","token","sub","loading","users","update_password","pathname","history","onSubmit","data","newPassword","newPasswordRepeat","oldPassword","then","__jsx","title","formatMessage","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","goBack","id","schema","fieldsets","fields","properties","description","type","widget","required","hideDefaultViewButtons","inner","to","className","name","size","document","getElementById"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Preferences/ChangePassword.jsx"],"sourcesContent":["import { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { useClient } from '@plone/volto/hooks/client/useClient';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { updatePassword } from '@plone/volto/actions/users/users';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 8 characters.',\n    defaultMessage: 'Enter your new password. Minimum 8 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\nconst ChangePassword = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const isClient = useClient();\n\n  const userId = useSelector(\n    (state) =>\n      state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n    shallowEqual,\n  );\n  const loading = useSelector((state) => state.users.update_password.loading);\n  const { pathname } = useLocation();\n  const history = useHistory();\n\n  const onSubmit = (data) => {\n    if (data.newPassword === data.newPasswordRepeat) {\n      dispatch(updatePassword(userId, data.oldPassword, data.newPassword)).then(\n        () => {\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.saved)}\n            />,\n          );\n        },\n      );\n    }\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  return (\n    <Container id=\"page-change-password\">\n      <Helmet title={intl.formatMessage(messages.changePassword)} />\n      <Form\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: intl.formatMessage(messages.default),\n              fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n            },\n          ],\n          properties: {\n            oldPassword: {\n              description: intl.formatMessage(messages.oldPasswordDescription),\n              title: intl.formatMessage(messages.oldPasswordTitle),\n              type: 'string',\n              widget: 'password',\n            },\n            newPassword: {\n              description: intl.formatMessage(messages.newPasswordDescription),\n              title: intl.formatMessage(messages.newPasswordTitle),\n              type: 'string',\n              widget: 'password',\n            },\n            newPasswordRepeat: {\n              description: intl.formatMessage(\n                messages.newPasswordRepeatDescription,\n              ),\n              title: intl.formatMessage(messages.newPasswordRepeatTitle),\n              type: 'string',\n              widget: 'password',\n            },\n          },\n          required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n        }}\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        loading={loading}\n      />\n      {isClient &&\n        createPortal(\n          <Toolbar\n            pathname={pathname}\n            hideDefaultViewButtons\n            inner={\n              <Link to={`${getBaseUrl(pathname)}`} className=\"item\">\n                <Icon\n                  name={backSVG}\n                  className=\"contents circled\"\n                  size=\"30px\"\n                  title={intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />,\n          document.getElementById('toolbar'),\n        )}\n    </Container>\n  );\n};\n\nexport default ChangePassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Change Password","defaultMessage":"Change Password"},{"id":"Default","defaultMessage":"Default"},{"id":"Current password","defaultMessage":"Current password"},{"id":"Enter your current password.","defaultMessage":"Enter your current password."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 8 characters.","defaultMessage":"Enter your new password. Minimum 8 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}