{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Utils/Utils.jsx\";\nvar __jsx = React.createElement;\nimport cloneDeepWith from 'lodash/cloneDeepWith';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport transform from 'lodash/transform';\nimport React from 'react';\nimport { matchPath } from 'react-router';\nimport config from '@plone/volto/registry';\n\n/**\n * Deep diff between two object, using lodash\n * @param  {Object} object Object compared\n * @param  {Object} base   Object to compare with\n * @return {Object}        Return a new object who represent the diff\n */\nexport function difference(object, base) {\n  return transform(object, (result, value, key) => {\n    if (!isEqual(value, base[key])) {\n      result[key] = isObject(value) && isObject(base[key]) ? difference(value, base[key]) : value;\n    }\n  });\n}\n\n/**\n * Throw an error if the wrapped function returns undefined\n *\n * @param {Function} func\n */\nexport const safeWrapper = func => config => {\n  const res = func(config);\n  if (typeof res === 'undefined') {\n    throw new Error(`Configuration function doesn't return config, ${func}`);\n  }\n  return res;\n};\n\n/**\n * A helper to pipe a configuration object through configuration loaders\n *\n * @param {Array} configMethods A list of configuration methods\n * @param {Object} config The Volto singleton config object\n */\nexport function applyConfig(configMethods, config) {\n  return configMethods.reduce((acc, apply) => safeWrapper(apply)(acc), config);\n}\n\n/**\n * A HOC factory that propagates the status of asyncConnected requests back to\n * the main server process, to allow properly expressing an error status as\n * HTTP status code\n *\n * @param {} code HTTP return code\n */\nexport function withServerErrorCode(code) {\n  return WrappedComponent => props => {\n    if (props.staticContext && Object.keys(props.staticContext).length === 0) {\n      const {\n        staticContext\n      } = props;\n      staticContext.error_code = code;\n      staticContext.error = props.error;\n    }\n    return __jsx(WrappedComponent, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }\n    }));\n  };\n}\n\n// See https://en.wikipedia.org/wiki/Web_colors#Extended_colors\nconst safeColors = ['Black', 'Blue', 'BlueViolet', 'Brown', 'Crimson', 'DarkBlue', 'DarkCyan', 'DarkGreen', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrchid', 'DarkRed', 'DarkSlateBlue', 'DarkSlateGray', 'DarkViolet', 'DeepPink', 'DimGray', 'DodgerBlue', 'Firebrick', 'ForestGreen', 'Fuchsia', 'Green', 'IndianRed', 'Indigo', 'Magenta', 'Maroon', 'MediumBlue', 'MediumSlateBlue', 'MediumVioletRed', 'MidnightBlue', 'Navy', 'Olive', 'OliveDrab', 'OrangeRed', 'Purple', 'Red', 'RoyalBlue', 'SaddleBrown', 'SeaGreen', 'Sienna', 'SlateBlue', 'SlateGray', 'SteelBlue', 'Teal'];\nconst namedColors = {};\n\n/**\n * Will generate initials from string\n * @param {string} name\n * @param {integer} count\n * @returns {string} only one letter if received only one name\n */\nexport const getInitials = (title, limit) => {\n  const text = title.split(' ').map(n => n[0] ? n[0].toUpperCase() : '').join('');\n  if (limit) {\n    return text.substring(0, limit);\n  }\n  return text;\n};\n\n/**\n * Will generate a random color hex\n * Will also remmember the color for each userId\n * @param {string} userId\n */\nexport const getColor = name => {\n  const namedColor = namedColors[name] ? namedColors[name] : safeColors.length > 0 ? safeColors.pop() : `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  if (!namedColors[name]) {\n    namedColors[name] = namedColor;\n  }\n  return namedColor;\n};\n\n/**\n * Fixes TimeZones issues on moment date objects\n * Parses a DateTime and sets correct moment locale\n * @param {string} locale Current locale\n * @param {string} value DateTime string\n * @param {string} format Date format of choice\n * @returns {Object|string} Moment object or string if format is set\n */\nexport const parseDateTime = (locale, value, format, moment) => {\n  //  Used to set a server timezone or UTC as default\n  moment.updateLocale(locale, moment.localeData(locale)._config); // copy locale to moment-timezone\n  let datetime = null;\n  if (value) {\n    // check if datetime has timezone, otherwise assumes it's UTC\n    datetime = !value.match(/T/) || value.match(/T(.)*(-|\\+|Z)/g) ?\n    // Since we assume UTC everywhere, then transform to local (momentjs default)\n    moment(value) :\n    // This might happen in old Plone versions dates\n    moment(`${value}Z`);\n  }\n  if (format && datetime) {\n    return datetime.format(format);\n  }\n  return datetime;\n};\n\n/**\n * Converts a language code like pt-br to the format `pt_BR` (`lang_region`)\n * Useful for passing from Plone's i18n lang names to Xnix locale names\n * eg. LC_MESSAGES/lang_region.po filenames. Also used in the I18N_LANGUAGE cookie.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toGettextLang = language => {\n  if (language.includes('-')) {\n    let normalizedLang = language.split('-');\n    normalizedLang = `${normalizedLang[0]}_${normalizedLang[1].toUpperCase()}`;\n    return normalizedLang;\n  }\n  return language;\n};\nexport const normalizeLanguageName = toGettextLang;\n\n/**\n * Converts a language code like pt-br or pt_BR to the format `pt-BR`.\n * `react-intl` only supports this syntax. We also use it for the locales\n * in the volto Redux store.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toReactIntlLang = language => {\n  if (language.includes('_') || language.includes('-')) {\n    let langCode = language.split(/[-_]/);\n    langCode = `${langCode[0]}-${langCode[1].toUpperCase()}`;\n    return langCode;\n  }\n  return language;\n};\nexport const toLangUnderscoreRegion = toReactIntlLang; // old name for backwards-compat\n\n/**\n * Converts a language code like pt_BR or pt-BR to the format `pt-br`.\n * This format is used on the backend and in volto config settings.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toBackendLang = language => {\n  return toReactIntlLang(language).toLowerCase();\n};\n\n/**\n * Lookup if a given expander is set in apiExpanders for the given path and action type\n * @param {string} expander The id literal of the expander eg. `navigation`\n * @param {string} path The path (no URL) to check if the expander has effect\n * @param {string} type The Redux action type\n * @returns {boolean} Return if the expander is present for the path and the type given\n */\nexport const hasApiExpander = (expander, path = '', type = 'GET_CONTENT') => {\n  return flatten(config.settings.apiExpanders.filter(expand => matchPath(path, expand.match) && expand[type]).map(expand => expand[type])).includes(expander);\n};\n\n/**\n * Insert element into array at a give index\n * @param {Array} array Array with data\n * @param {*} element Element to be inserted\n * @param {number} index Index of item to be inserted at\n * @returns {Array} Array with inserted element\n */\nexport const insertInArray = (array, element, index) => [...array.slice(0, index), element, ...array.slice(index)];\n\n/**\n * Replace element in array at a give index\n * @param {Array} array Array with data\n * @param {*} element Element to be replaced\n * @param {number} index Index of item to be replaced at\n * @returns {Array} Array with replaced element\n */\nexport const replaceItemOfArray = (array, index, value) => Object.assign([...array], {\n  [index]: value\n});\n\n/**\n * Remove item from array at given index\n * @param {Array} array Array with data\n * @param {number} index Index of item to be removed\n * @returns {Array} Array without deleted element\n */\nexport const removeFromArray = (array, index) => {\n  let newArray = array.slice();\n  newArray.splice(index, 1);\n  return newArray;\n};\n\n/**\n * Moves an item from origin to target inside an array in an immutable way\n * @param {Array} array Array with data\n * @param {number} origin Index of item to be moved from\n * @param {number} target Index of item to be moved to\n * @returns {Array} Resultant array\n */\nexport const reorderArray = (array, origin, target) => {\n  const result = Array.from(array);\n  const [removed] = result.splice(origin, 1);\n  result.splice(target, 0, removed);\n  return result;\n};\n\n/**\n * Normalize (unicode) string to a normalized plain ascii string\n * @method normalizeString\n * @param {string} str The string to be normalized\n * @returns {string} Normalized plain ascii string\n */\nexport function normalizeString(str) {\n  return str.normalize('NFD').replace(/\\p{Diacritic}/gu, '');\n}\n\n/**\n * Slugify a string: remove whitespaces, special chars and replace with _\n * @param {string} string String to be slugified\n * @returns {string} Slugified string\n */\nexport const slugify = string => {\n  return string.toLowerCase().replace(/[\\s-]+/g, '_').replace(/[^\\w]+/g, '');\n};\n\n/**\n * cloneDeep an object with support for JSX nodes on it\n * Somehow, in a browser it fails with a \"Illegal invocation\" error\n * but in node (Jest test) it doesn't. This does the trick.\n * @param {object} object object to be cloned\n * @returns {object} deep cloned object\n */\nexport const cloneDeepSchema = object => {\n  return cloneDeepWith(object, value => {\n    if (/*#__PURE__*/React.isValidElement(value)) {\n      // If a JSX valid element, just return it, do not try to deep clone it\n      return value;\n    }\n  });\n};\n\n/**\n * Creates an array given a range of numbers\n * @param {number} start start number from\n * @param {number} stop stop number at\n * @param {number} step step every each number in the sequence\n * @returns {array} The result, eg. [0, 1, 2, 3, 4]\n */\nexport const arrayRange = (start, stop, step) => Array.from({\n  length: (stop - start) / step + 1\n}, (value, index) => start + index * step);\n\n/**\n * Given an event target element returns if it's an interactive element\n * of the one in the list.\n * @param {node} element event.target element type\n * @returns {boolean} If it's an interactive element of the list\n */\nexport function isInteractiveElement(element, interactiveElements = ['button', 'input', 'textarea', 'select', 'option', 'svg', 'path']) {\n  if (interactiveElements.includes(element.tagName.toLowerCase())) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["cloneDeepWith","flatten","isEqual","isObject","transform","React","matchPath","config","difference","object","base","result","value","key","safeWrapper","func","res","Error","applyConfig","configMethods","reduce","acc","apply","withServerErrorCode","code","WrappedComponent","props","staticContext","Object","keys","length","error_code","error","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","safeColors","namedColors","getInitials","title","limit","text","split","map","n","toUpperCase","join","substring","getColor","name","namedColor","pop","Math","floor","random","toString","parseDateTime","locale","format","moment","updateLocale","localeData","_config","datetime","match","toGettextLang","language","includes","normalizedLang","normalizeLanguageName","toReactIntlLang","langCode","toLangUnderscoreRegion","toBackendLang","toLowerCase","hasApiExpander","expander","path","type","settings","apiExpanders","filter","expand","insertInArray","array","element","index","slice","replaceItemOfArray","assign","removeFromArray","newArray","splice","reorderArray","origin","target","Array","from","removed","normalizeString","str","normalize","replace","slugify","string","cloneDeepSchema","isValidElement","arrayRange","start","stop","step","isInteractiveElement","interactiveElements","tagName"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Utils/Utils.jsx"],"sourcesContent":["import cloneDeepWith from 'lodash/cloneDeepWith';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport transform from 'lodash/transform';\nimport React from 'react';\nimport { matchPath } from 'react-router';\nimport config from '@plone/volto/registry';\n\n/**\n * Deep diff between two object, using lodash\n * @param  {Object} object Object compared\n * @param  {Object} base   Object to compare with\n * @return {Object}        Return a new object who represent the diff\n */\nexport function difference(object, base) {\n  return transform(object, (result, value, key) => {\n    if (!isEqual(value, base[key])) {\n      result[key] =\n        isObject(value) && isObject(base[key])\n          ? difference(value, base[key])\n          : value;\n    }\n  });\n}\n\n/**\n * Throw an error if the wrapped function returns undefined\n *\n * @param {Function} func\n */\nexport const safeWrapper = (func) => (config) => {\n  const res = func(config);\n  if (typeof res === 'undefined') {\n    throw new Error(`Configuration function doesn't return config, ${func}`);\n  }\n  return res;\n};\n\n/**\n * A helper to pipe a configuration object through configuration loaders\n *\n * @param {Array} configMethods A list of configuration methods\n * @param {Object} config The Volto singleton config object\n */\nexport function applyConfig(configMethods, config) {\n  return configMethods.reduce((acc, apply) => safeWrapper(apply)(acc), config);\n}\n\n/**\n * A HOC factory that propagates the status of asyncConnected requests back to\n * the main server process, to allow properly expressing an error status as\n * HTTP status code\n *\n * @param {} code HTTP return code\n */\nexport function withServerErrorCode(code) {\n  return (WrappedComponent) => (props) => {\n    if (props.staticContext && Object.keys(props.staticContext).length === 0) {\n      const { staticContext } = props;\n      staticContext.error_code = code;\n      staticContext.error = props.error;\n    }\n    return <WrappedComponent {...props} />;\n  };\n}\n\n// See https://en.wikipedia.org/wiki/Web_colors#Extended_colors\nconst safeColors = [\n  'Black',\n  'Blue',\n  'BlueViolet',\n  'Brown',\n  'Crimson',\n  'DarkBlue',\n  'DarkCyan',\n  'DarkGreen',\n  'DarkMagenta',\n  'DarkOliveGreen',\n  'DarkOrchid',\n  'DarkRed',\n  'DarkSlateBlue',\n  'DarkSlateGray',\n  'DarkViolet',\n  'DeepPink',\n  'DimGray',\n  'DodgerBlue',\n  'Firebrick',\n  'ForestGreen',\n  'Fuchsia',\n  'Green',\n  'IndianRed',\n  'Indigo',\n  'Magenta',\n  'Maroon',\n  'MediumBlue',\n  'MediumSlateBlue',\n  'MediumVioletRed',\n  'MidnightBlue',\n  'Navy',\n  'Olive',\n  'OliveDrab',\n  'OrangeRed',\n  'Purple',\n  'Red',\n  'RoyalBlue',\n  'SaddleBrown',\n  'SeaGreen',\n  'Sienna',\n  'SlateBlue',\n  'SlateGray',\n  'SteelBlue',\n  'Teal',\n];\nconst namedColors = {};\n\n/**\n * Will generate initials from string\n * @param {string} name\n * @param {integer} count\n * @returns {string} only one letter if received only one name\n */\nexport const getInitials = (title, limit) => {\n  const text = title\n    .split(' ')\n    .map((n) => (n[0] ? n[0].toUpperCase() : ''))\n    .join('');\n  if (limit) {\n    return text.substring(0, limit);\n  }\n  return text;\n};\n\n/**\n * Will generate a random color hex\n * Will also remmember the color for each userId\n * @param {string} userId\n */\nexport const getColor = (name) => {\n  const namedColor = namedColors[name]\n    ? namedColors[name]\n    : safeColors.length > 0\n      ? safeColors.pop()\n      : `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  if (!namedColors[name]) {\n    namedColors[name] = namedColor;\n  }\n  return namedColor;\n};\n\n/**\n * Fixes TimeZones issues on moment date objects\n * Parses a DateTime and sets correct moment locale\n * @param {string} locale Current locale\n * @param {string} value DateTime string\n * @param {string} format Date format of choice\n * @returns {Object|string} Moment object or string if format is set\n */\nexport const parseDateTime = (locale, value, format, moment) => {\n  //  Used to set a server timezone or UTC as default\n  moment.updateLocale(locale, moment.localeData(locale)._config); // copy locale to moment-timezone\n  let datetime = null;\n\n  if (value) {\n    // check if datetime has timezone, otherwise assumes it's UTC\n    datetime =\n      !value.match(/T/) || value.match(/T(.)*(-|\\+|Z)/g)\n        ? // Since we assume UTC everywhere, then transform to local (momentjs default)\n          moment(value)\n        : // This might happen in old Plone versions dates\n          moment(`${value}Z`);\n  }\n\n  if (format && datetime) {\n    return datetime.format(format);\n  }\n  return datetime;\n};\n\n/**\n * Converts a language code like pt-br to the format `pt_BR` (`lang_region`)\n * Useful for passing from Plone's i18n lang names to Xnix locale names\n * eg. LC_MESSAGES/lang_region.po filenames. Also used in the I18N_LANGUAGE cookie.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toGettextLang = (language) => {\n  if (language.includes('-')) {\n    let normalizedLang = language.split('-');\n    normalizedLang = `${normalizedLang[0]}_${normalizedLang[1].toUpperCase()}`;\n    return normalizedLang;\n  }\n\n  return language;\n};\nexport const normalizeLanguageName = toGettextLang;\n\n/**\n * Converts a language code like pt-br or pt_BR to the format `pt-BR`.\n * `react-intl` only supports this syntax. We also use it for the locales\n * in the volto Redux store.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toReactIntlLang = (language) => {\n  if (language.includes('_') || language.includes('-')) {\n    let langCode = language.split(/[-_]/);\n    langCode = `${langCode[0]}-${langCode[1].toUpperCase()}`;\n    return langCode;\n  }\n\n  return language;\n};\nexport const toLangUnderscoreRegion = toReactIntlLang; // old name for backwards-compat\n\n/**\n * Converts a language code like pt_BR or pt-BR to the format `pt-br`.\n * This format is used on the backend and in volto config settings.\n * @param {string} language Language to be converted\n * @returns {string} Language converted\n */\nexport const toBackendLang = (language) => {\n  return toReactIntlLang(language).toLowerCase();\n};\n\n/**\n * Lookup if a given expander is set in apiExpanders for the given path and action type\n * @param {string} expander The id literal of the expander eg. `navigation`\n * @param {string} path The path (no URL) to check if the expander has effect\n * @param {string} type The Redux action type\n * @returns {boolean} Return if the expander is present for the path and the type given\n */\nexport const hasApiExpander = (expander, path = '', type = 'GET_CONTENT') => {\n  return flatten(\n    config.settings.apiExpanders\n      .filter((expand) => matchPath(path, expand.match) && expand[type])\n      .map((expand) => expand[type]),\n  ).includes(expander);\n};\n\n/**\n * Insert element into array at a give index\n * @param {Array} array Array with data\n * @param {*} element Element to be inserted\n * @param {number} index Index of item to be inserted at\n * @returns {Array} Array with inserted element\n */\nexport const insertInArray = (array, element, index) => [\n  ...array.slice(0, index),\n  element,\n  ...array.slice(index),\n];\n\n/**\n * Replace element in array at a give index\n * @param {Array} array Array with data\n * @param {*} element Element to be replaced\n * @param {number} index Index of item to be replaced at\n * @returns {Array} Array with replaced element\n */\nexport const replaceItemOfArray = (array, index, value) =>\n  Object.assign([...array], { [index]: value });\n\n/**\n * Remove item from array at given index\n * @param {Array} array Array with data\n * @param {number} index Index of item to be removed\n * @returns {Array} Array without deleted element\n */\nexport const removeFromArray = (array, index) => {\n  let newArray = array.slice();\n  newArray.splice(index, 1);\n  return newArray;\n};\n\n/**\n * Moves an item from origin to target inside an array in an immutable way\n * @param {Array} array Array with data\n * @param {number} origin Index of item to be moved from\n * @param {number} target Index of item to be moved to\n * @returns {Array} Resultant array\n */\nexport const reorderArray = (array, origin, target) => {\n  const result = Array.from(array);\n  const [removed] = result.splice(origin, 1);\n  result.splice(target, 0, removed);\n\n  return result;\n};\n\n/**\n * Normalize (unicode) string to a normalized plain ascii string\n * @method normalizeString\n * @param {string} str The string to be normalized\n * @returns {string} Normalized plain ascii string\n */\nexport function normalizeString(str) {\n  return str.normalize('NFD').replace(/\\p{Diacritic}/gu, '');\n}\n\n/**\n * Slugify a string: remove whitespaces, special chars and replace with _\n * @param {string} string String to be slugified\n * @returns {string} Slugified string\n */\nexport const slugify = (string) => {\n  return string\n    .toLowerCase()\n    .replace(/[\\s-]+/g, '_')\n    .replace(/[^\\w]+/g, '');\n};\n\n/**\n * cloneDeep an object with support for JSX nodes on it\n * Somehow, in a browser it fails with a \"Illegal invocation\" error\n * but in node (Jest test) it doesn't. This does the trick.\n * @param {object} object object to be cloned\n * @returns {object} deep cloned object\n */\nexport const cloneDeepSchema = (object) => {\n  return cloneDeepWith(object, (value) => {\n    if (React.isValidElement(value)) {\n      // If a JSX valid element, just return it, do not try to deep clone it\n      return value;\n    }\n  });\n};\n\n/**\n * Creates an array given a range of numbers\n * @param {number} start start number from\n * @param {number} stop stop number at\n * @param {number} step step every each number in the sequence\n * @returns {array} The result, eg. [0, 1, 2, 3, 4]\n */\nexport const arrayRange = (start, stop, step) =>\n  Array.from(\n    { length: (stop - start) / step + 1 },\n    (value, index) => start + index * step,\n  );\n\n/**\n * Given an event target element returns if it's an interactive element\n * of the one in the list.\n * @param {node} element event.target element type\n * @returns {boolean} If it's an interactive element of the list\n */\nexport function isInteractiveElement(\n  element,\n  interactiveElements = [\n    'button',\n    'input',\n    'textarea',\n    'select',\n    'option',\n    'svg',\n    'path',\n  ],\n) {\n  if (interactiveElements.includes(element.tagName.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}