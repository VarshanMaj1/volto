{"ast":null,"code":"import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { hasNonValueOperation, hasDateOperation } from './utils';\nconst messages = defineMessages({\n  searchBlock: {\n    \"id\": \"Search block\",\n    \"defaultMessage\": \"Search block\"\n  },\n  controls: {\n    \"id\": \"Controls\",\n    \"defaultMessage\": \"Controls\"\n  },\n  baseSearchQuery: {\n    \"id\": \"Base search query\",\n    \"defaultMessage\": \"Base search query\"\n  },\n  sectionTitle: {\n    \"id\": \"Section title\",\n    \"defaultMessage\": \"Section title\"\n  },\n  headline: {\n    \"id\": \"Headline\",\n    \"defaultMessage\": \"Headline\"\n  },\n  searchInputPrompt: {\n    \"id\": \"Search input label\",\n    \"defaultMessage\": \"Search input label\"\n  },\n  showSearchInput: {\n    \"id\": \"Show search input?\",\n    \"defaultMessage\": \"Show search input?\"\n  },\n  showSearchButtonTitle: {\n    \"id\": \"Show search button?\",\n    \"defaultMessage\": \"Show search button?\"\n  },\n  showSearchButtonDescription: {\n    \"id\": \"The button presence disables the live search, the query is issued when you press ENTER\",\n    \"defaultMessage\": \"The button presence disables the live search, the query is issued when you press ENTER\"\n  },\n  searchButtonLabel: {\n    \"id\": \"Search button label\",\n    \"defaultMessage\": \"Search button label\"\n  },\n  searchButtonPlaceholder: {\n    \"id\": \"Search\",\n    \"defaultMessage\": \"Search\"\n  },\n  showSortOn: {\n    \"id\": \"Show sorting?\",\n    \"defaultMessage\": \"Show sorting?\"\n  },\n  sortOnOptions: {\n    \"id\": \"Sort on options\",\n    \"defaultMessage\": \"Sort on options\"\n  },\n  facets: {\n    \"id\": \"Facets\",\n    \"defaultMessage\": \"Facets\"\n  },\n  facet: {\n    \"id\": \"Facet\",\n    \"defaultMessage\": \"Facet\"\n  },\n  label: {\n    \"id\": \"Label\",\n    \"defaultMessage\": \"Label\"\n  },\n  field: {\n    \"id\": \"Field\",\n    \"defaultMessage\": \"Field\"\n  },\n  multipleChoices: {\n    \"id\": \"Multiple choices?\",\n    \"defaultMessage\": \"Multiple choices?\"\n  },\n  hideFacetTitle: {\n    \"id\": \"Hide facet?\",\n    \"defaultMessage\": \"Hide facet?\"\n  },\n  hideFacetDescription: {\n    \"id\": \"Hidden facets will still filter the results if proper parameters are passed in URLs\",\n    \"defaultMessage\": \"Hidden facets will still filter the results if proper parameters are passed in URLs\"\n  },\n  advancedFacetTitle: {\n    \"id\": \"Advanced facet?\",\n    \"defaultMessage\": \"Advanced facet?\"\n  },\n  advancedFacetDescription: {\n    \"id\": \"Advanced facets are initially hidden and displayed on demand\",\n    \"defaultMessage\": \"Advanced facets are initially hidden and displayed on demand\"\n  },\n  facetWidget: {\n    \"id\": \"Facet widget\",\n    \"defaultMessage\": \"Facet widget\"\n  },\n  views: {\n    \"id\": \"views\",\n    \"defaultMessage\": \"Views\"\n  },\n  availableViews: {\n    \"id\": \"availableViews\",\n    \"defaultMessage\": \"Available views\"\n  },\n  showTotalResults: {\n    \"id\": \"Show total results\",\n    \"defaultMessage\": \"Show total results\"\n  }\n});\nconst enhanceSchema = (originalSchema, formData) => {\n  var _activeItem;\n  const extensionName = 'facetWidgets';\n  const extensionType = 'type'; // property name in stored block data\n  const variations = config.blocks.blocksConfig.search.extensions[extensionName].types;\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionType];\n  let activeItem = variations === null || variations === void 0 ? void 0 : variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations === null || variations === void 0 ? void 0 : variations.find(item => item.isDefault);\n  const schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n  let schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeep(originalSchema),\n    formData\n  }) : cloneDeep(originalSchema);\n  return schema;\n};\nconst FacetSchema = ({\n  intl\n}) => ({\n  title: intl.formatMessage(messages.facet),\n  fieldsets: [{\n    id: 'default',\n    title: 'Default',\n    fields: ['title', 'field', 'type', 'hidden', 'advanced']\n  }],\n  properties: {\n    title: {\n      title: intl.formatMessage(messages.label)\n    },\n    field: {\n      title: intl.formatMessage(messages.field),\n      widget: 'select_querystring_field',\n      vocabulary: {\n        '@id': 'plone.app.vocabularies.MetadataFields'\n      },\n      filterOptions: options => {\n        // Only allows indexes that provide simple, fixed vocabularies.\n        // This should be improved, together with the facets. The querystring\n        // widget implementation should serve as inspiration for those dynamic\n        // types of facets.\n        return Object.assign({}, ...Object.keys(options).map(k => Object.keys(options[k].values || {}).length || hasNonValueOperation(options[k].operations) || hasDateOperation(options[k].operations) ? {\n          [k]: options[k]\n        } : {}));\n      }\n    },\n    multiple: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.multipleChoices),\n      default: false\n    },\n    hidden: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.hideFacetTitle),\n      default: false,\n      description: intl.formatMessage(messages.hideFacetDescription)\n    },\n    advanced: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.advancedFacetTitle),\n      default: false,\n      description: intl.formatMessage(messages.advancedFacetDescription)\n    },\n    type: {\n      title: intl.formatMessage(messages.facetWidget),\n      choices: config.blocks.blocksConfig.search.extensions.facetWidgets.types.map(({\n        id,\n        title\n      }) => [id, `${intl.formatMessage({\n        id: id,\n        defaultMessage: title\n      })}`]),\n      defaultValue: config.blocks.blocksConfig.search.extensions.facetWidgets.types.find(({\n        isDefault\n      }) => isDefault).id\n    }\n  },\n  required: ['field']\n});\n_c = FacetSchema;\nconst SearchSchema = ({\n  data = {},\n  intl\n}) => {\n  var _data$showSearchInput;\n  return {\n    title: intl.formatMessage(messages.searchBlock),\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['headline']\n    }, {\n      id: 'searchquery',\n      title: intl.formatMessage(messages.baseSearchQuery),\n      fields: ['query']\n    }, {\n      id: 'facets',\n      title: intl.formatMessage(messages.facets),\n      fields: ['facetsTitle', 'facets']\n    }, {\n      id: 'controls',\n      title: intl.formatMessage(messages.controls),\n      fields: ['showSortOn', ...(data.showSortOn ? ['sortOnOptions'] : []), 'showSearchInput', ...(((_data$showSearchInput = data.showSearchInput) !== null && _data$showSearchInput !== void 0 ? _data$showSearchInput : true) ? ['showSearchButton'] : []),\n      // ...(data.showSearchInput ? ['searchInputPrompt'] : []),\n      // ...(data.showSearchButton ? ['searchButtonLabel'] : []),\n      'showTotalResults']\n    }, {\n      id: 'views',\n      title: intl.formatMessage(messages.views),\n      fields: ['availableViews']\n    }],\n    properties: {\n      headline: {\n        title: intl.formatMessage(messages.headline)\n      },\n      searchInputPrompt: {\n        title: intl.formatMessage(messages.searchInputPrompt)\n      },\n      showSearchInput: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchInput),\n        default: true\n      },\n      showSearchButton: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchButtonTitle),\n        description: intl.formatMessage(messages.showSearchButtonDescription)\n      },\n      showTotalResults: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showTotalResults),\n        default: true\n      },\n      searchButtonLabel: {\n        title: intl.formatMessage(messages.searchButtonLabel),\n        placeholder: intl.formatMessage(messages.searchButtonPlaceholder)\n      },\n      showSortOn: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSortOn)\n      },\n      sortOnOptions: {\n        title: intl.formatMessage(messages.sortOnOptions),\n        widget: 'array'\n      },\n      facets: {\n        title: intl.formatMessage(messages.facets),\n        widget: 'object_list',\n        schema: FacetSchema({\n          intl\n        }),\n        schemaExtender: enhanceSchema\n      },\n      facetsTitle: {\n        title: intl.formatMessage(messages.sectionTitle)\n      },\n      query: {\n        title: 'Query'\n      },\n      availableViews: {\n        title: intl.formatMessage(messages.availableViews),\n        choices: config.blocks.blocksConfig.listing.variations.map(({\n          id,\n          title\n        }) => [id, title]),\n        widget: 'array'\n      }\n    },\n    required: []\n  };\n};\n_c2 = SearchSchema;\nexport default SearchSchema;\nvar _c, _c2;\n$RefreshReg$(_c, \"FacetSchema\");\n$RefreshReg$(_c2, \"SearchSchema\");","map":{"version":3,"names":["config","defineMessages","cloneDeep","hasNonValueOperation","hasDateOperation","messages","searchBlock","controls","baseSearchQuery","sectionTitle","headline","searchInputPrompt","showSearchInput","showSearchButtonTitle","showSearchButtonDescription","searchButtonLabel","searchButtonPlaceholder","showSortOn","sortOnOptions","facets","facet","label","field","multipleChoices","hideFacetTitle","hideFacetDescription","advancedFacetTitle","advancedFacetDescription","facetWidget","views","availableViews","showTotalResults","enhanceSchema","originalSchema","formData","_activeItem","extensionName","extensionType","variations","blocks","blocksConfig","search","extensions","types","activeItemName","activeItem","find","item","id","isDefault","schemaEnhancer","schema","FacetSchema","intl","title","formatMessage","fieldsets","fields","properties","widget","vocabulary","filterOptions","options","Object","assign","keys","map","k","values","length","operations","multiple","type","default","hidden","description","advanced","choices","facetWidgets","defaultMessage","defaultValue","required","_c","SearchSchema","data","_data$showSearchInput","showSearchButton","placeholder","schemaExtender","facetsTitle","query","listing","_c2","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/schema.js"],"sourcesContent":["import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { hasNonValueOperation, hasDateOperation } from './utils';\n\nconst messages = defineMessages({\n  searchBlock: {\n    id: 'Search block',\n    defaultMessage: 'Search block',\n  },\n  controls: {\n    id: 'Controls',\n    defaultMessage: 'Controls',\n  },\n  baseSearchQuery: {\n    id: 'Base search query',\n    defaultMessage: 'Base search query',\n  },\n  sectionTitle: {\n    id: 'Section title',\n    defaultMessage: 'Section title',\n  },\n  headline: {\n    id: 'Headline',\n    defaultMessage: 'Headline',\n  },\n  searchInputPrompt: {\n    id: 'Search input label',\n    defaultMessage: 'Search input label',\n  },\n  showSearchInput: {\n    id: 'Show search input?',\n    defaultMessage: 'Show search input?',\n  },\n  showSearchButtonTitle: {\n    id: 'Show search button?',\n    defaultMessage: 'Show search button?',\n  },\n  showSearchButtonDescription: {\n    id: 'The button presence disables the live search, the query is issued when you press ENTER',\n    defaultMessage:\n      'The button presence disables the live search, the query is issued when you press ENTER',\n  },\n  searchButtonLabel: {\n    id: 'Search button label',\n    defaultMessage: 'Search button label',\n  },\n  searchButtonPlaceholder: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  showSortOn: {\n    id: 'Show sorting?',\n    defaultMessage: 'Show sorting?',\n  },\n  sortOnOptions: {\n    id: 'Sort on options',\n    defaultMessage: 'Sort on options',\n  },\n  facets: {\n    id: 'Facets',\n    defaultMessage: 'Facets',\n  },\n  facet: {\n    id: 'Facet',\n    defaultMessage: 'Facet',\n  },\n  label: {\n    id: 'Label',\n    defaultMessage: 'Label',\n  },\n  field: {\n    id: 'Field',\n    defaultMessage: 'Field',\n  },\n  multipleChoices: {\n    id: 'Multiple choices?',\n    defaultMessage: 'Multiple choices?',\n  },\n  hideFacetTitle: {\n    id: 'Hide facet?',\n    defaultMessage: 'Hide facet?',\n  },\n  hideFacetDescription: {\n    id: 'Hidden facets will still filter the results if proper parameters are passed in URLs',\n    defaultMessage:\n      'Hidden facets will still filter the results if proper parameters are passed in URLs',\n  },\n  advancedFacetTitle: {\n    id: 'Advanced facet?',\n    defaultMessage: 'Advanced facet?',\n  },\n  advancedFacetDescription: {\n    id: 'Advanced facets are initially hidden and displayed on demand',\n    defaultMessage:\n      'Advanced facets are initially hidden and displayed on demand',\n  },\n  facetWidget: {\n    id: 'Facet widget',\n    defaultMessage: 'Facet widget',\n  },\n  views: {\n    id: 'views',\n    defaultMessage: 'Views',\n  },\n  availableViews: {\n    id: 'availableViews',\n    defaultMessage: 'Available views',\n  },\n  showTotalResults: {\n    id: 'Show total results',\n    defaultMessage: 'Show total results',\n  },\n});\n\nconst enhanceSchema = (originalSchema, formData) => {\n  const extensionName = 'facetWidgets';\n  const extensionType = 'type'; // property name in stored block data\n  const variations =\n    config.blocks.blocksConfig.search.extensions[extensionName].types;\n\n  const activeItemName = formData?.[extensionType];\n  let activeItem = variations?.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations?.find((item) => item.isDefault);\n\n  const schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData })\n    : cloneDeep(originalSchema);\n\n  return schema;\n};\n\nconst FacetSchema = ({ intl }) => ({\n  title: intl.formatMessage(messages.facet),\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'field', 'type', 'hidden', 'advanced'],\n    },\n  ],\n  properties: {\n    title: {\n      title: intl.formatMessage(messages.label),\n    },\n    field: {\n      title: intl.formatMessage(messages.field),\n      widget: 'select_querystring_field',\n      vocabulary: { '@id': 'plone.app.vocabularies.MetadataFields' },\n      filterOptions: (options) => {\n        // Only allows indexes that provide simple, fixed vocabularies.\n        // This should be improved, together with the facets. The querystring\n        // widget implementation should serve as inspiration for those dynamic\n        // types of facets.\n        return Object.assign(\n          {},\n          ...Object.keys(options).map((k) =>\n            Object.keys(options[k].values || {}).length ||\n            hasNonValueOperation(options[k].operations) ||\n            hasDateOperation(options[k].operations)\n              ? { [k]: options[k] }\n              : {},\n          ),\n        );\n      },\n    },\n    multiple: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.multipleChoices),\n      default: false,\n    },\n    hidden: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.hideFacetTitle),\n      default: false,\n      description: intl.formatMessage(messages.hideFacetDescription),\n    },\n    advanced: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.advancedFacetTitle),\n      default: false,\n      description: intl.formatMessage(messages.advancedFacetDescription),\n    },\n    type: {\n      title: intl.formatMessage(messages.facetWidget),\n      choices:\n        config.blocks.blocksConfig.search.extensions.facetWidgets.types.map(\n          ({ id, title }) => [\n            id,\n            `${intl.formatMessage({ id: id, defaultMessage: title })}`,\n          ],\n        ),\n      defaultValue:\n        config.blocks.blocksConfig.search.extensions.facetWidgets.types.find(\n          ({ isDefault }) => isDefault,\n        ).id,\n    },\n  },\n  required: ['field'],\n});\n\nconst SearchSchema = ({ data = {}, intl }) => {\n  return {\n    title: intl.formatMessage(messages.searchBlock),\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: ['headline'],\n      },\n      {\n        id: 'searchquery',\n        title: intl.formatMessage(messages.baseSearchQuery),\n        fields: ['query'],\n      },\n      {\n        id: 'facets',\n        title: intl.formatMessage(messages.facets),\n        fields: ['facetsTitle', 'facets'],\n      },\n      {\n        id: 'controls',\n        title: intl.formatMessage(messages.controls),\n        fields: [\n          'showSortOn',\n          ...(data.showSortOn ? ['sortOnOptions'] : []),\n          'showSearchInput',\n          ...(data.showSearchInput ?? true ? ['showSearchButton'] : []),\n          // ...(data.showSearchInput ? ['searchInputPrompt'] : []),\n          // ...(data.showSearchButton ? ['searchButtonLabel'] : []),\n          'showTotalResults',\n        ],\n      },\n      {\n        id: 'views',\n        title: intl.formatMessage(messages.views),\n        fields: ['availableViews'],\n      },\n    ],\n    properties: {\n      headline: {\n        title: intl.formatMessage(messages.headline),\n      },\n      searchInputPrompt: {\n        title: intl.formatMessage(messages.searchInputPrompt),\n      },\n      showSearchInput: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchInput),\n        default: true,\n      },\n      showSearchButton: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchButtonTitle),\n        description: intl.formatMessage(messages.showSearchButtonDescription),\n      },\n      showTotalResults: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showTotalResults),\n        default: true,\n      },\n      searchButtonLabel: {\n        title: intl.formatMessage(messages.searchButtonLabel),\n        placeholder: intl.formatMessage(messages.searchButtonPlaceholder),\n      },\n      showSortOn: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSortOn),\n      },\n      sortOnOptions: {\n        title: intl.formatMessage(messages.sortOnOptions),\n        widget: 'array',\n      },\n      facets: {\n        title: intl.formatMessage(messages.facets),\n        widget: 'object_list',\n        schema: FacetSchema({ intl }),\n        schemaExtender: enhanceSchema,\n      },\n      facetsTitle: {\n        title: intl.formatMessage(messages.sectionTitle),\n      },\n      query: {\n        title: 'Query',\n      },\n      availableViews: {\n        title: intl.formatMessage(messages.availableViews),\n        choices: config.blocks.blocksConfig.listing.variations.map(\n          ({ id, title }) => [id, title],\n        ),\n        widget: 'array',\n      },\n    },\n    required: [],\n  };\n};\n\nexport default SearchSchema;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Search block","defaultMessage":"Search block"},{"id":"Controls","defaultMessage":"Controls"},{"id":"Base search query","defaultMessage":"Base search query"},{"id":"Section title","defaultMessage":"Section title"},{"id":"Headline","defaultMessage":"Headline"},{"id":"Search input label","defaultMessage":"Search input label"},{"id":"Show search input?","defaultMessage":"Show search input?"},{"id":"Show search button?","defaultMessage":"Show search button?"},{"id":"The button presence disables the live search, the query is issued when you press ENTER","defaultMessage":"The button presence disables the live search, the query is issued when you press ENTER"},{"id":"Search button label","defaultMessage":"Search button label"},{"id":"Search","defaultMessage":"Search"},{"id":"Show sorting?","defaultMessage":"Show sorting?"},{"id":"Sort on options","defaultMessage":"Sort on options"},{"id":"Facets","defaultMessage":"Facets"},{"id":"Facet","defaultMessage":"Facet"},{"id":"Label","defaultMessage":"Label"},{"id":"Field","defaultMessage":"Field"},{"id":"Multiple choices?","defaultMessage":"Multiple choices?"},{"id":"Hide facet?","defaultMessage":"Hide facet?"},{"id":"Hidden facets will still filter the results if proper parameters are passed in URLs","defaultMessage":"Hidden facets will still filter the results if proper parameters are passed in URLs"},{"id":"Advanced facet?","defaultMessage":"Advanced facet?"},{"id":"Advanced facets are initially hidden and displayed on demand","defaultMessage":"Advanced facets are initially hidden and displayed on demand"},{"id":"Facet widget","defaultMessage":"Facet widget"},{"id":"views","defaultMessage":"Views"},{"id":"availableViews","defaultMessage":"Available views"},{"id":"Show total results","defaultMessage":"Show total results"}]}},"sourceType":"module","externalDependencies":[]}