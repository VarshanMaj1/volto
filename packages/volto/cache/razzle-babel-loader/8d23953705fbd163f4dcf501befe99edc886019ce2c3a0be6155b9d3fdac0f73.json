{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { serializeNodes, serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport config from '@plone/volto/registry';\nimport isEqual from 'lodash/isEqual';\nimport Slugger from 'github-slugger';\nimport { normalizeString } from '@plone/volto/helpers/Utils/Utils';\nconst TextBlockView = props => {\n  const {\n    id,\n    data,\n    styling = {}\n  } = props;\n  const {\n    value,\n    override_toc\n  } = data;\n  const metadata = props.metadata || props.properties;\n  const {\n    topLevelTargetElements\n  } = config.settings.slate;\n  const getAttributes = (node, path) => {\n    const res = _objectSpread({}, styling);\n    if (node.type && isEqual(path, [0])) {\n      if (topLevelTargetElements.includes(node.type) || override_toc) {\n        const text = serializeNodesToText((node === null || node === void 0 ? void 0 : node.children) || []);\n        const slug = Slugger.slug(normalizeString(text));\n        res.id = slug || id;\n      }\n    }\n    return res;\n  };\n  return serializeNodes(value, getAttributes, {\n    metadata: metadata\n  });\n};\n_c = TextBlockView;\nexport default TextBlockView;\nvar _c;\n$RefreshReg$(_c, \"TextBlockView\");","map":{"version":3,"names":["serializeNodes","serializeNodesToText","config","isEqual","Slugger","normalizeString","TextBlockView","props","id","data","styling","value","override_toc","metadata","properties","topLevelTargetElements","settings","slate","getAttributes","node","path","res","_objectSpread","type","includes","text","children","slug","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/TextBlockView.jsx"],"sourcesContent":["import {\n  serializeNodes,\n  serializeNodesToText,\n} from '@plone/volto-slate/editor/render';\nimport config from '@plone/volto/registry';\nimport isEqual from 'lodash/isEqual';\nimport Slugger from 'github-slugger';\nimport { normalizeString } from '@plone/volto/helpers/Utils/Utils';\n\nconst TextBlockView = (props) => {\n  const { id, data, styling = {} } = props;\n  const { value, override_toc } = data;\n  const metadata = props.metadata || props.properties;\n  const { topLevelTargetElements } = config.settings.slate;\n\n  const getAttributes = (node, path) => {\n    const res = { ...styling };\n    if (node.type && isEqual(path, [0])) {\n      if (topLevelTargetElements.includes(node.type) || override_toc) {\n        const text = serializeNodesToText(node?.children || []);\n        const slug = Slugger.slug(normalizeString(text));\n        res.id = slug || id;\n      }\n    }\n    return res;\n  };\n\n  return serializeNodes(value, getAttributes, { metadata: metadata });\n};\n\nexport default TextBlockView;\n"],"mappings":";AAAA,SACEA,cAAc,EACdC,oBAAoB,QACf,kCAAkC;AACzC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,SAASC,eAAe,QAAQ,kCAAkC;AAElE,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/B,MAAM;IAAEC,EAAE;IAAEC,IAAI;IAAEC,OAAO,GAAG,CAAC;EAAE,CAAC,GAAGH,KAAK;EACxC,MAAM;IAAEI,KAAK;IAAEC;EAAa,CAAC,GAAGH,IAAI;EACpC,MAAMI,QAAQ,GAAGN,KAAK,CAACM,QAAQ,IAAIN,KAAK,CAACO,UAAU;EACnD,MAAM;IAAEC;EAAuB,CAAC,GAAGb,MAAM,CAACc,QAAQ,CAACC,KAAK;EAExD,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IACpC,MAAMC,GAAG,GAAAC,aAAA,KAAQZ,OAAO,CAAE;IAC1B,IAAIS,IAAI,CAACI,IAAI,IAAIpB,OAAO,CAACiB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;MACnC,IAAIL,sBAAsB,CAACS,QAAQ,CAACL,IAAI,CAACI,IAAI,CAAC,IAAIX,YAAY,EAAE;QAC9D,MAAMa,IAAI,GAAGxB,oBAAoB,CAAC,CAAAkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,QAAQ,KAAI,EAAE,CAAC;QACvD,MAAMC,IAAI,GAAGvB,OAAO,CAACuB,IAAI,CAACtB,eAAe,CAACoB,IAAI,CAAC,CAAC;QAChDJ,GAAG,CAACb,EAAE,GAAGmB,IAAI,IAAInB,EAAE;MACrB;IACF;IACA,OAAOa,GAAG;EACZ,CAAC;EAED,OAAOrB,cAAc,CAACW,KAAK,EAAEO,aAAa,EAAE;IAAEL,QAAQ,EAAEA;EAAS,CAAC,CAAC;AACrE,CAAC;AAACe,EAAA,GAnBItB,aAAa;AAqBnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}