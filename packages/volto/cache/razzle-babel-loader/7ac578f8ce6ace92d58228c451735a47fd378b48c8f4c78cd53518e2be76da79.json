{"ast":null,"code":"import express from 'express';\nimport { generateSitemap, generateSitemapIndex, SITEMAP_BATCH_SIZE } from '@plone/volto/helpers/Sitemap/Sitemap';\nexport const sitemap = function (req, res, next) {\n  let start = 0;\n  let size = undefined;\n  const {\n    batch: batchStr\n  } = req.params;\n  if (batchStr !== undefined) {\n    const batch = parseInt(batchStr);\n    if (isNaN(batch) || batch === 0 || '' + batch !== batchStr) {\n      res.status(404);\n      // Some data, such as the internal API address, may be sensitive to be published\n      res.send(`Invalid sitemap name, use sitemap.xml.gz, or batched sitemapN.xml.gz where N is a positive integer.`);\n      return;\n    }\n    start = SITEMAP_BATCH_SIZE * (batch - 1);\n    size = SITEMAP_BATCH_SIZE;\n  }\n  generateSitemap(req, start, size).then(sitemap => {\n    if (Buffer.isBuffer(sitemap)) {\n      res.set('Content-Type', 'application/x-gzip');\n      res.set('Content-Disposition', `attachment; filename=\"sitemap${batchStr || ''}.xml.gz\"`);\n      res.send(sitemap);\n    } else {\n      var _sitemap$code;\n      // {\"errno\":-111, \"code\":\"ECONNREFUSED\", \"host\": ...}\n      res.status(500);\n      // Some data, such as the internal API address, may be sensitive to be published\n      res.send(`Sitemap generation error: ${(_sitemap$code = sitemap.code) !== null && _sitemap$code !== void 0 ? _sitemap$code : '-'}`);\n    }\n  });\n};\nexport const sitemapIndex = function (req, res, next) {\n  generateSitemapIndex(req).then(sitemapIndex => {\n    res.set('Content-Type', 'application/xml');\n    res.set('Content-Disposition', 'attachment; filename=\"sitemap-index.xml\"');\n    res.send(sitemapIndex);\n  });\n};\nexport const sitemapIndexCompatibility = function (req, res, next) {\n  generateSitemapIndex(req, true).then(sitemapIndex => {\n    res.set('Content-Type', 'application/x-gzip');\n    res.set('Content-Disposition', 'attachment; filename=\"sitemap.xml.gz\"');\n    res.send(sitemapIndex);\n  });\n};\nexport default function sitemapMiddleware() {\n  const middleware = express.Router();\n\n  // For backwards compatibility, and allow a graceful transition for\n  // sites that are already set up on the Google Search Console, we continue delivering\n  // the new batched sitemap under the old sitemap.xml.gz name.\n  middleware.all('**/sitemap.xml.gz', sitemapIndexCompatibility);\n  middleware.all('**/sitemap:batch.xml.gz', sitemap);\n  // For new setups, `sitemap-index.xml` should be added to the\n  // Google Search Console.\n  middleware.all('**/sitemap-index.xml', sitemapIndex);\n  middleware.id = 'sitemap.xml.gz';\n  return middleware;\n}","map":{"version":3,"names":["express","generateSitemap","generateSitemapIndex","SITEMAP_BATCH_SIZE","sitemap","req","res","next","start","size","undefined","batch","batchStr","params","parseInt","isNaN","status","send","then","Buffer","isBuffer","set","_sitemap$code","code","sitemapIndex","sitemapIndexCompatibility","sitemapMiddleware","middleware","Router","all","id"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/express-middleware/sitemap.js"],"sourcesContent":["import express from 'express';\nimport {\n  generateSitemap,\n  generateSitemapIndex,\n  SITEMAP_BATCH_SIZE,\n} from '@plone/volto/helpers/Sitemap/Sitemap';\n\nexport const sitemap = function (req, res, next) {\n  let start = 0;\n  let size = undefined;\n  const { batch: batchStr } = req.params;\n  if (batchStr !== undefined) {\n    const batch = parseInt(batchStr);\n    if (isNaN(batch) || batch === 0 || '' + batch !== batchStr) {\n      res.status(404);\n      // Some data, such as the internal API address, may be sensitive to be published\n      res.send(\n        `Invalid sitemap name, use sitemap.xml.gz, or batched sitemapN.xml.gz where N is a positive integer.`,\n      );\n      return;\n    }\n    start = SITEMAP_BATCH_SIZE * (batch - 1);\n    size = SITEMAP_BATCH_SIZE;\n  }\n  generateSitemap(req, start, size).then((sitemap) => {\n    if (Buffer.isBuffer(sitemap)) {\n      res.set('Content-Type', 'application/x-gzip');\n      res.set(\n        'Content-Disposition',\n        `attachment; filename=\"sitemap${batchStr || ''}.xml.gz\"`,\n      );\n      res.send(sitemap);\n    } else {\n      // {\"errno\":-111, \"code\":\"ECONNREFUSED\", \"host\": ...}\n      res.status(500);\n      // Some data, such as the internal API address, may be sensitive to be published\n      res.send(`Sitemap generation error: ${sitemap.code ?? '-'}`);\n    }\n  });\n};\n\nexport const sitemapIndex = function (req, res, next) {\n  generateSitemapIndex(req).then((sitemapIndex) => {\n    res.set('Content-Type', 'application/xml');\n    res.set('Content-Disposition', 'attachment; filename=\"sitemap-index.xml\"');\n    res.send(sitemapIndex);\n  });\n};\n\nexport const sitemapIndexCompatibility = function (req, res, next) {\n  generateSitemapIndex(req, true).then((sitemapIndex) => {\n    res.set('Content-Type', 'application/x-gzip');\n    res.set('Content-Disposition', 'attachment; filename=\"sitemap.xml.gz\"');\n    res.send(sitemapIndex);\n  });\n};\n\nexport default function sitemapMiddleware() {\n  const middleware = express.Router();\n\n  // For backwards compatibility, and allow a graceful transition for\n  // sites that are already set up on the Google Search Console, we continue delivering\n  // the new batched sitemap under the old sitemap.xml.gz name.\n  middleware.all('**/sitemap.xml.gz', sitemapIndexCompatibility);\n  middleware.all('**/sitemap:batch.xml.gz', sitemap);\n  // For new setups, `sitemap-index.xml` should be added to the\n  // Google Search Console.\n  middleware.all('**/sitemap-index.xml', sitemapIndex);\n  middleware.id = 'sitemap.xml.gz';\n  return middleware;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}