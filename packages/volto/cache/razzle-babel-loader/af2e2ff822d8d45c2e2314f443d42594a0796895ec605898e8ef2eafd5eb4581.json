{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/RegistryImageWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * RegistryImageWidget component.\n * @module components/manage/Widgets/RegistryImageWidget\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport loadable from '@loadable/component';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { toPublicURL } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\nconst imageMimetypes = ['image/png', 'image/jpeg', 'image/webp', 'image/jpg', 'image/gif', 'image/svg+xml'];\nconst Dropzone = loadable({\n  resolved: {},\n  chunkName() {\n    return \"react-dropzone\";\n  },\n  isReady(props) {\n    const key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import(/* webpackChunkName: \"react-dropzone\" */'react-dropzone'),\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    const id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-dropzone\");\n    }\n    return eval('require.resolve')(\"react-dropzone\");\n  }\n});\nconst messages = defineMessages({\n  releaseDrag: {\n    \"id\": \"Drop files here ...\",\n    \"defaultMessage\": \"Drop files here ...\"\n  },\n  editFile: {\n    \"id\": \"Drop file here to replace the existing file\",\n    \"defaultMessage\": \"Drop file here to replace the existing file\"\n  },\n  fileDrag: {\n    \"id\": \"Drop file here to upload a new file\",\n    \"defaultMessage\": \"Drop file here to upload a new file\"\n  },\n  replaceFile: {\n    \"id\": \"Replace existing file\",\n    \"defaultMessage\": \"Replace existing file\"\n  },\n  addNewFile: {\n    \"id\": \"Choose a file\",\n    \"defaultMessage\": \"Choose a file\"\n  }\n});\n\n/**\n * RegistryImageWidget component class.\n * @function RegistryImageWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst RegistryImageWidget = props => {\n  const {\n    id,\n    value,\n    onChange,\n    isDisabled\n  } = props;\n  const intl = useIntl();\n\n  // State to manage the preview image source\n  const {\n    0: previewSrc,\n    1: setPreviewSrc\n  } = useState(() => {\n    const fileName = value === null || value === void 0 ? void 0 : value.split(';')[0];\n    return fileName ? `${toPublicURL('/')}@@site-logo/${atob(fileName.replace('filenameb64:', ''))}` : '';\n  });\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = files => {\n    const file = files[0];\n    if (!validateFileUploadSize(file, intl.formatMessage)) return;\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, `filenameb64:${btoa(file.name)};datab64:${fields[3]}}`);\n    });\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setPreviewSrc(reader.result);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }), __jsx(Dropzone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, ({\n    getRootProps,\n    getInputProps,\n    isDragActive\n  }) => __jsx(\"div\", _extends({\n    className: \"file-widget-dropzone\"\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), isDragActive && __jsx(Dimmer, {\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 30\n    }\n  }), previewSrc ? __jsx(Image, {\n    className: \"image-preview\",\n    id: `field-${id}-image`,\n    size: \"small\",\n    src: previewSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }) : __jsx(\"div\", {\n    className: \"dropzone-placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, isDragActive ? __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.releaseDrag)) : value ? __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.editFile)) : __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.fileDrag))), __jsx(\"label\", {\n    className: \"label-file-widget-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, value ? intl.formatMessage(messages.replaceFile) : intl.formatMessage(messages.addNewFile)), __jsx(\"input\", _extends({}, getInputProps({\n    type: 'file',\n    style: {\n      display: 'none'\n    }\n  }), {\n    id: `field-${id}`,\n    name: id,\n    type: \"file\",\n    disabled: isDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  })))), __jsx(\"div\", {\n    className: \"field-file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, value && __jsx(Button, {\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    \"aria-label\": \"delete file\",\n    disabled: isDisabled,\n    onClick: () => {\n      onChange(id, '');\n      setPreviewSrc(''); // Clear the preview image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nRegistryImageWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nRegistryImageWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null\n};\nexport default injectIntl(RegistryImageWidget);","map":{"version":3,"names":["React","useState","PropTypes","Button","Image","Dimmer","readAsDataURL","injectIntl","deleteSVG","Icon","FormFieldWrapper","loadable","defineMessages","useIntl","toPublicURL","validateFileUploadSize","imageMimetypes","Dropzone","resolved","chunkName","isReady","props","key","resolve","__webpack_modules__","importAsync","requireAsync","then","requireSync","id","__webpack_require__","eval","require","resolveWeak","messages","releaseDrag","editFile","fileDrag","replaceFile","addNewFile","RegistryImageWidget","value","onChange","isDisabled","intl","previewSrc","setPreviewSrc","fileName","split","atob","replace","onDrop","files","file","formatMessage","data","fields","match","btoa","name","reader","FileReader","onload","result","includes","__jsx","_extends","__self","__source","_jsxFileName","lineNumber","columnNumber","getRootProps","getInputProps","isDragActive","className","active","size","src","type","style","display","disabled","icon","basic","onClick","propTypes","string","isRequired","title","description","required","bool","error","arrayOf","func","wrapped","defaultProps"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/RegistryImageWidget.jsx"],"sourcesContent":["/**\n * RegistryImageWidget component.\n * @module components/manage/Widgets/RegistryImageWidget\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport loadable from '@loadable/component';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { toPublicURL } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\n\nconst imageMimetypes = [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/jpg',\n  'image/gif',\n  'image/svg+xml',\n];\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  releaseDrag: {\n    id: 'Drop files here ...',\n    defaultMessage: 'Drop files here ...',\n  },\n  editFile: {\n    id: 'Drop file here to replace the existing file',\n    defaultMessage: 'Drop file here to replace the existing file',\n  },\n  fileDrag: {\n    id: 'Drop file here to upload a new file',\n    defaultMessage: 'Drop file here to upload a new file',\n  },\n  replaceFile: {\n    id: 'Replace existing file',\n    defaultMessage: 'Replace existing file',\n  },\n  addNewFile: {\n    id: 'Choose a file',\n    defaultMessage: 'Choose a file',\n  },\n});\n\n/**\n * RegistryImageWidget component class.\n * @function RegistryImageWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst RegistryImageWidget = (props) => {\n  const { id, value, onChange, isDisabled } = props;\n  const intl = useIntl();\n\n  // State to manage the preview image source\n  const [previewSrc, setPreviewSrc] = useState(() => {\n    const fileName = value?.split(';')[0];\n    return fileName\n      ? `${toPublicURL('/')}@@site-logo/${atob(\n          fileName.replace('filenameb64:', ''),\n        )}`\n      : '';\n  });\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = (files) => {\n    const file = files[0];\n    if (!validateFileUploadSize(file, intl.formatMessage)) return;\n\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, `filenameb64:${btoa(file.name)};datab64:${fields[3]}}`);\n    });\n\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setPreviewSrc(reader.result);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div className=\"file-widget-dropzone\" {...getRootProps()}>\n            {isDragActive && <Dimmer active></Dimmer>}\n            {previewSrc ? (\n              <Image\n                className=\"image-preview\"\n                id={`field-${id}-image`}\n                size=\"small\"\n                src={previewSrc}\n              />\n            ) : (\n              <div className=\"dropzone-placeholder\">\n                {isDragActive ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.releaseDrag)}\n                  </p>\n                ) : value ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.editFile)}\n                  </p>\n                ) : (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.fileDrag)}\n                  </p>\n                )}\n              </div>\n            )}\n            <label className=\"label-file-widget-input\">\n              {value\n                ? intl.formatMessage(messages.replaceFile)\n                : intl.formatMessage(messages.addNewFile)}\n            </label>\n            <input\n              {...getInputProps({\n                type: 'file',\n                style: { display: 'none' },\n              })}\n              id={`field-${id}`}\n              name={id}\n              type=\"file\"\n              disabled={isDisabled}\n            />\n          </div>\n        )}\n      </Dropzone>\n      <div className=\"field-file-name\">\n        {value && (\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            aria-label=\"delete file\"\n            disabled={isDisabled}\n            onClick={() => {\n              onChange(id, '');\n              setPreviewSrc(''); // Clear the preview image\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" />\n          </Button>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nRegistryImageWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nRegistryImageWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default injectIntl(RegistryImageWidget);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Drop files here ...","defaultMessage":"Drop files here ..."},{"id":"Drop file here to replace the existing file","defaultMessage":"Drop file here to replace the existing file"},{"id":"Drop file here to upload a new file","defaultMessage":"Drop file here to upload a new file"},{"id":"Replace existing file","defaultMessage":"Replace existing file"},{"id":"Choose a file","defaultMessage":"Choose a file"}]}},"sourceType":"module","externalDependencies":[]}