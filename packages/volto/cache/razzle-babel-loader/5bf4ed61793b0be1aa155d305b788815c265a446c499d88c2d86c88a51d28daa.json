{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport FormattedDate from '@plone/volto/components/theme/FormattedDate/FormattedDate';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    \"id\": \"This is a working copy of {title}\",\n    \"defaultMessage\": \"This is a working copy of {title}\"\n  },\n  workingCopyIs: {\n    \"id\": \"This has an ongoing working copy in {title}\",\n    \"defaultMessage\": \"This has an ongoing working copy in {title}\"\n  },\n  workingCopyCreatedBy: {\n    \"id\": \"Created by {creator} on {date}\",\n    \"defaultMessage\": \"Created by {creator} on {date}\"\n  }\n});\nconst WorkingCopyToastsFactory = props => {\n  _s();\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector(state => state.intl.locale);\n  const {\n    content\n  } = props;\n  const title = content === null || content === void 0 ? void 0 : content.title;\n  const working_copy = content === null || content === void 0 ? void 0 : content.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  useDeepCompareEffect(() => {\n    if (working_copy) {\n      let toastMessage, toastTitle;\n      if (content.working_copy_of) {\n        var _content$working_copy;\n        // I'm a working copy\n        toastMessage = messages.thisIsAWorkingCopyOf;\n        toastTitle = __jsx(Link, {\n          to: flattenToAppURL(content.working_copy_of['@id']),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }\n        }, (_content$working_copy = content.working_copy_of) === null || _content$working_copy === void 0 ? void 0 : _content$working_copy.title);\n      } else {\n        // I'm a baseline\n        toastMessage = messages.workingCopyIs;\n        toastTitle = __jsx(Link, {\n          to: flattenToAppURL(working_copy['@id']),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, working_copy === null || working_copy === void 0 ? void 0 : working_copy.title);\n      }\n      if (toast.isActive('workingcopyinfo')) {\n        toast.update('workingcopyinfo', {\n          render: __jsx(Toast, {\n            info: true,\n            title: intl.formatMessage(toastMessage, {\n              title: toastTitle\n            }),\n            content: intl.formatMessage(messages.workingCopyCreatedBy, {\n              creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n              date: __jsx(FormattedDate, {\n                date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n                format: dateOptions,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 19\n                }\n              })\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }\n          })\n        });\n      } else {\n        toast.info(__jsx(Toast, {\n          info: true,\n          title: intl.formatMessage(toastMessage, {\n            title: toastTitle\n          }),\n          content: intl.formatMessage(messages.workingCopyCreatedBy, {\n            creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n            date: __jsx(FormattedDate, {\n              date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n              format: dateOptions,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }\n            })\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }\n        }), {\n          toastId: 'workingcopyinfo',\n          autoClose: false,\n          closeButton: false,\n          transition: null\n        });\n      }\n    }\n    if (!working_copy) {\n      if (toast.isActive('workingcopyinfo')) {\n        toast.dismiss('workingcopyinfo');\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n  return null;\n};\n_s(WorkingCopyToastsFactory, \"/NYa8V5LW7Ik6OdrNG/7N0BmhdE=\", false, function () {\n  return [useIntl, useLocation, useSelector, useDeepCompareEffect];\n});\n_c = WorkingCopyToastsFactory;\nexport default WorkingCopyToastsFactory;\nvar _c;\n$RefreshReg$(_c, \"WorkingCopyToastsFactory\");","map":{"version":3,"names":["React","Link","toast","useSelector","useLocation","defineMessages","useIntl","Toast","flattenToAppURL","FormattedDate","useDeepCompareEffect","messages","thisIsAWorkingCopyOf","workingCopyIs","workingCopyCreatedBy","WorkingCopyToastsFactory","props","_s","intl","pathname","lang","state","locale","content","title","working_copy","dateOptions","year","month","day","toastMessage","toastTitle","working_copy_of","_content$working_copy","__jsx","to","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","isActive","update","render","info","formatMessage","creator","creator_name","date","created","format","toastId","autoClose","closeButton","transition","dismiss","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport FormattedDate from '@plone/volto/components/theme/FormattedDate/FormattedDate';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    id: 'This is a working copy of {title}',\n    defaultMessage: 'This is a working copy of {title}',\n  },\n  workingCopyIs: {\n    id: 'This has an ongoing working copy in {title}',\n    defaultMessage: 'This has an ongoing working copy in {title}',\n  },\n  workingCopyCreatedBy: {\n    id: 'Created by {creator} on {date}',\n    defaultMessage: 'Created by {creator} on {date}',\n  },\n});\n\nconst WorkingCopyToastsFactory = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector((state) => state.intl.locale);\n  const { content } = props;\n  const title = content?.title;\n  const working_copy = content?.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  useDeepCompareEffect(() => {\n    if (working_copy) {\n      let toastMessage, toastTitle;\n      if (content.working_copy_of) {\n        // I'm a working copy\n        toastMessage = messages.thisIsAWorkingCopyOf;\n        toastTitle = (\n          <Link to={flattenToAppURL(content.working_copy_of['@id'])}>\n            {content.working_copy_of?.title}\n          </Link>\n        );\n      } else {\n        // I'm a baseline\n        toastMessage = messages.workingCopyIs;\n        toastTitle = (\n          <Link to={flattenToAppURL(working_copy['@id'])}>\n            {working_copy?.title}\n          </Link>\n        );\n      }\n      if (toast.isActive('workingcopyinfo')) {\n        toast.update('workingcopyinfo', {\n          render: (\n            <Toast\n              info\n              title={intl.formatMessage(toastMessage, {\n                title: toastTitle,\n              })}\n              content={intl.formatMessage(messages.workingCopyCreatedBy, {\n                creator: working_copy?.creator_name,\n                date: (\n                  <FormattedDate\n                    date={working_copy?.created}\n                    format={dateOptions}\n                  />\n                ),\n              })}\n            />\n          ),\n        });\n      } else {\n        toast.info(\n          <Toast\n            info\n            title={intl.formatMessage(toastMessage, {\n              title: toastTitle,\n            })}\n            content={intl.formatMessage(messages.workingCopyCreatedBy, {\n              creator: working_copy?.creator_name,\n              date: (\n                <FormattedDate\n                  date={working_copy?.created}\n                  format={dateOptions}\n                />\n              ),\n            })}\n          />,\n          {\n            toastId: 'workingcopyinfo',\n            autoClose: false,\n            closeButton: false,\n            transition: null,\n          },\n        );\n      }\n    }\n    if (!working_copy) {\n      if (toast.isActive('workingcopyinfo')) {\n        toast.dismiss('workingcopyinfo');\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n\n  return null;\n};\n\nexport default WorkingCopyToastsFactory;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"This is a working copy of {title}","defaultMessage":"This is a working copy of {title}"},{"id":"This has an ongoing working copy in {title}","defaultMessage":"This has an ongoing working copy in {title}"},{"id":"Created by {creator} on {date}","defaultMessage":"Created by {creator} on {date}"}]}},"sourceType":"module","externalDependencies":[]}