{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport { isCursorAtBlockEnd } from '@plone/volto-slate/utils/selection';\nimport { getCurrentListItem } from '@plone/volto-slate/utils/lists';\nimport { createEmptyParagraph } from '@plone/volto-slate/utils/blocks';\nexport const breakListInWidget = editor => {\n  const {\n    insertBreak\n  } = editor;\n  editor.insertBreak = () => {\n    if (!(editor.selection && Range.isCollapsed(editor.selection))) {\n      insertBreak();\n      return false;\n    }\n    const {\n      slate\n    } = config.settings;\n    const {\n      anchor\n    } = editor.selection;\n    const ref = Editor.rangeRef(editor, editor.selection, {\n      affinity: 'inward'\n    });\n    const [listItem, listItemPath] = getCurrentListItem(editor);\n    if (listItem) {\n      if (Editor.string(editor, listItemPath)) {\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n          match: node => node.type === slate.listItemType,\n          always: true\n        });\n        return true;\n      }\n    }\n    const [parent] = Editor.parent(editor, anchor.path);\n    if (parent.type !== slate.listItemType || anchor.offset > 0) {\n      insertBreak();\n      return;\n    }\n    Editor.deleteBackward(editor, {\n      unit: 'line'\n    });\n    // also account for empty nodes [{text: ''}]\n    if (Editor.isEmpty(editor, parent)) {\n      Transforms.removeNodes(editor, {\n        at: ref.current\n      });\n      Transforms.insertNodes(editor, createEmptyParagraph(), {\n        at: [editor.children.length]\n      });\n      Transforms.select(editor, Editor.end(editor, []));\n      return true;\n    }\n    Transforms.removeNodes(editor, {\n      at: ref.current\n    });\n    if (isCursorAtBlockEnd(editor)) {\n      Editor.insertNode(editor, createEmptyParagraph());\n      return true;\n    }\n    return true;\n  };\n  return editor;\n};","map":{"version":3,"names":["Editor","Range","Transforms","config","isCursorAtBlockEnd","getCurrentListItem","createEmptyParagraph","breakListInWidget","editor","insertBreak","selection","isCollapsed","slate","settings","anchor","ref","rangeRef","affinity","listItem","listItemPath","string","splitNodes","at","match","node","type","listItemType","always","parent","path","offset","deleteBackward","unit","isEmpty","removeNodes","current","insertNodes","children","length","select","end","insertNode"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/extensions/breakListInWidget.js"],"sourcesContent":["import { Editor, Range, Transforms } from 'slate';\n\nimport config from '@plone/volto/registry';\nimport { isCursorAtBlockEnd } from '@plone/volto-slate/utils/selection';\nimport { getCurrentListItem } from '@plone/volto-slate/utils/lists';\nimport { createEmptyParagraph } from '@plone/volto-slate/utils/blocks';\n\nexport const breakListInWidget = (editor) => {\n  const { insertBreak } = editor;\n\n  editor.insertBreak = () => {\n    if (!(editor.selection && Range.isCollapsed(editor.selection))) {\n      insertBreak();\n      return false;\n    }\n\n    const { slate } = config.settings;\n    const { anchor } = editor.selection;\n\n    const ref = Editor.rangeRef(editor, editor.selection, {\n      affinity: 'inward',\n    });\n\n    const [listItem, listItemPath] = getCurrentListItem(editor);\n    if (listItem) {\n      if (Editor.string(editor, listItemPath)) {\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n          match: (node) => node.type === slate.listItemType,\n          always: true,\n        });\n\n        return true;\n      }\n    }\n\n    const [parent] = Editor.parent(editor, anchor.path);\n\n    if (parent.type !== slate.listItemType || anchor.offset > 0) {\n      insertBreak();\n      return;\n    }\n\n    Editor.deleteBackward(editor, { unit: 'line' });\n    // also account for empty nodes [{text: ''}]\n    if (Editor.isEmpty(editor, parent)) {\n      Transforms.removeNodes(editor, { at: ref.current });\n\n      Transforms.insertNodes(editor, createEmptyParagraph(), {\n        at: [editor.children.length],\n      });\n      Transforms.select(editor, Editor.end(editor, []));\n\n      return true;\n    }\n\n    Transforms.removeNodes(editor, { at: ref.current });\n\n    if (isCursorAtBlockEnd(editor)) {\n      Editor.insertNode(editor, createEmptyParagraph());\n      return true;\n    }\n    return true;\n  };\n\n  return editor;\n};\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,UAAU,QAAQ,OAAO;AAEjD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,kBAAkB,QAAQ,oCAAoC;AACvE,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE,OAAO,MAAMC,iBAAiB,GAAIC,MAAM,IAAK;EAC3C,MAAM;IAAEC;EAAY,CAAC,GAAGD,MAAM;EAE9BA,MAAM,CAACC,WAAW,GAAG,MAAM;IACzB,IAAI,EAAED,MAAM,CAACE,SAAS,IAAIT,KAAK,CAACU,WAAW,CAACH,MAAM,CAACE,SAAS,CAAC,CAAC,EAAE;MAC9DD,WAAW,CAAC,CAAC;MACb,OAAO,KAAK;IACd;IAEA,MAAM;MAAEG;IAAM,CAAC,GAAGT,MAAM,CAACU,QAAQ;IACjC,MAAM;MAAEC;IAAO,CAAC,GAAGN,MAAM,CAACE,SAAS;IAEnC,MAAMK,GAAG,GAAGf,MAAM,CAACgB,QAAQ,CAACR,MAAM,EAAEA,MAAM,CAACE,SAAS,EAAE;MACpDO,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAM,CAACC,QAAQ,EAAEC,YAAY,CAAC,GAAGd,kBAAkB,CAACG,MAAM,CAAC;IAC3D,IAAIU,QAAQ,EAAE;MACZ,IAAIlB,MAAM,CAACoB,MAAM,CAACZ,MAAM,EAAEW,YAAY,CAAC,EAAE;QACvCjB,UAAU,CAACmB,UAAU,CAACb,MAAM,EAAE;UAC5Bc,EAAE,EAAEd,MAAM,CAACE,SAAS;UACpBa,KAAK,EAAGC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKb,KAAK,CAACc,YAAY;UACjDC,MAAM,EAAE;QACV,CAAC,CAAC;QAEF,OAAO,IAAI;MACb;IACF;IAEA,MAAM,CAACC,MAAM,CAAC,GAAG5B,MAAM,CAAC4B,MAAM,CAACpB,MAAM,EAAEM,MAAM,CAACe,IAAI,CAAC;IAEnD,IAAID,MAAM,CAACH,IAAI,KAAKb,KAAK,CAACc,YAAY,IAAIZ,MAAM,CAACgB,MAAM,GAAG,CAAC,EAAE;MAC3DrB,WAAW,CAAC,CAAC;MACb;IACF;IAEAT,MAAM,CAAC+B,cAAc,CAACvB,MAAM,EAAE;MAAEwB,IAAI,EAAE;IAAO,CAAC,CAAC;IAC/C;IACA,IAAIhC,MAAM,CAACiC,OAAO,CAACzB,MAAM,EAAEoB,MAAM,CAAC,EAAE;MAClC1B,UAAU,CAACgC,WAAW,CAAC1B,MAAM,EAAE;QAAEc,EAAE,EAAEP,GAAG,CAACoB;MAAQ,CAAC,CAAC;MAEnDjC,UAAU,CAACkC,WAAW,CAAC5B,MAAM,EAAEF,oBAAoB,CAAC,CAAC,EAAE;QACrDgB,EAAE,EAAE,CAACd,MAAM,CAAC6B,QAAQ,CAACC,MAAM;MAC7B,CAAC,CAAC;MACFpC,UAAU,CAACqC,MAAM,CAAC/B,MAAM,EAAER,MAAM,CAACwC,GAAG,CAAChC,MAAM,EAAE,EAAE,CAAC,CAAC;MAEjD,OAAO,IAAI;IACb;IAEAN,UAAU,CAACgC,WAAW,CAAC1B,MAAM,EAAE;MAAEc,EAAE,EAAEP,GAAG,CAACoB;IAAQ,CAAC,CAAC;IAEnD,IAAI/B,kBAAkB,CAACI,MAAM,CAAC,EAAE;MAC9BR,MAAM,CAACyC,UAAU,CAACjC,MAAM,EAAEF,oBAAoB,CAAC,CAAC,CAAC;MACjD,OAAO,IAAI;IACb;IACA,OAAO,IAAI;EACb,CAAC;EAED,OAAOE,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}