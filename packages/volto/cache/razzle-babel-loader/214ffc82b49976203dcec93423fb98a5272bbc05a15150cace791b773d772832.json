{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/widgets/RichTextWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * A Slate widget that uses internal JSON representation as its value\n *\n */\n\nimport React from 'react';\nimport isUndefined from 'lodash/isUndefined';\nimport isString from 'lodash/isString';\nimport { FormFieldWrapper } from '@plone/volto/components/manage/Widgets';\nimport { handleKeyDetached } from '@plone/volto-slate/blocks/Text/keyboard';\nimport SlateEditor from '@plone/volto-slate/editor/SlateEditor';\nimport config from '@plone/volto/registry';\nimport { createEmptyParagraph, createParagraph } from '../utils/blocks';\nimport './style.css';\nconst getValue = value => {\n  if (isUndefined(value) || !isUndefined(value === null || value === void 0 ? void 0 : value.data)) {\n    return [createEmptyParagraph()];\n  }\n  // Previously this was a text field\n  if (isString(value)) {\n    return [createParagraph(value)];\n  }\n  return value;\n};\nconst SlateRichTextWidget = props => {\n  const {\n    id,\n    onChange,\n    value,\n    focus,\n    className,\n    block,\n    placeholder,\n    properties,\n    readOnly = false\n  } = props;\n  const [selected, setSelected] = React.useState(focus);\n  const {\n    slateWidgetExtensions\n  } = config.settings.slate;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    draggable: false,\n    className: \"slate_wysiwyg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"slate_wysiwyg_box\",\n    role: \"textbox\",\n    tabIndex: \"-1\",\n    style: {\n      boxSizing: 'initial'\n    },\n    onClick: () => {\n      setSelected(true);\n    },\n    onKeyDown: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(SlateEditor, {\n    className: className,\n    readOnly: readOnly,\n    id: id,\n    name: id,\n    value: getValue(value),\n    onChange: newValue => {\n      onChange(id, newValue);\n    },\n    block: block,\n    selected: selected,\n    properties: properties,\n    extensions: slateWidgetExtensions,\n    onKeyDown: handleKeyDetached,\n    placeholder: placeholder,\n    editableProps: {\n      'aria-multiline': 'true'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })));\n};\nexport default SlateRichTextWidget;","map":{"version":3,"names":["React","isUndefined","isString","FormFieldWrapper","handleKeyDetached","SlateEditor","config","createEmptyParagraph","createParagraph","getValue","value","data","SlateRichTextWidget","props","id","onChange","focus","className","block","placeholder","properties","readOnly","selected","setSelected","useState","slateWidgetExtensions","settings","slate","__jsx","_extends","draggable","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","role","tabIndex","style","boxSizing","onClick","onKeyDown","name","newValue","extensions","editableProps"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/widgets/RichTextWidget.jsx"],"sourcesContent":["/**\n * A Slate widget that uses internal JSON representation as its value\n *\n */\n\nimport React from 'react';\nimport isUndefined from 'lodash/isUndefined';\nimport isString from 'lodash/isString';\nimport { FormFieldWrapper } from '@plone/volto/components/manage/Widgets';\nimport { handleKeyDetached } from '@plone/volto-slate/blocks/Text/keyboard';\nimport SlateEditor from '@plone/volto-slate/editor/SlateEditor';\nimport config from '@plone/volto/registry';\n\nimport { createEmptyParagraph, createParagraph } from '../utils/blocks';\n\nimport './style.css';\n\nconst getValue = (value) => {\n  if (isUndefined(value) || !isUndefined(value?.data)) {\n    return [createEmptyParagraph()];\n  }\n  // Previously this was a text field\n  if (isString(value)) {\n    return [createParagraph(value)];\n  }\n  return value;\n};\n\nconst SlateRichTextWidget = (props) => {\n  const {\n    id,\n    onChange,\n    value,\n    focus,\n    className,\n    block,\n    placeholder,\n    properties,\n    readOnly = false,\n  } = props;\n  const [selected, setSelected] = React.useState(focus);\n  const { slateWidgetExtensions } = config.settings.slate;\n\n  return (\n    <FormFieldWrapper {...props} draggable={false} className=\"slate_wysiwyg\">\n      <div\n        className=\"slate_wysiwyg_box\"\n        role=\"textbox\"\n        tabIndex=\"-1\"\n        style={{ boxSizing: 'initial' }}\n        onClick={() => {\n          setSelected(true);\n        }}\n        onKeyDown={() => {}}\n      >\n        <SlateEditor\n          className={className}\n          readOnly={readOnly}\n          id={id}\n          name={id}\n          value={getValue(value)}\n          onChange={(newValue) => {\n            onChange(id, newValue);\n          }}\n          block={block}\n          selected={selected}\n          properties={properties}\n          extensions={slateWidgetExtensions}\n          onKeyDown={handleKeyDetached}\n          placeholder={placeholder}\n          editableProps={{ 'aria-multiline': 'true' }}\n        />\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\nexport default SlateRichTextWidget;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,iBAAiB,QAAQ,yCAAyC;AAC3E,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SAASC,oBAAoB,EAAEC,eAAe,QAAQ,iBAAiB;AAEvE,OAAO,aAAa;AAEpB,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,IAAIT,WAAW,CAACS,KAAK,CAAC,IAAI,CAACT,WAAW,CAACS,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,CAAC,EAAE;IACnD,OAAO,CAACJ,oBAAoB,CAAC,CAAC,CAAC;EACjC;EACA;EACA,IAAIL,QAAQ,CAACQ,KAAK,CAAC,EAAE;IACnB,OAAO,CAACF,eAAe,CAACE,KAAK,CAAC,CAAC;EACjC;EACA,OAAOA,KAAK;AACd,CAAC;AAED,MAAME,mBAAmB,GAAIC,KAAK,IAAK;EACrC,MAAM;IACJC,EAAE;IACFC,QAAQ;IACRL,KAAK;IACLM,KAAK;IACLC,SAAS;IACTC,KAAK;IACLC,WAAW;IACXC,UAAU;IACVC,QAAQ,GAAG;EACb,CAAC,GAAGR,KAAK;EACT,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,KAAK,CAACwB,QAAQ,CAACR,KAAK,CAAC;EACrD,MAAM;IAAES;EAAsB,CAAC,GAAGnB,MAAM,CAACoB,QAAQ,CAACC,KAAK;EAEvD,OACEC,KAAA,CAACzB,gBAAgB,EAAA0B,QAAA,KAAKhB,KAAK;IAAEiB,SAAS,EAAE,KAAM;IAACb,SAAS,EAAC,eAAe;IAAAc,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,IACtER,KAAA;IACEX,SAAS,EAAC,mBAAmB;IAC7BoB,IAAI,EAAC,SAAS;IACdC,QAAQ,EAAC,IAAI;IACbC,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAU,CAAE;IAChCC,OAAO,EAAEA,CAAA,KAAM;MACblB,WAAW,CAAC,IAAI,CAAC;IACnB,CAAE;IACFmB,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAE;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEpBR,KAAA,CAACvB,WAAW;IACVY,SAAS,EAAEA,SAAU;IACrBI,QAAQ,EAAEA,QAAS;IACnBP,EAAE,EAAEA,EAAG;IACP6B,IAAI,EAAE7B,EAAG;IACTJ,KAAK,EAAED,QAAQ,CAACC,KAAK,CAAE;IACvBK,QAAQ,EAAG6B,QAAQ,IAAK;MACtB7B,QAAQ,CAACD,EAAE,EAAE8B,QAAQ,CAAC;IACxB,CAAE;IACF1B,KAAK,EAAEA,KAAM;IACbI,QAAQ,EAAEA,QAAS;IACnBF,UAAU,EAAEA,UAAW;IACvByB,UAAU,EAAEpB,qBAAsB;IAClCiB,SAAS,EAAEtC,iBAAkB;IAC7Be,WAAW,EAAEA,WAAY;IACzB2B,aAAa,EAAE;MAAE,gBAAgB,EAAE;IAAO,CAAE;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC7C,CACE,CACW,CAAC;AAEvB,CAAC;AAED,eAAexB,mBAAmB","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}