{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/FileWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport { defineMessages, useIntl } from 'react-intl';\nconst imageMimetypes = ['image/png', 'image/jpeg', 'image/webp', 'image/jpg', 'image/gif', 'image/svg+xml'];\nconst Dropzone = loadable({\n  resolved: {},\n  chunkName() {\n    return \"react-dropzone\";\n  },\n  isReady(props) {\n    const key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import(/* webpackChunkName: \"react-dropzone\" */'react-dropzone'),\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    const id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-dropzone\");\n    }\n    return eval('require.resolve')(\"react-dropzone\");\n  }\n});\nconst messages = defineMessages({\n  releaseDrag: {\n    \"id\": \"Drop files here ...\",\n    \"defaultMessage\": \"Drop files here ...\"\n  },\n  editFile: {\n    \"id\": \"Drop file here to replace the existing file\",\n    \"defaultMessage\": \"Drop file here to replace the existing file\"\n  },\n  fileDrag: {\n    \"id\": \"Drop file here to upload a new file\",\n    \"defaultMessage\": \"Drop file here to upload a new file\"\n  },\n  replaceFile: {\n    \"id\": \"Replace existing file\",\n    \"defaultMessage\": \"Replace existing file\"\n  },\n  addNewFile: {\n    \"id\": \"Choose a file\",\n    \"defaultMessage\": \"Choose a file\"\n  }\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst FileWidget = props => {\n  const {\n    id,\n    value,\n    onChange,\n    isDisabled\n  } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n  const imgsrc = value !== null && value !== void 0 && value.download ? `${flattenToAppURL(value === null || value === void 0 ? void 0 : value.download)}?id=${Date.now()}` : null || value !== null && value !== void 0 && value.data ? `data:${value['content-type']};${value.encoding},${value.data}` : null;\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = files => {\n    const file = files[0];\n    if (!validateFileUploadSize(file, intl.formatMessage)) return;\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name\n      });\n    });\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        if (imagePreview) imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }), __jsx(Dropzone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, ({\n    getRootProps,\n    getInputProps,\n    isDragActive\n  }) => __jsx(\"div\", _extends({\n    className: \"file-widget-dropzone\"\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), isDragActive && __jsx(Dimmer, {\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 30\n    }\n  }), fileType ? __jsx(Image, {\n    className: \"image-preview\",\n    id: `field-${id}-image`,\n    size: \"small\",\n    src: imgsrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }) : __jsx(\"div\", {\n    className: \"dropzone-placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, isDragActive ? __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.releaseDrag)) : value ? __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.editFile)) : __jsx(\"p\", {\n    className: \"dropzone-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.fileDrag))), __jsx(\"label\", {\n    className: \"label-file-widget-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, value ? intl.formatMessage(messages.replaceFile) : intl.formatMessage(messages.addNewFile)), __jsx(\"input\", _extends({}, getInputProps({\n    type: 'file',\n    style: {\n      display: 'none'\n    }\n  }), {\n    id: `field-${id}`,\n    name: id,\n    type: \"file\",\n    disabled: isDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  })))), __jsx(\"div\", {\n    className: \"field-file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, value && __jsx(UniversalLink, {\n    href: value.download,\n    download: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, value.filename), value && __jsx(Button, {\n    type: \"button\",\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    \"aria-label\": \"delete file\",\n    disabled: isDisabled,\n    onClick: () => {\n      onChange(id, null);\n      setFileType(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null\n};\nexport default injectIntl(FileWidget);","map":{"version":3,"names":["React","PropTypes","Button","Image","Dimmer","readAsDataURL","injectIntl","deleteSVG","Icon","UniversalLink","FormFieldWrapper","loadable","flattenToAppURL","validateFileUploadSize","defineMessages","useIntl","imageMimetypes","Dropzone","resolved","chunkName","isReady","props","key","resolve","__webpack_modules__","importAsync","requireAsync","then","requireSync","id","__webpack_require__","eval","require","resolveWeak","messages","releaseDrag","editFile","fileDrag","replaceFile","addNewFile","FileWidget","value","onChange","isDisabled","fileType","setFileType","useState","intl","useEffect","includes","imgsrc","download","Date","now","data","encoding","onDrop","files","file","formatMessage","fields","match","filename","name","reader","FileReader","onload","result","imagePreview","document","getElementById","src","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","getRootProps","getInputProps","isDragActive","className","active","size","type","style","display","disabled","href","icon","basic","onClick","propTypes","string","isRequired","title","description","required","bool","error","arrayOf","shape","func","wrapped","defaultProps"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/FileWidget.jsx"],"sourcesContent":["/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { validateFileUploadSize } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst imageMimetypes = [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/jpg',\n  'image/gif',\n  'image/svg+xml',\n];\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  releaseDrag: {\n    id: 'Drop files here ...',\n    defaultMessage: 'Drop files here ...',\n  },\n  editFile: {\n    id: 'Drop file here to replace the existing file',\n    defaultMessage: 'Drop file here to replace the existing file',\n  },\n  fileDrag: {\n    id: 'Drop file here to upload a new file',\n    defaultMessage: 'Drop file here to upload a new file',\n  },\n  replaceFile: {\n    id: 'Replace existing file',\n    defaultMessage: 'Replace existing file',\n  },\n  addNewFile: {\n    id: 'Choose a file',\n    defaultMessage: 'Choose a file',\n  },\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst FileWidget = (props) => {\n  const { id, value, onChange, isDisabled } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n\n  const imgsrc = value?.download\n    ? `${flattenToAppURL(value?.download)}?id=${Date.now()}`\n    : null || value?.data\n      ? `data:${value['content-type']};${value.encoding},${value.data}`\n      : null;\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = (files) => {\n    const file = files[0];\n    if (!validateFileUploadSize(file, intl.formatMessage)) return;\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name,\n      });\n    });\n\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        if (imagePreview) imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div className=\"file-widget-dropzone\" {...getRootProps()}>\n            {isDragActive && <Dimmer active></Dimmer>}\n            {fileType ? (\n              <Image\n                className=\"image-preview\"\n                id={`field-${id}-image`}\n                size=\"small\"\n                src={imgsrc}\n              />\n            ) : (\n              <div className=\"dropzone-placeholder\">\n                {isDragActive ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.releaseDrag)}\n                  </p>\n                ) : value ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.editFile)}\n                  </p>\n                ) : (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.fileDrag)}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <label className=\"label-file-widget-input\">\n              {value\n                ? intl.formatMessage(messages.replaceFile)\n                : intl.formatMessage(messages.addNewFile)}\n            </label>\n            <input\n              {...getInputProps({\n                type: 'file',\n                style: { display: 'none' },\n              })}\n              id={`field-${id}`}\n              name={id}\n              type=\"file\"\n              disabled={isDisabled}\n            />\n          </div>\n        )}\n      </Dropzone>\n      <div className=\"field-file-name\">\n        {value && (\n          <UniversalLink href={value.download} download={true}>\n            {value.filename}\n          </UniversalLink>\n        )}\n        {value && (\n          <Button\n            type=\"button\"\n            icon\n            basic\n            className=\"delete-button\"\n            aria-label=\"delete file\"\n            disabled={isDisabled}\n            onClick={() => {\n              onChange(id, null);\n              setFileType(false);\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" />\n          </Button>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default injectIntl(FileWidget);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Drop files here ...","defaultMessage":"Drop files here ..."},{"id":"Drop file here to replace the existing file","defaultMessage":"Drop file here to replace the existing file"},{"id":"Drop file here to upload a new file","defaultMessage":"Drop file here to upload a new file"},{"id":"Replace existing file","defaultMessage":"Replace existing file"},{"id":"Choose a file","defaultMessage":"Choose a file"}]}},"sourceType":"module","externalDependencies":[]}