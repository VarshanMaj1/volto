{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Teaser/DefaultBody.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { isInternalURL } from '@plone/volto/helpers/Url/Url';\nimport MaybeWrap from '@plone/volto/components/manage/MaybeWrap/MaybeWrap';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    \"id\": \"Please choose an existing content as source for this element\",\n    \"defaultMessage\": \"Please choose an existing content as source for this element\"\n  }\n});\nconst TeaserDefaultTemplate = props => {\n  var _data$href, _data$preview_image, _data$preview_image2, _data$preview_image2$;\n  const {\n    className,\n    data,\n    isEditMode,\n    style\n  } = props;\n  const intl = useIntl();\n  const href = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : _data$href[0];\n  const image = (_data$preview_image = data.preview_image) === null || _data$preview_image === void 0 ? void 0 : _data$preview_image[0];\n  const url = (_data$preview_image2 = data.preview_image) === null || _data$preview_image2 === void 0 ? void 0 : (_data$preview_image2$ = _data$preview_image2[0]) === null || _data$preview_image2$ === void 0 ? void 0 : _data$preview_image2$['@id'];\n  const Image = config.getComponent('Image').component;\n  const {\n    openExternalLinkInNewTab\n  } = config.settings;\n  return __jsx(\"div\", {\n    className: cx('block teaser', className),\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, !href && isEditMode && __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"teaser-item placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: imageBlockSVG,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, intl.formatMessage(messages.PleaseChooseContent)))), href && __jsx(MaybeWrap, {\n    condition: !isEditMode,\n    as: UniversalLink,\n    href: href['@id'],\n    target: data.openLinkInNewTab || openExternalLinkInNewTab && !isInternalURL(href['@id']) ? '_blank' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"teaser-item default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, url && !(image !== null && image !== void 0 && image.image_field) ? __jsx(\"div\", {\n    className: \"image-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, __jsx(Image, {\n    src: url,\n    alt: \"\",\n    loading: \"lazy\",\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  })) : (href.hasPreviewImage || href.image_field || image) && __jsx(\"div\", {\n    className: \"image-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }, __jsx(Image, {\n    item: image || href,\n    imageField: image ? image.image_field : href.image_field,\n    alt: \"\",\n    loading: \"lazy\",\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, (data === null || data === void 0 ? void 0 : data.head_title) && __jsx(\"div\", {\n    className: \"headline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, data.head_title), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, data === null || data === void 0 ? void 0 : data.title), !data.hide_description && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 44\n    }\n  }, data === null || data === void 0 ? void 0 : data.description))))));\n};\nTeaserDefaultTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool\n};\nexport default TeaserDefaultTemplate;","map":{"version":3,"names":["React","PropTypes","Message","defineMessages","useIntl","imageBlockSVG","isInternalURL","MaybeWrap","UniversalLink","cx","config","messages","PleaseChooseContent","TeaserDefaultTemplate","props","_data$href","_data$preview_image","_data$preview_image2","_data$preview_image2$","className","data","isEditMode","style","intl","href","image","preview_image","url","Image","getComponent","component","openExternalLinkInNewTab","settings","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","src","alt","formatMessage","condition","as","target","openLinkInNewTab","image_field","loading","responsive","hasPreviewImage","item","imageField","head_title","title","hide_description","description","propTypes","objectOf","any","isRequired","bool"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Teaser/DefaultBody.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { isInternalURL } from '@plone/volto/helpers/Url/Url';\nimport MaybeWrap from '@plone/volto/components/manage/MaybeWrap/MaybeWrap';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    id: 'Please choose an existing content as source for this element',\n    defaultMessage:\n      'Please choose an existing content as source for this element',\n  },\n});\n\nconst TeaserDefaultTemplate = (props) => {\n  const { className, data, isEditMode, style } = props;\n  const intl = useIntl();\n  const href = data.href?.[0];\n  const image = data.preview_image?.[0];\n  const url = data.preview_image?.[0]?.['@id'];\n\n  const Image = config.getComponent('Image').component;\n  const { openExternalLinkInNewTab } = config.settings;\n\n  return (\n    <div className={cx('block teaser', className)} style={style}>\n      <>\n        {!href && isEditMode && (\n          <Message>\n            <div className=\"teaser-item placeholder\">\n              <img src={imageBlockSVG} alt=\"\" />\n              <p>{intl.formatMessage(messages.PleaseChooseContent)}</p>\n            </div>\n          </Message>\n        )}\n        {href && (\n          <MaybeWrap\n            condition={!isEditMode}\n            as={UniversalLink}\n            href={href['@id']}\n            target={\n              data.openLinkInNewTab ||\n              (openExternalLinkInNewTab && !isInternalURL(href['@id']))\n                ? '_blank'\n                : null\n            }\n          >\n            <div className=\"teaser-item default\">\n              {url && !image?.image_field ? (\n                <div className=\"image-wrapper\">\n                  <Image src={url} alt=\"\" loading=\"lazy\" responsive={true} />\n                </div>\n              ) : (\n                (href.hasPreviewImage || href.image_field || image) && (\n                  <div className=\"image-wrapper\">\n                    <Image\n                      item={image || href}\n                      imageField={image ? image.image_field : href.image_field}\n                      alt=\"\"\n                      loading=\"lazy\"\n                      responsive={true}\n                    />\n                  </div>\n                )\n              )}\n              <div className=\"content\">\n                {data?.head_title && (\n                  <div className=\"headline\">{data.head_title}</div>\n                )}\n                <h2>{data?.title}</h2>\n                {!data.hide_description && <p>{data?.description}</p>}\n              </div>\n            </div>\n          </MaybeWrap>\n        )}\n      </>\n    </div>\n  );\n};\n\nTeaserDefaultTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nexport default TeaserDefaultTemplate;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Please choose an existing content as source for this element","defaultMessage":"Please choose an existing content as source for this element"}]}},"sourceType":"module","externalDependencies":[]}