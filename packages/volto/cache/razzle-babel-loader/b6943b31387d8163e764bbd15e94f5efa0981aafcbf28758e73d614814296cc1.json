{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Extensions/withBlockSchemaEnhancer.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure \" + obj); }\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nconst messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const {\n    blocks\n  } = config;\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n  return blocks === null || blocks === void 0 ? void 0 : blocks.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description = '',\n  insertFieldToOrder = _addField\n}) => {\n  const _ = intl.formatMessage;\n  insertFieldToOrder(schema, name);\n  const hasDefaultExtension = (items === null || items === void 0 ? void 0 : items.findIndex(({\n    isDefault\n  }) => isDefault)) > -1;\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n  schema.properties[name] = {\n    title: _(title),\n    // TODO: is description sensible in here? The argument is not used anywhere\n    // description: _(description),\n    choices: items === null || items === void 0 ? void 0 : items.map(({\n      id,\n      title\n    }) => [id, _({\n      id: title,\n      defaultMessage: title\n    })]),\n    noValueOption: false,\n    default: hasDefaultExtension ? items === null || items === void 0 ? void 0 : items.find(item => item.isDefault).id : null\n  };\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (FormComponent, extensionName = 'vendor', insertFieldToOrder = _addField) => _ref => {\n  var _blocksConfig$blockTy, _blocksConfig$blockTy2, _extensionConfig$item, _extensionConfig$item2, _activeItem, _blocksConfig$blockTy3, _extensionConfig$item3;\n  let props = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n  const {\n    formData,\n    schema: originalSchema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const extensionConfig = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy = blocksConfig[blockType]) === null || _blocksConfig$blockTy === void 0 ? void 0 : (_blocksConfig$blockTy2 = _blocksConfig$blockTy.extensions) === null || _blocksConfig$blockTy2 === void 0 ? void 0 : _blocksConfig$blockTy2[extensionName];\n  if (!extensionConfig) return __jsx(FormComponent, _extends({}, props, {\n    schema: originalSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 14\n    }\n  }));\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionName];\n  let activeItem = (_extensionConfig$item = extensionConfig.items) === null || _extensionConfig$item === void 0 ? void 0 : _extensionConfig$item.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = (_extensionConfig$item2 = extensionConfig.items) === null || _extensionConfig$item2 === void 0 ? void 0 : _extensionConfig$item2.find(item => item.isDefault);\n  const schemaEnhancer =\n  // For the main \"variation\" of blocks, allow simply passing a\n  // schemaEnhancer in the block configuration\n  ((_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer']) || extensionName === 'variation' && (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy3 = blocksConfig[blockType]) === null || _blocksConfig$blockTy3 === void 0 ? void 0 : _blocksConfig$blockTy3.schemaEnhancer);\n  let schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema);\n  const {\n    title = messages.variation,\n    description\n  } = extensionConfig;\n  if (((_extensionConfig$item3 = extensionConfig.items) === null || _extensionConfig$item3 === void 0 ? void 0 : _extensionConfig$item3.length) > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder\n    });\n  }\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 12\n    }\n  }));\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n  navRoot,\n  contentType\n}) => {\n  var _blocksConfig$blockTy4, _activeItem2, _blocksConfig$blockTy6;\n  let schema, schemaEnhancer;\n  const blockType = formData['@type'];\n  const variations = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy4 = blocksConfig[blockType]) === null || _blocksConfig$blockTy4 === void 0 ? void 0 : _blocksConfig$blockTy4.variations) || [];\n  if (variations.length === 0) {\n    var _blocksConfig$blockTy5;\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy5 = blocksConfig[blockType]) === null || _blocksConfig$blockTy5 === void 0 ? void 0 : _blocksConfig$blockTy5.schemaEnhancer;\n    if (schemaEnhancer) schema = schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData,\n      intl,\n      navRoot,\n      contentType\n    });\n    return schema || originalSchema;\n  }\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n  let activeItem = variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find(item => item.isDefault);\n  schemaEnhancer = (_activeItem2 = activeItem) === null || _activeItem2 === void 0 ? void 0 : _activeItem2['schemaEnhancer'];\n  schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl,\n    navRoot,\n    contentType\n  }) : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy6 = blocksConfig[blockType]) === null || _blocksConfig$blockTy6 === void 0 ? void 0 : _blocksConfig$blockTy6.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({\n    schema,\n    formData,\n    intl,\n    navRoot,\n    contentType\n  });\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = FormComponent => props => {\n  var _blocksConfig$blockTy7;\n  const {\n    formData,\n    schema: originalSchema,\n    navRoot,\n    contentType\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const variations = ((_blocksConfig$blockTy7 = blocksConfig[blockType]) === null || _blocksConfig$blockTy7 === void 0 ? void 0 : _blocksConfig$blockTy7.variations) || [];\n  let schema = cloneDeepSchema(originalSchema);\n  if (variations.length > 1) {\n    schema = addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField\n    });\n  }\n  schema = applySchemaEnhancer({\n    schema,\n    formData,\n    intl,\n    blocksConfig,\n    navRoot,\n    contentType\n  });\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 10\n    }\n  }));\n};\nexport const EMPTY_STYLES_SCHEMA = {\n  fieldsets: [{\n    id: 'default',\n    title: 'Default',\n    fields: []\n  }],\n  properties: {},\n  required: []\n};\n\n/**\n * Adds the `styles` field and 'styling' fieldset in a given schema\n */\nexport const addStyling = ({\n  schema,\n  formData,\n  intl\n}) => {\n  if (isEmpty(find(schema.fieldsets, {\n    id: 'styling'\n  }))) {\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles']\n    });\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: cloneDeepSchema(EMPTY_STYLES_SCHEMA)\n    };\n  }\n  return schema;\n};\n\n/**\n * Allows compose-like declaration of schema enhancers\n *\n * Example usage:\n * const schemaEnhancer = composeSchema(schemaEnhancerA, schemaEnhancerB)\n *\n * where each enhancer is a function with signature\n * ({schema, formData, ...rest}) => schema\n *\n */\nexport function composeSchema() {\n  const enhancers = Array.from(arguments);\n  const composer = args => {\n    const props = enhancers.reduce((acc, enhancer) => enhancer ? _objectSpread(_objectSpread({}, acc), {}, {\n      schema: enhancer(acc)\n    }) : acc, _objectSpread({}, args));\n    return props.schema;\n  };\n  return composer;\n}","map":{"version":3,"names":["React","defineMessages","useIntl","find","isEmpty","config","cloneDeepSchema","messages","variation","styling","_addField","schema","name","fieldsets","fields","indexOf","unshift","getBlocksConfig","props","blocks","blocksConfig","addExtensionFieldToSchema","items","intl","title","description","insertFieldToOrder","_","formatMessage","hasDefaultExtension","findIndex","isDefault","console","warn","properties","choices","map","id","defaultMessage","noValueOption","default","item","withBlockSchemaEnhancer","FormComponent","extensionName","_ref","_blocksConfig$blockTy","_blocksConfig$blockTy2","_extensionConfig$item","_extensionConfig$item2","_activeItem","_blocksConfig$blockTy3","_extensionConfig$item3","Object","assign","_objectDestructuringEmpty","formData","originalSchema","blockType","extensionConfig","extensions","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","activeItemName","activeItem","schemaEnhancer","length","applySchemaEnhancer","navRoot","contentType","_blocksConfig$blockTy4","_activeItem2","_blocksConfig$blockTy6","variations","_blocksConfig$blockTy5","withVariationSchemaEnhancer","_blocksConfig$blockTy7","EMPTY_STYLES_SCHEMA","required","addStyling","push","styles","widget","composeSchema","enhancers","Array","from","arguments","composer","args","reduce","acc","enhancer","_objectSpread"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Extensions/withBlockSchemaEnhancer.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const { blocks } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks?.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description = '',\n  insertFieldToOrder = _addField,\n}) => {\n  const _ = intl.formatMessage;\n\n  insertFieldToOrder(schema, name);\n\n  const hasDefaultExtension =\n    items?.findIndex(({ isDefault }) => isDefault) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    // TODO: is description sensible in here? The argument is not used anywhere\n    // description: _(description),\n    choices: items?.map(({ id, title }) => [\n      id,\n      _({ id: title, defaultMessage: title }),\n    ]),\n    noValueOption: false,\n    default: hasDefaultExtension\n      ? items?.find((item) => item.isDefault).id\n      : null,\n  };\n\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer =\n  (FormComponent, extensionName = 'vendor', insertFieldToOrder = _addField) =>\n  ({ ...props }) => {\n    const { formData, schema: originalSchema } = props;\n    const intl = useIntl();\n\n    const blocksConfig = getBlocksConfig(props);\n\n    const blockType = formData['@type'];\n    const extensionConfig =\n      blocksConfig?.[blockType]?.extensions?.[extensionName];\n\n    if (!extensionConfig)\n      return <FormComponent {...props} schema={originalSchema} />;\n\n    const activeItemName = formData?.[extensionName];\n    let activeItem = extensionConfig.items?.find(\n      (item) => item.id === activeItemName,\n    );\n    if (!activeItem)\n      activeItem = extensionConfig.items?.find((item) => item.isDefault);\n\n    const schemaEnhancer =\n      // For the main \"variation\" of blocks, allow simply passing a\n      // schemaEnhancer in the block configuration\n      activeItem?.['schemaEnhancer'] ||\n      (extensionName === 'variation' &&\n        blocksConfig?.[blockType]?.schemaEnhancer);\n\n    let schema = schemaEnhancer\n      ? schemaEnhancer({\n          schema: cloneDeepSchema(originalSchema),\n          formData,\n          intl,\n        })\n      : cloneDeepSchema(originalSchema);\n\n    const { title = messages.variation, description } = extensionConfig;\n\n    if (extensionConfig.items?.length > 1) {\n      addExtensionFieldToSchema({\n        schema,\n        name: extensionName,\n        items: extensionConfig.items || [],\n        intl,\n        title,\n        description,\n        insertFieldToOrder,\n      });\n    }\n\n    return <FormComponent {...props} schema={schema} />;\n  };\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n  navRoot,\n  contentType,\n}) => {\n  let schema, schemaEnhancer;\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig?.[blockType]?.variations || [];\n\n  if (variations.length === 0) {\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n\n    if (schemaEnhancer)\n      schema = schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n        navRoot,\n        contentType,\n      });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData?.variation;\n  let activeItem = variations.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n  schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n        navRoot,\n        contentType,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n  if (schemaEnhancer)\n    schema = schemaEnhancer({ schema, formData, intl, navRoot, contentType });\n\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema: originalSchema, navRoot, contentType } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig[blockType]?.variations || [];\n\n  let schema = cloneDeepSchema(originalSchema);\n\n  if (variations.length > 1) {\n    schema = addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField,\n    });\n  }\n\n  schema = applySchemaEnhancer({\n    schema,\n    formData,\n    intl,\n    blocksConfig,\n    navRoot,\n    contentType,\n  });\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\nexport const EMPTY_STYLES_SCHEMA = {\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [],\n    },\n  ],\n  properties: {},\n  required: [],\n};\n\n/**\n * Adds the `styles` field and 'styling' fieldset in a given schema\n */\nexport const addStyling = ({ schema, formData, intl }) => {\n  if (isEmpty(find(schema.fieldsets, { id: 'styling' }))) {\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles'],\n    });\n\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: cloneDeepSchema(EMPTY_STYLES_SCHEMA),\n    };\n  }\n\n  return schema;\n};\n\n/**\n * Allows compose-like declaration of schema enhancers\n *\n * Example usage:\n * const schemaEnhancer = composeSchema(schemaEnhancerA, schemaEnhancerB)\n *\n * where each enhancer is a function with signature\n * ({schema, formData, ...rest}) => schema\n *\n */\nexport function composeSchema() {\n  const enhancers = Array.from(arguments);\n  const composer = (args) => {\n    const props = enhancers.reduce(\n      (acc, enhancer) => (enhancer ? { ...acc, schema: enhancer(acc) } : acc),\n      { ...args },\n    );\n    return props.schema;\n  };\n  return composer;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module","externalDependencies":[]}