{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Add/Add.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport keys from 'lodash/keys';\nimport isEmpty from 'lodash/isEmpty';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Button, Grid, Menu } from 'semantic-ui-react';\nimport { createPortal } from 'react-dom';\nimport { v4 as uuid } from 'uuid';\nimport qs from 'query-string';\nimport { toast } from 'react-toastify';\nimport { createContent } from '@plone/volto/actions/content/content';\nimport { getSchema } from '@plone/volto/actions/schema/schema';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { setFormData } from '@plone/volto/actions/form/form';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Sidebar from '@plone/volto/components/manage/Sidebar/Sidebar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport TranslationObject from '@plone/volto/components/manage/Multilingual/TranslationObject';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { getBaseUrl, flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { hasBlocksData, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers/Blocks/Blocks';\nimport { getLanguageIndependentFields } from '@plone/volto/helpers/Content/Content';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport { getSimpleDefaultBlocks, getDefaultBlocks } from '@plone/volto/helpers/Blocks/defaultBlocks';\nimport { tryParseJSON, extractInvariantErrors } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { preloadLazyLibs } from '@plone/volto/helpers/Loadable';\nimport config from '@plone/volto/registry';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add {type}\",\n    \"defaultMessage\": \"Add {type}\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  translateTo: {\n    \"id\": \"Translate to {lang}\",\n    \"defaultMessage\": \"Translate to {lang}\"\n  },\n  someErrors: {\n    \"id\": \"There are some errors.\",\n    \"defaultMessage\": \"There are some errors.\"\n  }\n});\n\n/**\n * Add class.\n * @class Add\n * @extends Component\n */\nclass Add extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      isClient: false,\n      error: null,\n      formSelected: 'addForm'\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.type, getBaseUrl(this.props.pathname));\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded && nextProps.content['@type'] === this.props.type) {\n      this.props.setFormData({});\n      this.props.history.push(this.props.returnUrl || flattenToAppURL(nextProps.content['@id']));\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      var _nextProps$createRequ, _nextProps$createRequ2, _nextProps$createRequ3, _DOMParser$parseFromS, _DOMParser$parseFromS2;\n      const message = ((_nextProps$createRequ = nextProps.createRequest.error.response) === null || _nextProps$createRequ === void 0 ? void 0 : (_nextProps$createRequ2 = _nextProps$createRequ.body) === null || _nextProps$createRequ2 === void 0 ? void 0 : _nextProps$createRequ2.message) || ((_nextProps$createRequ3 = nextProps.createRequest.error.response) === null || _nextProps$createRequ3 === void 0 ? void 0 : _nextProps$createRequ3.text);\n      const error = ((_DOMParser$parseFromS = new DOMParser().parseFromString(message, 'text/html')) === null || _DOMParser$parseFromS === void 0 ? void 0 : (_DOMParser$parseFromS2 = _DOMParser$parseFromS.all[0]) === null || _DOMParser$parseFromS2 === void 0 ? void 0 : _DOMParser$parseFromS2.textContent) || message;\n      const errorsList = tryParseJSON(error);\n      let erroMessage;\n      if (Array.isArray(errorsList)) {\n        const invariantErrors = extractInvariantErrors(errorsList);\n        if (invariantErrors.length > 0) {\n          // Plone invariant validation message.\n          erroMessage = invariantErrors.join(' - ');\n        } else {\n          // Error in specific field.\n          erroMessage = this.props.intl.formatMessage(messages.someErrors);\n        }\n      } else {\n        var _errorsList$error;\n        erroMessage = ((_errorsList$error = errorsList.error) === null || _errorsList$error === void 0 ? void 0 : _errorsList$error.message) || error;\n      }\n      this.setState({\n        error: error\n      });\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: erroMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    var _this$props$location, _this$props$location$;\n    this.props.createContent(getBaseUrl(this.props.pathname), _objectSpread(_objectSpread({}, data), {}, {\n      '@static_behaviors': this.props.schema.definitions ? keys(this.props.schema.definitions) : null,\n      '@type': this.props.type\n    }, config.settings.isMultilingual && ((_this$props$location = this.props.location) === null || _this$props$location === void 0 ? void 0 : (_this$props$location$ = _this$props$location.state) === null || _this$props$location$ === void 0 ? void 0 : _this$props$location$.translationOf) && {\n      translation_of: this.props.location.state.translationOf,\n      language: this.props.location.state.language\n    }));\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    var _this$props$location2, _this$props$location3;\n    this.props.setFormData({});\n    if ((_this$props$location2 = this.props.location) !== null && _this$props$location2 !== void 0 && (_this$props$location3 = _this$props$location2.state) !== null && _this$props$location3 !== void 0 && _this$props$location3.translationOf) {\n      var _this$props$location4, _this$props$location5;\n      const language = this.props.location.state.languageFrom;\n      const langFileName = toGettextLang(language);\n      import(/* @vite-ignore */'@root/../locales/' + langFileName + '.json').then(locale => {\n        this.props.changeLanguage(language, locale.default);\n      });\n      this.props.history.push((_this$props$location4 = this.props.location) === null || _this$props$location4 === void 0 ? void 0 : (_this$props$location5 = _this$props$location4.state) === null || _this$props$location5 === void 0 ? void 0 : _this$props$location5.translationOf);\n    } else {\n      this.props.history.push(getBaseUrl(this.props.pathname));\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.schemaRequest.loaded) {\n      var _this$props$location6, _this$props$location7, _langmap$this$props$l, _this$props$location8, _this$props$location9, _config$blocks, _this$props$schema$pr, _this$props$schema$pr2, _this$props$schema$pr3, _this$props$content, _this$props$content$, _this$props$content$$, _this$props$schema$pr4, _this$props$schema$pr5, _this$props$schema$pr6, _this$props$content2, _this$props, _this$props$schema;\n      const visual = hasBlocksData(this.props.schema.properties);\n      const blocksFieldname = getBlocksFieldname(this.props.schema.properties);\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(this.props.schema.properties);\n      const translationObject = (_this$props$location6 = this.props.location) === null || _this$props$location6 === void 0 ? void 0 : (_this$props$location7 = _this$props$location6.state) === null || _this$props$location7 === void 0 ? void 0 : _this$props$location7.translationObject;\n      const translateTo = translationObject ? langmap === null || langmap === void 0 ? void 0 : (_langmap$this$props$l = langmap[(_this$props$location8 = this.props.location) === null || _this$props$location8 === void 0 ? void 0 : (_this$props$location9 = _this$props$location8.state) === null || _this$props$location9 === void 0 ? void 0 : _this$props$location9.language]) === null || _langmap$this$props$l === void 0 ? void 0 : _langmap$this$props$l.nativeName : null;\n\n      // Get initial blocks from local config, if any\n      let initialBlocks, initialBlocksLayout;\n      const initialContentTypeBlocks = (_config$blocks = config.blocks) === null || _config$blocks === void 0 ? void 0 : _config$blocks.initialBlocks[this.props.type];\n      if (initialContentTypeBlocks) {\n        if (typeof (initialContentTypeBlocks === null || initialContentTypeBlocks === void 0 ? void 0 : initialContentTypeBlocks[0]) === 'string') {\n          // Simple (legacy) default blocks definition\n          [initialBlocks, initialBlocksLayout] = getSimpleDefaultBlocks(initialContentTypeBlocks);\n        } else {\n          [initialBlocks, initialBlocksLayout] = getDefaultBlocks(initialContentTypeBlocks);\n        }\n      }\n\n      // Lookup initialBlocks and initialBlocksLayout within schema, if any\n      const schemaBlocks = (_this$props$schema$pr = this.props.schema.properties[blocksFieldname]) === null || _this$props$schema$pr === void 0 ? void 0 : _this$props$schema$pr.default;\n      const schemaBlocksLayout = (_this$props$schema$pr2 = this.props.schema.properties[blocksLayoutFieldname]) === null || _this$props$schema$pr2 === void 0 ? void 0 : (_this$props$schema$pr3 = _this$props$schema$pr2.default) === null || _this$props$schema$pr3 === void 0 ? void 0 : _this$props$schema$pr3.items;\n      if (!isEmpty(schemaBlocksLayout) && !isEmpty(schemaBlocks)) {\n        initialBlocks = {};\n        initialBlocksLayout = [];\n        schemaBlocksLayout.forEach(value => {\n          if (!isEmpty(schemaBlocks[value])) {\n            let newUid = uuid();\n            initialBlocksLayout.push(newUid);\n            initialBlocks[newUid] = schemaBlocks[value];\n            initialBlocks[newUid].block = newUid;\n\n            // Layout ID - keep a reference to the original block id within layout\n            initialBlocks[newUid]['@layout'] = value;\n          }\n        });\n      }\n\n      //copy blocks from translationObject\n      if (translationObject && blocksFieldname && blocksLayoutFieldname) {\n        initialBlocks = {};\n        initialBlocksLayout = [];\n        const originalBlocks = JSON.parse(JSON.stringify(translationObject[blocksFieldname]));\n        const originalBlocksLayout = translationObject[blocksLayoutFieldname].items;\n        originalBlocksLayout.forEach(value => {\n          if (!isEmpty(originalBlocks[value])) {\n            let newUid = uuid();\n            initialBlocksLayout.push(newUid);\n            initialBlocks[newUid] = originalBlocks[value];\n            initialBlocks[newUid].block = newUid;\n\n            // Layout ID - keep a reference to the original block id within layout\n            initialBlocks[newUid]['@canonical'] = value;\n          }\n        });\n      }\n      const lifData = () => {\n        const data = {};\n        if (translationObject) {\n          getLanguageIndependentFields(this.props.schema).forEach(lif => data[lif] = translationObject[lif]);\n        }\n        return data;\n      };\n      const pageAdd = __jsx(\"div\", {\n        id: \"page-add\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.add, {\n          type: this.props.type\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }\n      }), __jsx(Form, {\n        ref: this.form,\n        key: \"translated-or-new-content-form\",\n        navRoot: ((_this$props$content = this.props.content) === null || _this$props$content === void 0 ? void 0 : (_this$props$content$ = _this$props$content['@components']) === null || _this$props$content$ === void 0 ? void 0 : (_this$props$content$$ = _this$props$content$.navroot) === null || _this$props$content$$ === void 0 ? void 0 : _this$props$content$$.navroot) || {},\n        schema: this.props.schema,\n        type: this.props.type,\n        formData: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, blocksFieldname && {\n          [blocksFieldname]: initialBlocks || ((_this$props$schema$pr4 = this.props.schema.properties[blocksFieldname]) === null || _this$props$schema$pr4 === void 0 ? void 0 : _this$props$schema$pr4.default)\n        }), blocksLayoutFieldname && {\n          [blocksLayoutFieldname]: {\n            items: initialBlocksLayout || ((_this$props$schema$pr5 = this.props.schema.properties[blocksLayoutFieldname]) === null || _this$props$schema$pr5 === void 0 ? void 0 : (_this$props$schema$pr6 = _this$props$schema$pr5.default) === null || _this$props$schema$pr6 === void 0 ? void 0 : _this$props$schema$pr6.items)\n          }\n        }), lifData()), {}, {\n          parent: {\n            '@id': ((_this$props$content2 = this.props.content) === null || _this$props$content2 === void 0 ? void 0 : _this$props$content2['@id']) || ''\n          }\n        }),\n        requestError: this.state.error,\n        onSubmit: this.onSubmit,\n        hideActions: true,\n        pathname: this.props.pathname,\n        visual: visual,\n        title: (_this$props = this.props) !== null && _this$props !== void 0 && (_this$props$schema = _this$props.schema) !== null && _this$props$schema !== void 0 && _this$props$schema.title ? this.props.intl.formatMessage(messages.add, {\n          type: this.props.schema.title\n        }) : null,\n        loading: this.props.createRequest.loading,\n        isFormSelected: this.state.formSelected === 'addForm',\n        onSelectForm: () => {\n          this.setState({\n            formSelected: 'addForm'\n          });\n        },\n        global: true\n        // Properties to pass to the BlocksForm to match the View ones\n        ,\n        history: this.props.history,\n        location: this.props.location,\n        token: this.props.token,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }\n      }), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          loading: this.props.createRequest.loading,\n          disabled: this.props.createRequest.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 23\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 15\n        }\n      }), document.getElementById('toolbar')), visual && this.state.isClient && /*#__PURE__*/createPortal(__jsx(Sidebar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 26\n        }\n      }), document.getElementById('sidebar')));\n      return translationObject ? __jsx(React.Fragment, null, __jsx(BodyClass, {\n        className: \"babel-view\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }\n      }), __jsx(Grid, {\n        celled: \"internally\",\n        stackable: true,\n        columns: 2,\n        id: \"page-add-translation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }\n      }, __jsx(Grid.Column, {\n        className: \"source-object\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }\n      }, __jsx(TranslationObject, {\n        translationObject: translationObject,\n        schema: this.props.schema,\n        pathname: this.props.pathname,\n        visual: visual,\n        isFormSelected: this.state.formSelected === 'translationObjectForm',\n        onSelectForm: () => {\n          this.setState({\n            formSelected: 'translationObjectForm'\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }\n      })), __jsx(Grid.Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        className: \"new-translation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 15\n        }\n      }, __jsx(Menu, {\n        pointing: true,\n        secondary: true,\n        attached: true,\n        tabular: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 17\n        }\n      }, __jsx(Menu.Item, {\n        name: translateTo.toUpperCase(),\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 19\n        }\n      }, `${this.props.intl.formatMessage(messages.translateTo, {\n        lang: translateTo\n      })}`)), pageAdd)))) : pageAdd;\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 12\n      }\n    });\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(Add, \"propTypes\", {\n  createContent: PropTypes.func.isRequired,\n  getSchema: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  schema: PropTypes.objectOf(PropTypes.any),\n  content: PropTypes.shape({\n    // eslint-disable-line react/no-unused-prop-types\n    '@id': PropTypes.string,\n    '@type': PropTypes.string\n  }),\n  returnUrl: PropTypes.string,\n  createRequest: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  schemaRequest: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  type: PropTypes.string,\n  location: PropTypes.objectOf(PropTypes.any)\n});\n/**\n * Default properties\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(Add, \"defaultProps\", {\n  schema: null,\n  content: null,\n  returnUrl: null,\n  type: 'Default'\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  createRequest: state.content.create,\n  schemaRequest: state.schema,\n  content: state.content.data,\n  schema: state.schema.schema,\n  pathname: props.location.pathname,\n  returnUrl: qs.parse(props.location.search).return_url,\n  type: qs.parse(props.location.search).type\n}), {\n  createContent,\n  getSchema,\n  changeLanguage,\n  setFormData\n}), preloadLazyLibs('cms'))(Add);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","keys","isEmpty","defineMessages","injectIntl","Button","Grid","Menu","createPortal","v4","uuid","qs","toast","createContent","getSchema","changeLanguage","setFormData","Icon","Toolbar","Sidebar","Toast","TranslationObject","Form","getBaseUrl","flattenToAppURL","hasBlocksData","getBlocksFieldname","getBlocksLayoutFieldname","getLanguageIndependentFields","langmap","toGettextLang","getSimpleDefaultBlocks","getDefaultBlocks","tryParseJSON","extractInvariantErrors","BodyClass","Helmet","preloadLazyLibs","config","saveSVG","clearSVG","messages","add","save","cancel","error","translateTo","someErrors","Add","constructor","props","_defineProperty","createRef","onCancel","bind","onSubmit","state","isClient","formSelected","componentDidMount","type","pathname","setState","UNSAFE_componentWillReceiveProps","nextProps","createRequest","loading","loaded","content","history","push","returnUrl","_nextProps$createRequ","_nextProps$createRequ2","_nextProps$createRequ3","_DOMParser$parseFromS","_DOMParser$parseFromS2","message","response","body","text","DOMParser","parseFromString","all","textContent","errorsList","erroMessage","Array","isArray","invariantErrors","length","join","intl","formatMessage","_errorsList$error","__jsx","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","data","_this$props$location","_this$props$location$","_objectSpread","schema","definitions","settings","isMultilingual","location","translationOf","translation_of","language","_this$props$location2","_this$props$location3","_this$props$location4","_this$props$location5","languageFrom","langFileName","then","locale","default","render","schemaRequest","_this$props$location6","_this$props$location7","_langmap$this$props$l","_this$props$location8","_this$props$location9","_config$blocks","_this$props$schema$pr","_this$props$schema$pr2","_this$props$schema$pr3","_this$props$content","_this$props$content$","_this$props$content$$","_this$props$schema$pr4","_this$props$schema$pr5","_this$props$schema$pr6","_this$props$content2","_this$props","_this$props$schema","visual","properties","blocksFieldname","blocksLayoutFieldname","translationObject","nativeName","initialBlocks","initialBlocksLayout","initialContentTypeBlocks","blocks","schemaBlocks","schemaBlocksLayout","items","forEach","value","newUid","block","originalBlocks","JSON","parse","stringify","originalBlocksLayout","lifData","lif","pageAdd","id","ref","form","key","navRoot","navroot","formData","parent","requestError","hideActions","isFormSelected","onSelectForm","global","token","hideDefaultViewButtons","inner","Fragment","className","onClick","current","disabled","name","size","document","getElementById","celled","stackable","columns","Column","pointing","secondary","attached","tabular","Item","toUpperCase","active","lang","func","isRequired","string","objectOf","any","shape","bool","create","search","return_url"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Add/Add.jsx"],"sourcesContent":["/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport keys from 'lodash/keys';\nimport isEmpty from 'lodash/isEmpty';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Button, Grid, Menu } from 'semantic-ui-react';\nimport { createPortal } from 'react-dom';\nimport { v4 as uuid } from 'uuid';\nimport qs from 'query-string';\nimport { toast } from 'react-toastify';\n\nimport { createContent } from '@plone/volto/actions/content/content';\nimport { getSchema } from '@plone/volto/actions/schema/schema';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { setFormData } from '@plone/volto/actions/form/form';\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Sidebar from '@plone/volto/components/manage/Sidebar/Sidebar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport TranslationObject from '@plone/volto/components/manage/Multilingual/TranslationObject';\nimport { Form } from '@plone/volto/components/manage/Form';\n\nimport { getBaseUrl, flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport {\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport { getLanguageIndependentFields } from '@plone/volto/helpers/Content/Content';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport {\n  getSimpleDefaultBlocks,\n  getDefaultBlocks,\n} from '@plone/volto/helpers/Blocks/defaultBlocks';\nimport {\n  tryParseJSON,\n  extractInvariantErrors,\n} from '@plone/volto/helpers/FormValidation/FormValidation';\nimport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\n\nimport { preloadLazyLibs } from '@plone/volto/helpers/Loadable';\n\nimport config from '@plone/volto/registry';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add {type}',\n    defaultMessage: 'Add {type}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  translateTo: {\n    id: 'Translate to {lang}',\n    defaultMessage: 'Translate to {lang}',\n  },\n  someErrors: {\n    id: 'There are some errors.',\n    defaultMessage: 'There are some errors.',\n  },\n});\n\n/**\n * Add class.\n * @class Add\n * @extends Component\n */\nclass Add extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    content: PropTypes.shape({\n      // eslint-disable-line react/no-unused-prop-types\n      '@id': PropTypes.string,\n      '@type': PropTypes.string,\n    }),\n    returnUrl: PropTypes.string,\n    createRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    type: PropTypes.string,\n    location: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n    content: null,\n    returnUrl: null,\n    type: 'Default',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      isClient: false,\n      error: null,\n      formSelected: 'addForm',\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.type, getBaseUrl(this.props.pathname));\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.createRequest.loading &&\n      nextProps.createRequest.loaded &&\n      nextProps.content['@type'] === this.props.type\n    ) {\n      this.props.setFormData({});\n      this.props.history.push(\n        this.props.returnUrl || flattenToAppURL(nextProps.content['@id']),\n      );\n    }\n\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      const message =\n        nextProps.createRequest.error.response?.body?.message ||\n        nextProps.createRequest.error.response?.text;\n\n      const error =\n        new DOMParser().parseFromString(message, 'text/html')?.all[0]\n          ?.textContent || message;\n\n      const errorsList = tryParseJSON(error);\n      let erroMessage;\n      if (Array.isArray(errorsList)) {\n        const invariantErrors = extractInvariantErrors(errorsList);\n        if (invariantErrors.length > 0) {\n          // Plone invariant validation message.\n          erroMessage = invariantErrors.join(' - ');\n        } else {\n          // Error in specific field.\n          erroMessage = this.props.intl.formatMessage(messages.someErrors);\n        }\n      } else {\n        erroMessage = errorsList.error?.message || error;\n      }\n\n      this.setState({ error: error });\n\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={erroMessage}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createContent(getBaseUrl(this.props.pathname), {\n      ...data,\n      '@static_behaviors': this.props.schema.definitions\n        ? keys(this.props.schema.definitions)\n        : null,\n      '@type': this.props.type,\n      ...(config.settings.isMultilingual &&\n        this.props.location?.state?.translationOf && {\n          translation_of: this.props.location.state.translationOf,\n          language: this.props.location.state.language,\n        }),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.setFormData({});\n    if (this.props.location?.state?.translationOf) {\n      const language = this.props.location.state.languageFrom;\n      const langFileName = toGettextLang(language);\n      import(\n        /* @vite-ignore */ '@root/../locales/' + langFileName + '.json'\n      ).then((locale) => {\n        this.props.changeLanguage(language, locale.default);\n      });\n      this.props.history.push(this.props.location?.state?.translationOf);\n    } else {\n      this.props.history.push(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.schemaRequest.loaded) {\n      const visual = hasBlocksData(this.props.schema.properties);\n      const blocksFieldname = getBlocksFieldname(this.props.schema.properties);\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.props.schema.properties,\n      );\n      const translationObject = this.props.location?.state?.translationObject;\n\n      const translateTo = translationObject\n        ? langmap?.[this.props.location?.state?.language]?.nativeName\n        : null;\n\n      // Get initial blocks from local config, if any\n      let initialBlocks, initialBlocksLayout;\n      const initialContentTypeBlocks =\n        config.blocks?.initialBlocks[this.props.type];\n      if (initialContentTypeBlocks) {\n        if (typeof initialContentTypeBlocks?.[0] === 'string') {\n          // Simple (legacy) default blocks definition\n          [initialBlocks, initialBlocksLayout] = getSimpleDefaultBlocks(\n            initialContentTypeBlocks,\n          );\n        } else {\n          [initialBlocks, initialBlocksLayout] = getDefaultBlocks(\n            initialContentTypeBlocks,\n          );\n        }\n      }\n\n      // Lookup initialBlocks and initialBlocksLayout within schema, if any\n      const schemaBlocks =\n        this.props.schema.properties[blocksFieldname]?.default;\n      const schemaBlocksLayout =\n        this.props.schema.properties[blocksLayoutFieldname]?.default?.items;\n\n      if (!isEmpty(schemaBlocksLayout) && !isEmpty(schemaBlocks)) {\n        initialBlocks = {};\n        initialBlocksLayout = [];\n        schemaBlocksLayout.forEach((value) => {\n          if (!isEmpty(schemaBlocks[value])) {\n            let newUid = uuid();\n            initialBlocksLayout.push(newUid);\n            initialBlocks[newUid] = schemaBlocks[value];\n            initialBlocks[newUid].block = newUid;\n\n            // Layout ID - keep a reference to the original block id within layout\n            initialBlocks[newUid]['@layout'] = value;\n          }\n        });\n      }\n\n      //copy blocks from translationObject\n      if (translationObject && blocksFieldname && blocksLayoutFieldname) {\n        initialBlocks = {};\n        initialBlocksLayout = [];\n        const originalBlocks = JSON.parse(\n          JSON.stringify(translationObject[blocksFieldname]),\n        );\n        const originalBlocksLayout =\n          translationObject[blocksLayoutFieldname].items;\n\n        originalBlocksLayout.forEach((value) => {\n          if (!isEmpty(originalBlocks[value])) {\n            let newUid = uuid();\n            initialBlocksLayout.push(newUid);\n            initialBlocks[newUid] = originalBlocks[value];\n            initialBlocks[newUid].block = newUid;\n\n            // Layout ID - keep a reference to the original block id within layout\n            initialBlocks[newUid]['@canonical'] = value;\n          }\n        });\n      }\n\n      const lifData = () => {\n        const data = {};\n        if (translationObject) {\n          getLanguageIndependentFields(this.props.schema).forEach(\n            (lif) => (data[lif] = translationObject[lif]),\n          );\n        }\n        return data;\n      };\n\n      const pageAdd = (\n        <div id=\"page-add\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.add, {\n              type: this.props.type,\n            })}\n          />\n          <Form\n            ref={this.form}\n            key=\"translated-or-new-content-form\"\n            navRoot={\n              this.props.content?.['@components']?.navroot?.navroot || {}\n            }\n            schema={this.props.schema}\n            type={this.props.type}\n            formData={{\n              ...(blocksFieldname && {\n                [blocksFieldname]:\n                  initialBlocks ||\n                  this.props.schema.properties[blocksFieldname]?.default,\n              }),\n              ...(blocksLayoutFieldname && {\n                [blocksLayoutFieldname]: {\n                  items:\n                    initialBlocksLayout ||\n                    this.props.schema.properties[blocksLayoutFieldname]?.default\n                      ?.items,\n                },\n              }),\n              // Copy the Language Independent Fields values from the to-be translated content\n              // into the default values of the translated content Add form.\n              ...lifData(),\n              parent: {\n                '@id': this.props.content?.['@id'] || '',\n              },\n            }}\n            requestError={this.state.error}\n            onSubmit={this.onSubmit}\n            hideActions\n            pathname={this.props.pathname}\n            visual={visual}\n            title={\n              this.props?.schema?.title\n                ? this.props.intl.formatMessage(messages.add, {\n                    type: this.props.schema.title,\n                  })\n                : null\n            }\n            loading={this.props.createRequest.loading}\n            isFormSelected={this.state.formSelected === 'addForm'}\n            onSelectForm={() => {\n              this.setState({ formSelected: 'addForm' });\n            }}\n            global\n            // Properties to pass to the BlocksForm to match the View ones\n            history={this.props.history}\n            location={this.props.location}\n            token={this.props.token}\n          />\n          {this.state.isClient &&\n            createPortal(\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      loading={this.props.createRequest.loading}\n                      disabled={this.props.createRequest.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button className=\"cancel\" onClick={() => this.onCancel()}>\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        aria-label={this.props.intl.formatMessage(\n                          messages.cancel,\n                        )}\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />,\n              document.getElementById('toolbar'),\n            )}\n          {visual &&\n            this.state.isClient &&\n            createPortal(<Sidebar />, document.getElementById('sidebar'))}\n        </div>\n      );\n\n      return translationObject ? (\n        <>\n          <BodyClass className=\"babel-view\" />\n          <Grid\n            celled=\"internally\"\n            stackable\n            columns={2}\n            id=\"page-add-translation\"\n          >\n            <Grid.Column className=\"source-object\">\n              <TranslationObject\n                translationObject={translationObject}\n                schema={this.props.schema}\n                pathname={this.props.pathname}\n                visual={visual}\n                isFormSelected={\n                  this.state.formSelected === 'translationObjectForm'\n                }\n                onSelectForm={() => {\n                  this.setState({\n                    formSelected: 'translationObjectForm',\n                  });\n                }}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <div className=\"new-translation\">\n                <Menu pointing secondary attached tabular>\n                  <Menu.Item name={translateTo.toUpperCase()} active={true}>\n                    {`${this.props.intl.formatMessage(messages.translateTo, {\n                      lang: translateTo,\n                    })}`}\n                  </Menu.Item>\n                </Menu>\n                {pageAdd}\n              </div>\n            </Grid.Column>\n          </Grid>\n        </>\n      ) : (\n        pageAdd\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      createRequest: state.content.create,\n      schemaRequest: state.schema,\n      content: state.content.data,\n      schema: state.schema.schema,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n      type: qs.parse(props.location.search).type,\n    }),\n    { createContent, getSchema, changeLanguage, setFormData },\n  ),\n  preloadLazyLibs('cms'),\n)(Add);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Add {type}","defaultMessage":"Add {type}"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Error","defaultMessage":"Error"},{"id":"Translate to {lang}","defaultMessage":"Translate to {lang}"},{"id":"There are some errors.","defaultMessage":"There are some errors."}]}},"sourceType":"module","externalDependencies":[]}