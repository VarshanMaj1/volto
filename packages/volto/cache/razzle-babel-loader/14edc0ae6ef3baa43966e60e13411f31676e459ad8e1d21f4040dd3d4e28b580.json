{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport { Button, Table } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport Cell from './Cell';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\nimport TableSchema from './schema';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{\n    type: 'p',\n    children: [{\n      text: ''\n    }]\n  }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph()\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = cells => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell())\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [{\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }]\n  }, {\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }]\n  }]\n};\nconst messages = defineMessages({\n  insertRowBefore: {\n    \"id\": \"Insert row before\",\n    \"defaultMessage\": \"Insert row before\"\n  },\n  insertRowAfter: {\n    \"id\": \"Insert row after\",\n    \"defaultMessage\": \"Insert row after\"\n  },\n  deleteRow: {\n    \"id\": \"Delete row\",\n    \"defaultMessage\": \"Delete row\"\n  },\n  insertColBefore: {\n    \"id\": \"Insert col before\",\n    \"defaultMessage\": \"Insert col before\"\n  },\n  insertColAfter: {\n    \"id\": \"Insert col after\",\n    \"defaultMessage\": \"Insert col after\"\n  },\n  deleteCol: {\n    \"id\": \"Delete col\",\n    \"defaultMessage\": \"Delete col\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  bottom: {\n    \"id\": \"Bottom\",\n    \"defaultMessage\": \"Bottom\"\n  },\n  middle: {\n    \"id\": \"Middle\",\n    \"defaultMessage\": \"Middle\"\n  },\n  top: {\n    \"id\": \"Top\",\n    \"defaultMessage\": \"Top\"\n  }\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0\n      },\n      isClient: false\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table || isEmpty(this.props.data.table)) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: initialTable\n      }));\n    }\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table || isEmpty(nextProps.data.table)) {\n      this.props.onChangeBlock(nextProps.block, _objectSpread(_objectSpread({}, nextProps.data), {}, {\n        table: initialTable\n      }));\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        [id]: value\n      })\n    }));\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({\n      selected: {\n        row,\n        cell\n      }\n    });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = _objectSpread(_objectSpread({}, table.rows[row].cells[cell]), {}, {\n      value: JSON.parse(JSON.stringify(slateValue))\n    });\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table\n    }));\n  }\n\n  /**\n   * Toggle cell type (from header to data or reverse)\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n  toggleCellType() {\n    const table = _objectSpread({}, this.props.data.table);\n    let type = table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type = type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table\n    }));\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row)]\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell\n      }\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row + 1), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row + 1)]\n      })\n    }));\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell)]\n        }))\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1\n      }\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell + 1), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell + 1)]\n        }))\n      })\n    }));\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1\n        }\n      });\n    }\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: map(table.rows, row => _objectSpread(_objectSpread({}, row), {}, {\n          cells: remove(row.cells, (cell, index) => index !== this.state.selected.cell)\n        }))\n      })\n    }));\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell\n        }\n      });\n    }\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: remove(table.rows, (row, index) => index !== this.state.selected.row)\n      })\n    }));\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({\n        selected: null\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$data$tabl, _this$props$data$tabl2, _this$props$data$tabl3, _this$props$data$tabl4, _this$props$data$tabl5, _this$props$data$tabl6, _this$props$data$tabl7, _this$props$data$tabl8, _this$props$data$tabl9;\n    const headers = ((_this$props$data$tabl = this.props.data.table) === null || _this$props$data$tabl === void 0 ? void 0 : (_this$props$data$tabl2 = _this$props$data$tabl.rows) === null || _this$props$data$tabl2 === void 0 ? void 0 : (_this$props$data$tabl3 = _this$props$data$tabl2[0]) === null || _this$props$data$tabl3 === void 0 ? void 0 : _this$props$data$tabl3.cells) || [];\n    const rows = ((_this$props$data$tabl4 = this.props.data.table) === null || _this$props$data$tabl4 === void 0 ? void 0 : (_this$props$data$tabl5 = _this$props$data$tabl4.rows) === null || _this$props$data$tabl5 === void 0 ? void 0 : _this$props$data$tabl5.filter((_, index) => index > 0)) || [];\n    const schema = TableSchema(this.props);\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      __jsx(\"div\", {\n        className: cx('block table', {\n          selected: this.props.selected\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 7\n        }\n      }, this.props.selected && __jsx(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }\n      }, __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowBefore,\n        title: this.props.intl.formatMessage(messages.insertRowBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowAfter,\n        title: this.props.intl.formatMessage(messages.insertRowAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteRow,\n        disabled: ((_this$props$data$tabl6 = this.props.data.table) === null || _this$props$data$tabl6 === void 0 ? void 0 : (_this$props$data$tabl7 = _this$props$data$tabl6.rows) === null || _this$props$data$tabl7 === void 0 ? void 0 : _this$props$data$tabl7.length) === 1,\n        title: this.props.intl.formatMessage(messages.deleteRow),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteRow),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColBefore,\n        title: this.props.intl.formatMessage(messages.insertColBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColAfter,\n        title: this.props.intl.formatMessage(messages.insertColAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteCol,\n        disabled: ((_this$props$data$tabl8 = this.props.data.table) === null || _this$props$data$tabl8 === void 0 ? void 0 : (_this$props$data$tabl9 = _this$props$data$tabl8.rows) === null || _this$props$data$tabl9 === void 0 ? void 0 : _this$props$data$tabl9[0].cells.length) === 1,\n        title: this.props.intl.formatMessage(messages.deleteCol),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteCol),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 17\n        }\n      })))), this.props.data.table && __jsx(Table, {\n        fixed: this.props.data.table.fixed,\n        compact: this.props.data.table.compact,\n        basic: this.props.data.table.basic ? 'very' : false,\n        celled: this.props.data.table.celled,\n        inverted: this.props.data.table.inverted,\n        striped: this.props.data.table.striped,\n        className: \"slate-table-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }\n      }, !this.props.data.table.hideHeaders ? __jsx(Table.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 15\n        }\n      }, __jsx(Table.Row, {\n        textAlign: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 17\n        }\n      }, headers.map((cell, cellIndex) => __jsx(Table.HeaderCell, {\n        key: cell.key,\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 21\n        }\n      }, __jsx(Cell, {\n        value: cell.value,\n        row: 0,\n        cell: cellIndex,\n        onSelectCell: this.onSelectCell,\n        selected: this.props.selected && this.state.selected && 0 === this.state.selected.row && cellIndex === this.state.selected.cell,\n        selectedCell: this.state.selected,\n        isTableBlockSelected: this.props.selected,\n        onAddBlock: this.props.onAddBlock,\n        onSelectBlock: this.props.onSelectBlock,\n        onChange: this.onChangeCell,\n        index: this.props.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 23\n        }\n      }))))) : '', __jsx(Table.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }\n      }, map(rows, (row, rowIndex) => __jsx(Table.Row, {\n        key: row.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 17\n        }\n      }, map(row.cells, (cell, cellIndex) => __jsx(Table.Cell, {\n        key: cell.key,\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        className: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell && this.props.selected ? 'selected' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 21\n        }\n      }, __jsx(Cell, {\n        value: cell.value,\n        row: rowIndex + 1,\n        cell: cellIndex,\n        onSelectCell: this.onSelectCell,\n        selected: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell,\n        selectedCell: this.state.selected,\n        isTableBlockSelected: this.props.selected,\n        onAddBlock: this.props.onAddBlock,\n        onSelectBlock: this.props.onSelectBlock,\n        onChange: this.onChangeCell,\n        index: this.props.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 23\n        }\n      }))))))), this.props.selected && this.state.selected && this.state.isClient && __jsx(SidebarPortal, {\n        selected: this.props.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }\n      }, __jsx(BlockDataForm, {\n        schema: schema,\n        title: schema.title,\n        onChangeField: (id, value) => {\n          this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n            [id]: value\n          }));\n        },\n        onChangeBlock: this.props.onChangeBlock,\n        formData: this.props.data,\n        block: this.props.block,\n        blocksConfig: this.props.blocksConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }\n      })))\n    );\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(Edit, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired\n});\n/**\n * Default properties\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(Edit, \"defaultProps\", {\n  detached: false\n});\nexport default injectIntl(Edit);","map":{"version":3,"names":["React","Component","PropTypes","isEmpty","map","remove","Button","Table","cx","defineMessages","injectIntl","Cell","Icon","SidebarPortal","BlockDataForm","TableSchema","rowBeforeSVG","rowAfterSVG","colBeforeSVG","colAfterSVG","rowDeleteSVG","colDeleteSVG","getId","Math","floor","random","pow","toString","getEmptyParagraph","type","children","text","emptyCell","key","value","emptyRow","cells","initialTable","hideHeaders","fixed","compact","basic","celled","inverted","striped","rows","messages","insertRowBefore","insertRowAfter","deleteRow","insertColBefore","insertColAfter","deleteCol","left","center","right","bottom","middle","top","Edit","constructor","props","state","headers","selected","row","cell","isClient","onChange","bind","onSelectCell","onInsertRowBefore","onInsertRowAfter","onInsertColBefore","onInsertColAfter","onDeleteRow","onDeleteCol","onChangeCell","toggleCellType","componentDidMount","data","table","onChangeBlock","block","_objectSpread","setState","UNSAFE_componentWillReceiveProps","nextProps","id","slateValue","JSON","parse","stringify","slice","index","length","componentDidUpdate","prevProps","render","_this$props$data$tabl","_this$props$data$tabl2","_this$props$data$tabl3","_this$props$data$tabl4","_this$props$data$tabl5","_this$props$data$tabl6","_this$props$data$tabl7","_this$props$data$tabl8","_this$props$data$tabl9","filter","_","schema","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Group","icon","onClick","title","intl","formatMessage","name","size","disabled","Header","Row","textAlign","cellIndex","HeaderCell","verticalAlign","selectedCell","isTableBlockSelected","onAddBlock","onSelectBlock","Body","rowIndex","onChangeField","formData","blocksConfig","_defineProperty","objectOf","any","isRequired","detached","bool","number","string","func","onDeleteBlock","onInsertBlock","onMutateBlock","onFocusPreviousBlock","onFocusNextBlock"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx"],"sourcesContent":["/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport { Button, Table } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport Cell from './Cell';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\nimport TableSchema from './schema';\n\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{ type: 'p', children: [{ text: '' }] }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph(),\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = (cells) => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell()),\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n  ],\n};\n\nconst messages = defineMessages({\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  bottom: {\n    id: 'Bottom',\n    defaultMessage: 'Bottom',\n  },\n  middle: {\n    id: 'Middle',\n    defaultMessage: 'Middle',\n  },\n  top: {\n    id: 'Top',\n    defaultMessage: 'Top',\n  },\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0,\n      },\n      isClient: false,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table || isEmpty(this.props.data.table)) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        table: initialTable,\n      });\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table || isEmpty(nextProps.data.table)) {\n      this.props.onChangeBlock(nextProps.block, {\n        ...nextProps.data,\n        table: initialTable,\n      });\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({ selected: { row, cell } });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = {\n      ...table.rows[row].cells[cell],\n      value: JSON.parse(JSON.stringify(slateValue)),\n    };\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Toggle cell type (from header to data or reverse)\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n  toggleCellType() {\n    const table = { ...this.props.data.table };\n    let type =\n      table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type =\n      type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row),\n        ],\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell,\n      },\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row + 1),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row + 1),\n        ],\n      },\n    });\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell),\n          ],\n        })),\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1,\n      },\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell + 1),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell + 1),\n          ],\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row) => ({\n          ...row,\n          cells: remove(\n            row.cells,\n            (cell, index) => index !== this.state.selected.cell,\n          ),\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: remove(\n          table.rows,\n          (row, index) => index !== this.state.selected.row,\n        ),\n      },\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({ selected: null });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const headers = this.props.data.table?.rows?.[0]?.cells || [];\n    const rows =\n      this.props.data.table?.rows?.filter((_, index) => index > 0) || [];\n    const schema = TableSchema(this.props);\n\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      <div className={cx('block table', { selected: this.props.selected })}>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowBefore}\n                title={this.props.intl.formatMessage(messages.insertRowBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowBefore,\n                )}\n              >\n                <Icon name={rowBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowAfter}\n                title={this.props.intl.formatMessage(messages.insertRowAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowAfter,\n                )}\n              >\n                <Icon name={rowAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteRow}\n                disabled={this.props.data.table?.rows?.length === 1}\n                title={this.props.intl.formatMessage(messages.deleteRow)}\n                aria-label={this.props.intl.formatMessage(messages.deleteRow)}\n              >\n                <Icon name={rowDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColBefore}\n                title={this.props.intl.formatMessage(messages.insertColBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColBefore,\n                )}\n              >\n                <Icon name={colBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColAfter}\n                title={this.props.intl.formatMessage(messages.insertColAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColAfter,\n                )}\n              >\n                <Icon name={colAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteCol}\n                disabled={this.props.data.table?.rows?.[0].cells.length === 1}\n                title={this.props.intl.formatMessage(messages.deleteCol)}\n                aria-label={this.props.intl.formatMessage(messages.deleteCol)}\n              >\n                <Icon name={colDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        {this.props.data.table && (\n          <Table\n            fixed={this.props.data.table.fixed}\n            compact={this.props.data.table.compact}\n            basic={this.props.data.table.basic ? 'very' : false}\n            celled={this.props.data.table.celled}\n            inverted={this.props.data.table.inverted}\n            striped={this.props.data.table.striped}\n            className=\"slate-table-block\"\n          >\n            {!this.props.data.table.hideHeaders ? (\n              <Table.Header>\n                <Table.Row textAlign=\"left\">\n                  {headers.map((cell, cellIndex) => (\n                    <Table.HeaderCell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={0}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          0 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n            ) : (\n              ''\n            )}\n            <Table.Body>\n              {map(rows, (row, rowIndex) => (\n                <Table.Row key={row.key}>\n                  {map(row.cells, (cell, cellIndex) => (\n                    <Table.Cell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                      className={\n                        this.props.selected &&\n                        this.state.selected &&\n                        rowIndex + 1 === this.state.selected.row &&\n                        cellIndex === this.state.selected.cell &&\n                        this.props.selected\n                          ? 'selected'\n                          : ''\n                      }\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={rowIndex + 1}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          rowIndex + 1 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {this.props.selected && this.state.selected && this.state.isClient && (\n          <SidebarPortal selected={this.props.selected}>\n            <BlockDataForm\n              schema={schema}\n              title={schema.title}\n              onChangeField={(id, value) => {\n                this.props.onChangeBlock(this.props.block, {\n                  ...this.props.data,\n                  [id]: value,\n                });\n              }}\n              onChangeBlock={this.props.onChangeBlock}\n              formData={this.props.data}\n              block={this.props.block}\n              blocksConfig={this.props.blocksConfig}\n            />\n          </SidebarPortal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Insert row before","defaultMessage":"Insert row before"},{"id":"Insert row after","defaultMessage":"Insert row after"},{"id":"Delete row","defaultMessage":"Delete row"},{"id":"Insert col before","defaultMessage":"Insert col before"},{"id":"Insert col after","defaultMessage":"Insert col after"},{"id":"Delete col","defaultMessage":"Delete col"},{"id":"Left","defaultMessage":"Left"},{"id":"Center","defaultMessage":"Center"},{"id":"Right","defaultMessage":"Right"},{"id":"Bottom","defaultMessage":"Bottom"},{"id":"Middle","defaultMessage":"Middle"},{"id":"Top","defaultMessage":"Top"}]}},"sourceType":"module","externalDependencies":[]}