{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Container/EditBlockWrapper.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport NewBlockAddButton from './NewBlockAddButton';\nimport cx from 'classnames';\nimport { isInteractiveElement } from '@plone/volto/helpers/Utils/Utils';\nimport { buildStyleObjectFromData } from '@plone/volto/helpers/Blocks/Blocks';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  delete: {\n    \"id\": \"Remove element {index}\",\n    \"defaultMessage\": \"Remove element {index}\"\n  },\n  reset: {\n    \"id\": \"Reset element {index}\",\n    \"defaultMessage\": \"Reset element {index}\"\n  }\n});\nconst EditBlockWrapper = props => {\n  const intl = useIntl();\n  const {\n    blockProps,\n    draginfo,\n    children\n  } = props;\n  const {\n    block,\n    selected,\n    type,\n    blocksConfig,\n    onChangeBlock,\n    onDeleteBlock,\n    onSelectBlock,\n    data,\n    index\n  } = blockProps;\n  function onResetBlock() {\n    onChangeBlock(block, {\n      '@type': 'empty'\n    });\n  }\n  const style = buildStyleObjectFromData(data);\n\n  // We need to merge the StyleWrapper styles with the draggable props from b-D&D\n  const styleMergedWithDragProps = _objectSpread(_objectSpread({}, draginfo.draggableProps), {}, {\n    style: _objectSpread(_objectSpread({}, style), draginfo.draggableProps.style)\n  });\n  return __jsx(\"div\", _extends({\n    ref: draginfo.innerRef\n  }, styleMergedWithDragProps, draginfo.dragHandleProps, {\n    className: cx(`block-editor-${data['@type']} contained`, {\n      selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    role: \"presentation\",\n    className: \"cell-wrapper\",\n    onClick: e => {\n      e.block = block;\n      onSelectBlock(block);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, type !== 'empty' ? __jsx(Button, {\n    \"aria-label\": intl.formatMessage(messages.reset, {\n      index\n    }),\n    basic: true,\n    icon: true,\n    onClick: e => onResetBlock(block, {}),\n    className: \"remove-block-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: clearSVG,\n    className: \"circled\",\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })) : __jsx(Button, {\n    basic: true,\n    icon: true,\n    className: \"remove-block-button\",\n    onClick: e => onDeleteBlock(block, true),\n    \"aria-label\": intl.formatMessage(messages.delete, {\n      index\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: clearSVG,\n    className: \"circled\",\n    size: \"24px\",\n    color: \"#e40166\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })), type && type !== 'empty' ? __jsx(\"div\", {\n    className: cx('ui drag block inner', type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, children) : __jsx(\"div\", {\n    className: cx('gridBlock-empty-placeholder', {\n      selected: selected\n    }),\n    role: \"presentation\",\n    onClick: e => {\n      onSelectBlock(block);\n      // If the click is in the button, then\n      if (isInteractiveElement(e.target)) {\n        e.stopPropagation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Add a new block\"), __jsx(NewBlockAddButton, {\n    block: block,\n    index: index,\n    blocksConfig: blocksConfig,\n    onMutateBlock: (block, value) => onChangeBlock(block, _objectSpread(_objectSpread({}, data), value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default EditBlockWrapper;","map":{"version":3,"names":["Icon","Button","defineMessages","useIntl","NewBlockAddButton","cx","isInteractiveElement","buildStyleObjectFromData","clearSVG","messages","delete","reset","EditBlockWrapper","props","intl","blockProps","draginfo","children","block","selected","type","blocksConfig","onChangeBlock","onDeleteBlock","onSelectBlock","data","index","onResetBlock","style","styleMergedWithDragProps","_objectSpread","draggableProps","__jsx","_extends","ref","innerRef","dragHandleProps","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","role","onClick","e","formatMessage","basic","icon","name","size","color","target","stopPropagation","onMutateBlock","value"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Container/EditBlockWrapper.jsx"],"sourcesContent":["import Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport NewBlockAddButton from './NewBlockAddButton';\nimport cx from 'classnames';\nimport { isInteractiveElement } from '@plone/volto/helpers/Utils/Utils';\nimport { buildStyleObjectFromData } from '@plone/volto/helpers/Blocks/Blocks';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  delete: {\n    id: 'Remove element {index}',\n    defaultMessage: 'Remove element {index}',\n  },\n  reset: {\n    id: 'Reset element {index}',\n    defaultMessage: 'Reset element {index}',\n  },\n});\n\nconst EditBlockWrapper = (props) => {\n  const intl = useIntl();\n\n  const { blockProps, draginfo, children } = props;\n  const {\n    block,\n    selected,\n    type,\n    blocksConfig,\n    onChangeBlock,\n    onDeleteBlock,\n    onSelectBlock,\n    data,\n    index,\n  } = blockProps;\n\n  function onResetBlock() {\n    onChangeBlock(block, { '@type': 'empty' });\n  }\n\n  const style = buildStyleObjectFromData(data);\n\n  // We need to merge the StyleWrapper styles with the draggable props from b-D&D\n  const styleMergedWithDragProps = {\n    ...draginfo.draggableProps,\n    style: { ...style, ...draginfo.draggableProps.style },\n  };\n\n  return (\n    <div\n      ref={draginfo.innerRef}\n      {...styleMergedWithDragProps}\n      {...draginfo.dragHandleProps}\n      className={cx(`block-editor-${data['@type']} contained`, { selected })}\n    >\n      <div\n        role=\"presentation\"\n        className=\"cell-wrapper\"\n        onClick={(e) => {\n          e.block = block;\n          onSelectBlock(block);\n        }}\n      >\n        {type !== 'empty' ? (\n          <Button\n            aria-label={intl.formatMessage(messages.reset, {\n              index,\n            })}\n            basic\n            icon\n            onClick={(e) => onResetBlock(block, {})}\n            className=\"remove-block-button\"\n          >\n            <Icon name={clearSVG} className=\"circled\" size=\"24px\" />\n          </Button>\n        ) : (\n          <Button\n            basic\n            icon\n            className=\"remove-block-button\"\n            onClick={(e) => onDeleteBlock(block, true)}\n            aria-label={intl.formatMessage(messages.delete, {\n              index,\n            })}\n          >\n            <Icon\n              name={clearSVG}\n              className=\"circled\"\n              size=\"24px\"\n              color=\"#e40166\"\n            />\n          </Button>\n        )}\n        {type && type !== 'empty' ? (\n          <div className={cx('ui drag block inner', type)}>{children}</div>\n        ) : (\n          <div\n            className={cx('gridBlock-empty-placeholder', {\n              selected: selected,\n            })}\n            role=\"presentation\"\n            onClick={(e) => {\n              onSelectBlock(block);\n              // If the click is in the button, then\n              if (isInteractiveElement(e.target)) {\n                e.stopPropagation();\n              }\n            }}\n          >\n            <p>Add a new block</p>\n            <NewBlockAddButton\n              block={block}\n              index={index}\n              blocksConfig={blocksConfig}\n              onMutateBlock={(block, value) =>\n                onChangeBlock(block, {\n                  ...data,\n                  ...value,\n                })\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditBlockWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Remove element {index}","defaultMessage":"Remove element {index}"},{"id":"Reset element {index}","defaultMessage":"Reset element {index}"}]}},"sourceType":"module","externalDependencies":[]}