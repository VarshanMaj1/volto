{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { blockTagDeserializer } from '@plone/volto-slate/editor/deserialize';\nimport { TABLE, TR, TD, TFOOT, THEAD, TBODY, TH } from '@plone/volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\nexport const withTable = editor => {\n  const {\n    deleteBackward,\n    deleteForward,\n    insertBreak\n  } = editor;\n\n  // paste support\n  editor.htmlTagsToSlate = _objectSpread(_objectSpread({}, editor.htmlTagsToSlate), {}, {\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD)\n  });\n  editor.deleteBackward = unit => {\n    const {\n      selection\n    } = editor;\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === TD\n      });\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n    deleteBackward(unit);\n  };\n  editor.deleteForward = unit => {\n    const {\n      selection\n    } = editor;\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === TD\n      });\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n    deleteForward(unit);\n  };\n  editor.insertBreak = () => {\n    const {\n      selection\n    } = editor;\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: n => n.type === TABLE\n      });\n      if (table) {\n        return;\n      }\n    }\n    insertBreak();\n  };\n  return editor;\n};","map":{"version":3,"names":["blockTagDeserializer","TABLE","TR","TD","TFOOT","THEAD","TBODY","TH","Editor","Point","Range","withTable","editor","deleteBackward","deleteForward","insertBreak","htmlTagsToSlate","_objectSpread","unit","selection","isCollapsed","cell","nodes","match","n","type","cellPath","start","equals","anchor","end","table"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/Table/extensions.js"],"sourcesContent":["import { blockTagDeserializer } from '@plone/volto-slate/editor/deserialize';\nimport {\n  TABLE,\n  TR,\n  TD,\n  TFOOT,\n  THEAD,\n  TBODY,\n  TH,\n} from '@plone/volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\n\nexport const withTable = (editor) => {\n  const { deleteBackward, deleteForward, insertBreak } = editor;\n\n  // paste support\n  editor.htmlTagsToSlate = {\n    ...editor.htmlTagsToSlate,\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD),\n  };\n\n  editor.deleteBackward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const { selection } = editor;\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: (n) => n.type === TABLE,\n      });\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}