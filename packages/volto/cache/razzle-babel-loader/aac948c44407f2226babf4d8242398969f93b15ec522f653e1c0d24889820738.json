{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/LanguageSelector/LanguageSelector.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { toReactIntlLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nimport { defineMessages, useIntl } from 'react-intl';\nconst messages = defineMessages({\n  switchLanguageTo: {\n    \"id\": \"Switch to\",\n    \"defaultMessage\": \"Switch to\"\n  }\n});\nconst LanguageSelector = props => {\n  _s();\n  const intl = useIntl();\n  const currentLang = useSelector(state => state.intl.locale);\n  const translations = useSelector(state => {\n    var _state$content$data, _state$content$data$, _state$content$data$$;\n    return (_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : (_state$content$data$ = _state$content$data['@components']) === null || _state$content$data$ === void 0 ? void 0 : (_state$content$data$$ = _state$content$data$.translations) === null || _state$content$data$$ === void 0 ? void 0 : _state$content$data$$.items;\n  });\n  const {\n    settings\n  } = config;\n  return settings.isMultilingual ? __jsx(\"div\", {\n    className: \"language-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, map(settings.supportedLanguages, lang => {\n    const translation = find(translations, {\n      language: lang\n    });\n    return __jsx(Link, {\n      \"aria-label\": `${intl.formatMessage(messages.switchLanguageTo)} ${langmap[lang].nativeName.toLowerCase()}`,\n      className: cx({\n        selected: toReactIntlLang(lang) === currentLang\n      }),\n      to: translation ? flattenToAppURL(translation['@id']) : `/${lang}`,\n      title: langmap[lang].nativeName,\n      onClick: () => {\n        props.onClickAction();\n      },\n      key: `language-selector-${lang}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, langmap[lang].nativeName);\n  })) : __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(\"html\", {\n    lang: toReactIntlLang(settings.defaultLanguage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n_s(LanguageSelector, \"8jVtpbgBiXGv1VPla2i+k/0lzNY=\", false, function () {\n  return [useIntl, useSelector, useSelector];\n});\n_c = LanguageSelector;\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func\n};\nLanguageSelector.defaultProps = {\n  onClickAction: () => {}\n};\nexport default LanguageSelector;\nvar _c;\n$RefreshReg$(_c, \"LanguageSelector\");","map":{"version":3,"names":["React","PropTypes","Link","useSelector","cx","find","map","Helmet","langmap","flattenToAppURL","toReactIntlLang","config","defineMessages","useIntl","messages","switchLanguageTo","LanguageSelector","props","_s","intl","currentLang","state","locale","translations","_state$content$data","_state$content$data$","_state$content$data$$","content","data","items","settings","isMultilingual","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","supportedLanguages","lang","translation","language","formatMessage","nativeName","toLowerCase","selected","to","title","onClick","onClickAction","key","defaultLanguage","_c","propTypes","func","defaultProps","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/LanguageSelector/LanguageSelector.jsx"],"sourcesContent":["/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\n\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { toReactIntlLang } from '@plone/volto/helpers/Utils/Utils';\n\nimport config from '@plone/volto/registry';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  switchLanguageTo: {\n    id: 'Switch to',\n    defaultMessage: 'Switch to',\n  },\n});\n\nconst LanguageSelector = (props) => {\n  const intl = useIntl();\n  const currentLang = useSelector((state) => state.intl.locale);\n  const translations = useSelector(\n    (state) => state.content.data?.['@components']?.translations?.items,\n  );\n\n  const { settings } = config;\n\n  return settings.isMultilingual ? (\n    <div className=\"language-selector\">\n      {map(settings.supportedLanguages, (lang) => {\n        const translation = find(translations, { language: lang });\n        return (\n          <Link\n            aria-label={`${intl.formatMessage(\n              messages.switchLanguageTo,\n            )} ${langmap[lang].nativeName.toLowerCase()}`}\n            className={cx({ selected: toReactIntlLang(lang) === currentLang })}\n            to={translation ? flattenToAppURL(translation['@id']) : `/${lang}`}\n            title={langmap[lang].nativeName}\n            onClick={() => {\n              props.onClickAction();\n            }}\n            key={`language-selector-${lang}`}\n          >\n            {langmap[lang].nativeName}\n          </Link>\n        );\n      })}\n    </div>\n  ) : (\n    <Helmet>\n      <html lang={toReactIntlLang(settings.defaultLanguage)} />\n    </Helmet>\n  );\n};\n\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func,\n};\n\nLanguageSelector.defaultProps = {\n  onClickAction: () => {},\n};\n\nexport default LanguageSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Switch to","defaultMessage":"Switch to"}]}},"sourceType":"module","externalDependencies":[]}