{"ast":null,"code":"import express from 'express';\nimport path from 'path';\nimport { AddonRegistry } from '@plone/registry/addon-registry';\nimport config from '@plone/volto/registry';\nconst projectRootPath = path.resolve('.');\nconst {\n  registry\n} = AddonRegistry.init(projectRootPath);\nconst staticDirectory = () => {\n  if (process.env.BUILD_DIR) {\n    return path.join(process.env.BUILD_DIR, 'public');\n  }\n  // Only for development, when Volto detects that it's working on itself (not an\n  // old fashioned Volto project), there are add-ons (so it's the new setup) then\n  // point to the public folder in the root of the setup, instead of the inner Volto\n  // public folder.\n  if (true && !registry.isVoltoProject && registry.addonNames.length > 0) {\n    return path.join(projectRootPath, '../../../public');\n  }\n  // Is always set (Razzle does it)\n  return process.env.RAZZLE_PUBLIC_DIR;\n};\nconst staticMiddlewareFn = express.static(staticDirectory(), {\n  setHeaders: function (res, path) {\n    const pathLib = require('path');\n    const base = pathLib.resolve(process.env.RAZZLE_PUBLIC_DIR);\n    const relpath = path.substr(base.length);\n    config.settings.serverConfig.staticFiles.some(elem => {\n      if (relpath.match(elem.match)) {\n        for (const name in elem.headers) {\n          res.setHeader(name, elem.headers[name] || 'undefined');\n        }\n        return true;\n      }\n      return false;\n    });\n  }\n});\nexport default function staticsMiddleware() {\n  const middleware = express.Router();\n  middleware.all('*', staticMiddlewareFn);\n  middleware.id = 'staticResourcesProcessor';\n  return middleware;\n}","map":{"version":3,"names":["express","path","AddonRegistry","config","projectRootPath","resolve","registry","init","staticDirectory","process","env","BUILD_DIR","join","isVoltoProject","addonNames","length","RAZZLE_PUBLIC_DIR","staticMiddlewareFn","static","setHeaders","res","pathLib","require","base","relpath","substr","settings","serverConfig","staticFiles","some","elem","match","name","headers","setHeader","staticsMiddleware","middleware","Router","all","id"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/express-middleware/static.js"],"sourcesContent":["import express from 'express';\nimport path from 'path';\nimport { AddonRegistry } from '@plone/registry/addon-registry';\nimport config from '@plone/volto/registry';\n\nconst projectRootPath = path.resolve('.');\nconst { registry } = AddonRegistry.init(projectRootPath);\n\nconst staticDirectory = () => {\n  if (process.env.BUILD_DIR) {\n    return path.join(process.env.BUILD_DIR, 'public');\n  }\n  // Only for development, when Volto detects that it's working on itself (not an\n  // old fashioned Volto project), there are add-ons (so it's the new setup) then\n  // point to the public folder in the root of the setup, instead of the inner Volto\n  // public folder.\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    !registry.isVoltoProject &&\n    registry.addonNames.length > 0\n  ) {\n    return path.join(projectRootPath, '../../../public');\n  }\n  // Is always set (Razzle does it)\n  return process.env.RAZZLE_PUBLIC_DIR;\n};\n\nconst staticMiddlewareFn = express.static(staticDirectory(), {\n  setHeaders: function (res, path) {\n    const pathLib = require('path');\n    const base = pathLib.resolve(process.env.RAZZLE_PUBLIC_DIR);\n    const relpath = path.substr(base.length);\n    config.settings.serverConfig.staticFiles.some((elem) => {\n      if (relpath.match(elem.match)) {\n        for (const name in elem.headers) {\n          res.setHeader(name, elem.headers[name] || 'undefined');\n        }\n        return true;\n      }\n      return false;\n    });\n  },\n});\n\nexport default function staticsMiddleware() {\n  const middleware = express.Router();\n  middleware.all('*', staticMiddlewareFn);\n  middleware.id = 'staticResourcesProcessor';\n  return middleware;\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,eAAe,GAAGH,IAAI,CAACI,OAAO,CAAC,GAAG,CAAC;AACzC,MAAM;EAAEC;AAAS,CAAC,GAAGJ,aAAa,CAACK,IAAI,CAACH,eAAe,CAAC;AAExD,MAAMI,eAAe,GAAGA,CAAA,KAAM;EAC5B,IAAIC,OAAO,CAACC,GAAG,CAACC,SAAS,EAAE;IACzB,OAAOV,IAAI,CAACW,IAAI,CAACH,OAAO,CAACC,GAAG,CAACC,SAAS,EAAE,QAAQ,CAAC;EACnD;EACA;EACA;EACA;EACA;EACA,IACE,QACA,CAACL,QAAQ,CAACO,cAAc,IACxBP,QAAQ,CAACQ,UAAU,CAACC,MAAM,GAAG,CAAC,EAC9B;IACA,OAAOd,IAAI,CAACW,IAAI,CAACR,eAAe,EAAE,iBAAiB,CAAC;EACtD;EACA;EACA,OAAOK,OAAO,CAACC,GAAG,CAACM,iBAAiB;AACtC,CAAC;AAED,MAAMC,kBAAkB,GAAGjB,OAAO,CAACkB,MAAM,CAACV,eAAe,CAAC,CAAC,EAAE;EAC3DW,UAAU,EAAE,SAAAA,CAAUC,GAAG,EAAEnB,IAAI,EAAE;IAC/B,MAAMoB,OAAO,GAAGC,OAAO,CAAC,MAAM,CAAC;IAC/B,MAAMC,IAAI,GAAGF,OAAO,CAAChB,OAAO,CAACI,OAAO,CAACC,GAAG,CAACM,iBAAiB,CAAC;IAC3D,MAAMQ,OAAO,GAAGvB,IAAI,CAACwB,MAAM,CAACF,IAAI,CAACR,MAAM,CAAC;IACxCZ,MAAM,CAACuB,QAAQ,CAACC,YAAY,CAACC,WAAW,CAACC,IAAI,CAAEC,IAAI,IAAK;MACtD,IAAIN,OAAO,CAACO,KAAK,CAACD,IAAI,CAACC,KAAK,CAAC,EAAE;QAC7B,KAAK,MAAMC,IAAI,IAAIF,IAAI,CAACG,OAAO,EAAE;UAC/Bb,GAAG,CAACc,SAAS,CAACF,IAAI,EAAEF,IAAI,CAACG,OAAO,CAACD,IAAI,CAAC,IAAI,WAAW,CAAC;QACxD;QACA,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAe,SAASG,iBAAiBA,CAAA,EAAG;EAC1C,MAAMC,UAAU,GAAGpC,OAAO,CAACqC,MAAM,CAAC,CAAC;EACnCD,UAAU,CAACE,GAAG,CAAC,GAAG,EAAErB,kBAAkB,CAAC;EACvCmB,UAAU,CAACG,EAAE,GAAG,0BAA0B;EAC1C,OAAOH,UAAU;AACnB","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}