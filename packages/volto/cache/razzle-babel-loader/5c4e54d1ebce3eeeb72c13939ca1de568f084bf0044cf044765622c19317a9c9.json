{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/LinksToItem/LinksToItem.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * LinksToItem component\n * @module components/manage/LinksToItem/LinksToItem\n */\nimport React, { useEffect, useState } from 'react';\nimport find from 'lodash/find';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { Container, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { queryRelations } from '@plone/volto/actions/relations/relations';\nimport { listActions } from '@plone/volto/actions/actions/actions';\nimport { asyncConnect } from '@plone/volto/helpers/AsyncConnect';\nimport IconNext from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport Unauthorized from '@plone/volto/components/theme/Unauthorized/Unauthorized';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport settingsSVG from '@plone/volto/icons/settings.svg';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  linkstoitem: {\n    \"id\": \"Links and references\",\n    \"defaultMessage\": \"Links and references\"\n  },\n  helpLinkRelationsControlPanel: {\n    \"id\": \"Overview of relations of all content items\",\n    \"defaultMessage\": \"Overview of relations of all content items\"\n  }\n});\nconst LinksToItem = props => {\n  _s();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const pathname = props.location.pathname;\n  const itempath = getBaseUrl(pathname);\n  const objectActions = useSelector(state => state.actions.actions.object);\n  const editPermission = find(objectActions, {\n    id: 'edit'\n  });\n  const title = useSelector(state => {\n    var _state$content$data;\n    return ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || '';\n  });\n  const myrelations = useSelector(state => {\n    var _state$relations$subr;\n    return (_state$relations$subr = state.relations.subrequests[itempath]) === null || _state$relations$subr === void 0 ? void 0 : _state$relations$subr.data;\n  });\n  const actions = useSelector(state => {\n    var _state$actions$action, _state$actions;\n    return (_state$actions$action = (_state$actions = state.actions) === null || _state$actions === void 0 ? void 0 : _state$actions.actions) !== null && _state$actions$action !== void 0 ? _state$actions$action : {};\n  });\n  const ploneSetupAction = find(actions.user, {\n    id: 'plone_setup'\n  });\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(false);\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  useEffect(() => {\n    dispatch(queryRelations(null, false, itempath, null, [itempath]));\n  }, [dispatch, itempath]);\n  useEffect(() => {\n    dispatch(getContent(itempath));\n  }, [dispatch, itempath]);\n  let links = {};\n  if (myrelations) {\n    Object.keys(myrelations).forEach(relationtype => {\n      links[relationtype] = {};\n      myrelations[relationtype].items.forEach(item => {\n        links[relationtype][item.source.UID] = item.source;\n      });\n    });\n  }\n  let links_ordered = {};\n  Object.keys(links).forEach(relationtype => {\n    links_ordered[relationtype] = Object.values(links[relationtype]).sort(link => link['@id']);\n  });\n  const relations_found = Object.keys(links_ordered).length > 0;\n  if (!editPermission) {\n    return __jsx(Unauthorized, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 12\n      }\n    });\n  }\n  return __jsx(Container, {\n    id: \"linkstoitem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.linkstoitem),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Content that links to or references {title}\",\n    defaultMessage: \"Content that links to or references {title}\",\n    values: {\n      title: __jsx(\"q\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 30\n        }\n      }, title)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  })), relations_found ? __jsx(Table, {\n    selectable: true,\n    compact: true,\n    singleLine: true,\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, Object.keys(links_ordered).map((relationtype, index) => {\n    // TODO: keys driven by links_ordered[relationtype][index]['@id'])\n    return [].concat([__jsx(React.Fragment, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 23\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 27\n      }\n    }, relationtype === 'isReferencing' ? __jsx(FormattedMessage, {\n      id: \"Linking this item with hyperlink in text\",\n      defaultMessage: \"Linking this item with hyperlink in text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 31\n      }\n    }) : relationtype === 'relatedItems' ? __jsx(FormattedMessage, {\n      id: \"Referencing this item as related item\",\n      defaultMessage: \"Referencing this item as related item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 31\n      }\n    }) : __jsx(React.Fragment, null, __jsx(FormattedMessage, {\n      id: \"Referencing this item with {relationship}\",\n      defaultMessage: \"Referencing this item with {relationship}\",\n      values: {\n        relationship: __jsx(\"q\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 51\n          }\n        }, relationtype)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }))), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Review state\",\n      defaultMessage: \"Review state\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 29\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Type\",\n      defaultMessage: \"Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 29\n      }\n    }))))], links_ordered[relationtype].map(link => {\n      return __jsx(Table.Row, {\n        key: link['@id'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }, __jsx(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 27\n        }\n      }, __jsx(UniversalLink, {\n        href: link['@id'],\n        className: `source ${link.review_state}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        className: \"label\",\n        title: link.type_title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 31\n        }\n      }, link.title))), __jsx(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 27\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }, link.review_state)), __jsx(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 27\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }\n      }, link.type_title || '')));\n    }));\n  }))) : __jsx(Segment, {\n    secondary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"No links to this item found.\",\n    defaultMessage: \"No links to this item found.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }))), isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(React.Fragment, null, __jsx(Link, {\n      to: itempath,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, __jsx(IconNext, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    })), __jsx(React.Fragment, null, ploneSetupAction ? __jsx(Link, {\n      to: \"/controlpanel/relations\",\n      className: \"relations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }, __jsx(IconNext, {\n      name: settingsSVG,\n      className: \"circled\",\n      \"aria-label\": intl.formatMessage(messages.helpLinkRelationsControlPanel),\n      size: \"30px\",\n      title: intl.formatMessage(messages.helpLinkRelationsControlPanel),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 23\n      }\n    })) : null)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }), document.getElementById('toolbar')));\n};\n_s(LinksToItem, \"uBYc8vbvmxdreDGssyai/WWCTsc=\", false, function () {\n  return [useIntl, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = LinksToItem;\nexport const __test__ = LinksToItem;\nexport default asyncConnect([{\n  key: 'content',\n  // Dispatch async/await to make the operation synchronous, otherwise it returns\n  // before the promise is resolved\n  promise: async ({\n    location,\n    store: {\n      dispatch\n    }\n  }) => {\n    const pathname = getBaseUrl(location.pathname);\n    return await dispatch(getContent(pathname));\n  }\n}, {\n  key: 'actions',\n  // Dispatch async/await to make the operation synchronous, otherwise it returns\n  // before the promise is resolved\n  promise: async ({\n    location,\n    store: {\n      dispatch\n    }\n  }) => await dispatch(listActions(getBaseUrl(location.pathname)))\n}, {\n  key: 'relations',\n  // Dispatch async/await to make the operation synchronous, otherwise it returns\n  // before the promise is resolved\n  promise: async ({\n    location,\n    store: {\n      dispatch\n    }\n  }) => {\n    const pathname = getBaseUrl(location.pathname);\n    return await dispatch(queryRelations(null, false, pathname, null, [pathname]));\n  }\n}])(LinksToItem);\nvar _c;\n$RefreshReg$(_c, \"LinksToItem\");","map":{"version":3,"names":["React","useEffect","useState","find","Helmet","Link","createPortal","Container","Segment","Table","FormattedMessage","defineMessages","useIntl","useDispatch","useSelector","getContent","queryRelations","listActions","asyncConnect","IconNext","Toolbar","UniversalLink","Unauthorized","getBaseUrl","backSVG","settingsSVG","messages","back","linkstoitem","helpLinkRelationsControlPanel","LinksToItem","props","_s","intl","dispatch","pathname","location","itempath","objectActions","state","actions","object","editPermission","id","title","_state$content$data","content","data","myrelations","_state$relations$subr","relations","subrequests","_state$actions$action","_state$actions","ploneSetupAction","user","isClient","setIsClient","links","Object","keys","forEach","relationtype","items","item","source","UID","links_ordered","values","sort","link","relations_found","length","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMessage","Group","raised","className","defaultMessage","selectable","compact","singleLine","attached","Body","map","index","concat","Fragment","key","Row","HeaderCell","relationship","Cell","href","review_state","type_title","secondary","hideDefaultViewButtons","inner","to","name","size","document","getElementById","_c","__test__","promise","store","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/LinksToItem/LinksToItem.jsx"],"sourcesContent":["/**\n * LinksToItem component\n * @module components/manage/LinksToItem/LinksToItem\n */\nimport React, { useEffect, useState } from 'react';\nimport find from 'lodash/find';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { Container, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { queryRelations } from '@plone/volto/actions/relations/relations';\nimport { listActions } from '@plone/volto/actions/actions/actions';\nimport { asyncConnect } from '@plone/volto/helpers/AsyncConnect';\n\nimport IconNext from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport Unauthorized from '@plone/volto/components/theme/Unauthorized/Unauthorized';\n\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport settingsSVG from '@plone/volto/icons/settings.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  linkstoitem: {\n    id: 'Links and references',\n    defaultMessage: 'Links and references',\n  },\n  helpLinkRelationsControlPanel: {\n    id: 'Overview of relations of all content items',\n    defaultMessage: 'Overview of relations of all content items',\n  },\n});\n\nconst LinksToItem = (props) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const pathname = props.location.pathname;\n  const itempath = getBaseUrl(pathname);\n  const objectActions = useSelector((state) => state.actions.actions.object);\n  const editPermission = find(objectActions, { id: 'edit' });\n\n  const title = useSelector((state) => state.content.data?.title || '');\n  const myrelations = useSelector(\n    (state) => state.relations.subrequests[itempath]?.data,\n  );\n  const actions = useSelector((state) => state.actions?.actions ?? {});\n  const ploneSetupAction = find(actions.user, {\n    id: 'plone_setup',\n  });\n\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  useEffect(() => {\n    dispatch(queryRelations(null, false, itempath, null, [itempath]));\n  }, [dispatch, itempath]);\n\n  useEffect(() => {\n    dispatch(getContent(itempath));\n  }, [dispatch, itempath]);\n\n  let links = {};\n  if (myrelations) {\n    Object.keys(myrelations).forEach((relationtype) => {\n      links[relationtype] = {};\n      myrelations[relationtype].items.forEach((item) => {\n        links[relationtype][item.source.UID] = item.source;\n      });\n    });\n  }\n\n  let links_ordered = {};\n  Object.keys(links).forEach((relationtype) => {\n    links_ordered[relationtype] = Object.values(links[relationtype]).sort(\n      (link) => link['@id'],\n    );\n  });\n\n  const relations_found = Object.keys(links_ordered).length > 0;\n  if (!editPermission) {\n    return <Unauthorized />;\n  }\n  return (\n    <Container id=\"linkstoitem\">\n      <Helmet title={intl.formatMessage(messages.linkstoitem)} />\n      <Segment.Group raised>\n        <Segment className=\"primary\">\n          <FormattedMessage\n            id=\"Content that links to or references {title}\"\n            defaultMessage=\"Content that links to or references {title}\"\n            values={{ title: <q>{title}</q> }}\n          />\n        </Segment>\n        {relations_found ? (\n          <Table selectable compact singleLine attached>\n            {\n              <Table.Body>\n                {Object.keys(links_ordered).map((relationtype, index) => {\n                  // TODO: keys driven by links_ordered[relationtype][index]['@id'])\n                  return [].concat(\n                    [\n                      <React.Fragment key={index}>\n                        <Table.Row>\n                          <Table.HeaderCell>\n                            {relationtype === 'isReferencing' ? (\n                              <FormattedMessage\n                                id=\"Linking this item with hyperlink in text\"\n                                defaultMessage=\"Linking this item with hyperlink in text\"\n                              />\n                            ) : relationtype === 'relatedItems' ? (\n                              <FormattedMessage\n                                id=\"Referencing this item as related item\"\n                                defaultMessage=\"Referencing this item as related item\"\n                              />\n                            ) : (\n                              <>\n                                <FormattedMessage\n                                  id=\"Referencing this item with {relationship}\"\n                                  defaultMessage=\"Referencing this item with {relationship}\"\n                                  values={{\n                                    relationship: <q>{relationtype}</q>,\n                                  }}\n                                />\n                              </>\n                            )}\n                          </Table.HeaderCell>\n                          <Table.HeaderCell>\n                            <FormattedMessage\n                              id=\"Review state\"\n                              defaultMessage=\"Review state\"\n                            />\n                          </Table.HeaderCell>\n                          <Table.HeaderCell>\n                            <FormattedMessage id=\"Type\" defaultMessage=\"Type\" />\n                          </Table.HeaderCell>\n                        </Table.Row>\n                      </React.Fragment>,\n                    ],\n                    links_ordered[relationtype].map((link) => {\n                      return (\n                        <Table.Row key={link['@id']}>\n                          <Table.Cell>\n                            <UniversalLink\n                              href={link['@id']}\n                              className={`source ${link.review_state}`}\n                            >\n                              <span className=\"label\" title={link.type_title}>\n                                {link.title}\n                              </span>\n                            </UniversalLink>\n                          </Table.Cell>\n                          <Table.Cell>\n                            <span>{link.review_state}</span>\n                          </Table.Cell>\n                          <Table.Cell>\n                            <span>{link.type_title || ''}</span>\n                          </Table.Cell>\n                        </Table.Row>\n                      );\n                    }),\n                  );\n                })}\n              </Table.Body>\n            }\n          </Table>\n        ) : (\n          <Segment secondary>\n            <FormattedMessage\n              id=\"No links to this item found.\"\n              defaultMessage=\"No links to this item found.\"\n            />\n          </Segment>\n        )}\n      </Segment.Group>\n      {isClient &&\n        createPortal(\n          <Toolbar\n            pathname={pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Link to={itempath} className=\"item\">\n                  <IconNext\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.back)}\n                  />\n                </Link>\n\n                <>\n                  {ploneSetupAction ? (\n                    <Link to=\"/controlpanel/relations\" className=\"relations\">\n                      <IconNext\n                        name={settingsSVG}\n                        className=\"circled\"\n                        aria-label={intl.formatMessage(\n                          messages.helpLinkRelationsControlPanel,\n                        )}\n                        size=\"30px\"\n                        title={intl.formatMessage(\n                          messages.helpLinkRelationsControlPanel,\n                        )}\n                      />\n                    </Link>\n                  ) : null}\n                </>\n              </>\n            }\n          />,\n          document.getElementById('toolbar'),\n        )}\n    </Container>\n  );\n};\n\nexport const __test__ = LinksToItem;\n\nexport default asyncConnect([\n  {\n    key: 'content',\n    // Dispatch async/await to make the operation synchronous, otherwise it returns\n    // before the promise is resolved\n    promise: async ({ location, store: { dispatch } }) => {\n      const pathname = getBaseUrl(location.pathname);\n      return await dispatch(getContent(pathname));\n    },\n  },\n  {\n    key: 'actions',\n    // Dispatch async/await to make the operation synchronous, otherwise it returns\n    // before the promise is resolved\n    promise: async ({ location, store: { dispatch } }) =>\n      await dispatch(listActions(getBaseUrl(location.pathname))),\n  },\n  {\n    key: 'relations',\n    // Dispatch async/await to make the operation synchronous, otherwise it returns\n    // before the promise is resolved\n    promise: async ({ location, store: { dispatch } }) => {\n      const pathname = getBaseUrl(location.pathname);\n      return await dispatch(\n        queryRelations(null, false, pathname, null, [pathname]),\n      );\n    },\n  },\n])(LinksToItem);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"Links and references","defaultMessage":"Links and references"},{"id":"Overview of relations of all content items","defaultMessage":"Overview of relations of all content items"},{"id":"Content that links to or references {title}","defaultMessage":"Content that links to or references {title}"},{"id":"Linking this item with hyperlink in text","defaultMessage":"Linking this item with hyperlink in text"},{"id":"Referencing this item as related item","defaultMessage":"Referencing this item as related item"},{"id":"Referencing this item with {relationship}","defaultMessage":"Referencing this item with {relationship}"},{"id":"Review state","defaultMessage":"Review state"},{"id":"Type","defaultMessage":"Type"},{"id":"No links to this item found.","defaultMessage":"No links to this item found."}]}},"sourceType":"module","externalDependencies":[]}