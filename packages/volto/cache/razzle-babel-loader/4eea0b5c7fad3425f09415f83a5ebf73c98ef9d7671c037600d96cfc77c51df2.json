{"ast":null,"code":"import _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx\";\nvar __jsx = React.createElement;\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport map from 'lodash/map';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions/transactions/transactions';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  sortBy: {\n    \"id\": \"Sort By\",\n    \"defaultMessage\": \"Sort by\"\n  },\n  sorted: {\n    \"id\": \"Sorted\",\n    \"defaultMessage\": \"Sorted\"\n  },\n  unsorted: {\n    \"id\": \"Unsorted\",\n    \"defaultMessage\": \"Unsorted\"\n  },\n  sortByDescription: {\n    \"id\": \"Sort transactions by User-Name, Path or Date\",\n    \"defaultMessage\": \"Sort transactions by User-Name, Path or Date\"\n  },\n  failedToUndoTransactions: {\n    \"id\": \"Failed To Undo Transactions\",\n    \"defaultMessage\": \"Failed to undo transactions\"\n  },\n  successfullyUndoneTransactions: {\n    \"id\": \"Successfully Undone Transactions\",\n    \"defaultMessage\": \"Successfully undone transactions\"\n  },\n  transactionsHaveBeenSorted: {\n    \"id\": \"Transactions Have Been Sorted\",\n    \"defaultMessage\": \"Transactions have been sorted\"\n  },\n  transactionsHaveBeenUnsorted: {\n    \"id\": \"Transactions Have Been Unsorted\",\n    \"defaultMessage\": \"Transactions have been unsorted\"\n  },\n  noTransactionsSelected: {\n    \"id\": \"No Transactions Selected\",\n    \"defaultMessage\": \"No transactions selected\"\n  },\n  noTransactionsSelectedToDoUndo: {\n    \"id\": \"No Transactions Selected To Do Undo\",\n    \"defaultMessage\": \"No transactions selected to do undo\"\n  }\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(this);\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(this);\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false\n      });\n    } else {\n      this.setState({\n        isTransactionsNotFound: true\n      });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.unsorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenUnsorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }\n      }));\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (data !== null && data.sortingTypes !== null && this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()) {\n      return;\n    }\n    let sortType = data !== null && data.sortingTypes || 'no value';\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({\n        isSortingTypeSelected: true\n      });\n      sortType.toLowerCase() === 'user name' && this.setState({\n        sortType: 'user name'\n      });\n      sortType.toLowerCase() === 'date' && this.setState({\n        sortType: 'date'\n      });\n      sortType.toLowerCase() === 'path' && this.setState({\n        sortType: 'path'\n      });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    sortType.toLowerCase() === 'user name' && (value = data.sortByUsername) || sortType.toLowerCase() === 'path' && (value = data.sortByPath) || sortType.toLowerCase() === 'date' && (value = data.sortByDate) || (value = undefined);\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach(element => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (element.username.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach(element => {\n          if (element.id.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay + MSInADay - 1;\n        let startTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay;\n        this.props.transactions.forEach(element => {\n          if (endTimeOfSortingDateInMS >= Date.parse(element.time) && Date.parse(element.time) >= startTimeOfSortingDateInMS) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.sorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenSorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      this.setState({\n        isEmptyInputForSorting: true\n      });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = map(this.props.transactions.slice(0, this.props.transactions.length), transaction => {\n      if (document.getElementById(transaction.id) !== null && document.getElementById(transaction.id).firstElementChild.firstElementChild.firstElementChild.checked) {\n        transactionsSelected = true;\n        return transaction.id;\n      }\n      return '';\n    });\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.noTransactionsSelected),\n        content: this.props.intl.formatMessage(messages.noTransactionsSelectedToDoUndo),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 9\n        }\n      }));\n    }\n    Array.from(document.getElementsByClassName('transactions-checkboxes')).forEach(element => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex && this.setState({\n      upperIndex: this.state.lowerIndex,\n      lowerIndex: this.state.lowerIndex - this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex && this.setState({\n      lowerIndex: this.state.upperIndex,\n      upperIndex: this.state.upperIndex + this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * Handle next and prev buttons visibility when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < this.state.sortedTransactions.length && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n\n  /**\n   * Handle next and prev buttons visibility when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    var _this$props$transacti, _this$props$transacti2;\n    this.state.upperIndex >= ((_this$props$transacti = this.props.transactions) === null || _this$props$transacti === void 0 ? void 0 : _this$props$transacti.length) && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < ((_this$props$transacti2 = this.props.transactions) === null || _this$props$transacti2 === void 0 ? void 0 : _this$props$transacti2.length) && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n\n  /**\n   * Handle next, prev buttons and table visibility\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      var _this$props$transacti3, _this$props$transacti4;\n      ((_this$props$transacti3 = this.props.transactions) === null || _this$props$transacti3 === void 0 ? void 0 : _this$props$transacti3.length) > 0 && this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: false\n      });\n      ((_this$props$transacti4 = this.props.transactions) === null || _this$props$transacti4 === void 0 ? void 0 : _this$props$transacti4.length) <= 0 && !this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: true\n      });\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (this.props.revertRequest.error && this.props.revertRequest.error !== null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: this.props.intl.formatMessage(messages.failedToUndoTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 9\n        }\n      }));\n    } else if (this.props.revertRequest.error === null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.successfullyUndoneTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$transacti5, _this$props$transacti6;\n    const transactionsRange = this.state.sortedTransactions.length > 0 && this.state.sortedTransactions.slice(this.state.lowerIndex, this.state.upperIndex) || ((_this$props$transacti5 = this.props.transactions) === null || _this$props$transacti5 === void 0 ? void 0 : _this$props$transacti5.slice(this.state.lowerIndex, this.state.upperIndex));\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n    return __jsx(Container, {\n      id: \"page-undo\",\n      className: \"controlpanel-undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: \"Undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Undo Controlpanel\",\n      defaultMessage: \"Undo Controlpanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }\n    }, ((_this$props$transacti6 = this.props.transactions) === null || _this$props$transacti6 === void 0 ? void 0 : _this$props$transacti6.length) > 0 && __jsx(Form, {\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: this.state.isSortingTypeSelected ? ['sortingTypes', this.state.sortType.toLowerCase() === 'user name' && 'sortByUsername' || this.state.sortType.toLowerCase() === 'path' && 'sortByPath' || this.state.sortType.toLowerCase() === 'date' && 'sortByDate'] : ['sortingTypes']\n        }],\n        properties: {\n          sortingTypes: {\n            title: this.props.intl.formatMessage(messages.sortBy),\n            description: this.props.intl.formatMessage(messages.sortByDescription),\n            type: 'string',\n            choices: map(['User Name', 'Path', 'Date'], type => [type, type])\n          },\n          sortByUsername: {\n            title: `Enter Username`,\n            type: 'string'\n          },\n          sortByPath: {\n            title: `Enter Path`,\n            type: 'string'\n          },\n          sortByDate: {\n            title: `Enter Date and Time`,\n            type: 'date'\n          }\n        },\n        required: []\n      },\n      error: this.state.isEmptyInputForSorting ? {\n        message: 'Please enter any input to perform sorting'\n      } : undefined,\n      onChangeFormData: this.onSelect,\n      onSubmit: this.state.isSortingTypeSelected ? this.onSort : undefined,\n      onCancel: this.state.isSortingTypeSelected ? this.onCancel : undefined,\n      resetOnCancel: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }\n    })), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions\",\n      defaultMessage: \"Transactions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 15\n      }\n    })), this.state.isTransactionsNotFound ? __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"No Transactions Found\",\n      defaultMessage: \"No transactions found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 17\n      }\n    })) : __jsx(Table, {\n      selectable: true,\n      fixed: true,\n      celled: true,\n      compact: true,\n      singleLine: true,\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions Checkbox\",\n      defaultMessage: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"What\",\n      defaultMessage: \"What\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Who\",\n      defaultMessage: \"Who\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"When\",\n      defaultMessage: \"When\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Note\",\n      defaultMessage: \"Note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 21\n      }\n    }))), __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 17\n      }\n    }, map(transactionsRange, transaction => __jsx(Table.Row, {\n      id: transaction.id,\n      key: transaction.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 21\n      }\n    }, __jsx(Table.Cell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 23\n      }\n    }, __jsx(Input, {\n      type: \"checkbox\",\n      className: \"transactions-checkboxes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 25\n      }\n    })), __jsx(Table.Cell, {\n      width: 3,\n      title: [transaction.description].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 23\n      }\n    }, transaction.description), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 23\n      }\n    }, transaction.username ? transaction.username : 'Zope'), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 23\n      }\n    }, transaction.time), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 23\n      }\n    }, transaction.description.includes('Undo') ? 'Undone' : '')))), __jsx(Table.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      colSpan: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 21\n      }\n    }, __jsx(Menu, {\n      pagination: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 23\n      }\n    }, __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"prev-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 25\n      }\n    }, this.state.showPrevButton ? __jsx(Icon, {\n      onClick: this.onPrev,\n      name: prevIcon,\n      title: \"Prev\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 29\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: undoSVG,\n      id: \"undo-button\",\n      className: \"circled\",\n      size: \"30px\",\n      title: this.props.intl.formatMessage(messages.undo),\n      onClick: this.onUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 27\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"next-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 25\n      }\n    }, this.state.showNextButton ? __jsx(Icon, {\n      onClick: this.onNext,\n      name: nextIcon,\n      title: \"Next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 29\n      }\n    }))))))))), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        \"aria-label\": this.props.intl.formatMessage(messages.back),\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 13\n      }\n    }), document.getElementById('toolbar')));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(UndoControlpanel, \"propTypes\", {\n  getTransactions: PropTypes.func.isRequired,\n  revertTransactions: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.number,\n    time: PropTypes.string,\n    username: PropTypes.string\n  })),\n  revertRequest: PropTypes.shape({\n    loaded: PropTypes.bool,\n    loading: PropTypes.bool\n  }).isRequired\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  pathname: props.location.pathname,\n  transactions: state.transactions.transactions_recieved,\n  revertRequest: state.transactions.revert\n}), {\n  getTransactions,\n  revertTransactions\n}))(UndoControlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","createPortal","Container","Segment","Table","Menu","Input","FormattedMessage","defineMessages","injectIntl","Icon","Toolbar","Toast","Form","backSVG","map","Helmet","nextIcon","prevIcon","undoSVG","getTransactions","revertTransactions","toast","messages","success","error","undo","back","default","sortBy","sorted","unsorted","sortByDescription","failedToUndoTransactions","successfullyUndoneTransactions","transactionsHaveBeenSorted","transactionsHaveBeenUnsorted","noTransactionsSelected","noTransactionsSelectedToDoUndo","UndoControlpanel","constructor","props","state","isClient","sortType","lowerIndex","upperIndex","defaultTransactionsLenInTable","isSortingTypeSelected","sortedTransactions","isEmptyInputForSorting","isTransactionsNotFound","isClickedOnUndoButton","showPrevButton","showNextButton","onCancel","bind","onSort","onSelect","onPrev","onNext","onUndo","handleTableVisiblity","handleNotSortedNextPrevButtons","handleSortedNextPrevButtons","checkTransactionsUndoneStatus","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","revertRequest","loading","loaded","setSortedTransactions","length","info","__jsx","title","intl","formatMessage","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","data","sortingTypes","toLowerCase","value","sortByUsername","sortByPath","sortByDate","undefined","transactions","forEach","element","trim","username","push","includes","id","MSInADay","sortingTimeInMS","Date","parse","endTimeOfSortingDateInMS","startTimeOfSortingDateInMS","time","transactionsSelected","undoTransactionsIds","slice","transaction","document","getElementById","firstElementChild","checked","Array","from","getElementsByClassName","_this$props$transacti","_this$props$transacti2","_this$props$transacti3","_this$props$transacti4","render","_this$props$transacti5","_this$props$transacti6","transactionsRange","className","Group","raised","defaultMessage","schema","fieldsets","fields","properties","description","type","choices","required","message","onChangeFormData","onSubmit","resetOnCancel","selectable","fixed","celled","compact","singleLine","attached","Header","Row","HeaderCell","width","Body","key","Cell","join","Footer","textAlign","colSpan","pagination","Item","as","icon","onClick","name","style","size","pathname","hideDefaultViewButtons","inner","Fragment","to","_defineProperty","func","isRequired","arrayOf","shape","string","number","bool","location","transactions_recieved","revert"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport map from 'lodash/map';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport {\n  getTransactions,\n  revertTransactions,\n} from '@plone/volto/actions/transactions/transactions';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  sortBy: {\n    id: 'Sort By',\n    defaultMessage: 'Sort by',\n  },\n  sorted: {\n    id: 'Sorted',\n    defaultMessage: 'Sorted',\n  },\n  unsorted: {\n    id: 'Unsorted',\n    defaultMessage: 'Unsorted',\n  },\n  sortByDescription: {\n    id: 'Sort transactions by User-Name, Path or Date',\n    defaultMessage: 'Sort transactions by User-Name, Path or Date',\n  },\n  failedToUndoTransactions: {\n    id: 'Failed To Undo Transactions',\n    defaultMessage: 'Failed to undo transactions',\n  },\n  successfullyUndoneTransactions: {\n    id: 'Successfully Undone Transactions',\n    defaultMessage: 'Successfully undone transactions',\n  },\n  transactionsHaveBeenSorted: {\n    id: 'Transactions Have Been Sorted',\n    defaultMessage: 'Transactions have been sorted',\n  },\n  transactionsHaveBeenUnsorted: {\n    id: 'Transactions Have Been Unsorted',\n    defaultMessage: 'Transactions have been unsorted',\n  },\n  noTransactionsSelected: {\n    id: 'No Transactions Selected',\n    defaultMessage: 'No transactions selected',\n  },\n  noTransactionsSelectedToDoUndo: {\n    id: 'No Transactions Selected To Do Undo',\n    defaultMessage: 'No transactions selected to do undo',\n  },\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    revertTransactions: PropTypes.func.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        description: PropTypes.string,\n        id: PropTypes.string,\n        size: PropTypes.number,\n        time: PropTypes.string,\n        username: PropTypes.string,\n      }),\n    ),\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons =\n      this.handleNotSortedNextPrevButtons.bind(this);\n    this.handleSortedNextPrevButtons =\n      this.handleSortedNextPrevButtons.bind(this);\n    this.checkTransactionsUndoneStatus =\n      this.checkTransactionsUndoneStatus.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false,\n      });\n    } else {\n      this.setState({ isTransactionsNotFound: true });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.unsorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenUnsorted,\n          )}\n        />,\n      );\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable,\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (\n      data !== null &&\n      data.sortingTypes !== null &&\n      this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()\n    ) {\n      return;\n    }\n    let sortType = (data !== null && data.sortingTypes) || 'no value';\n\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({ isSortingTypeSelected: true });\n      sortType.toLowerCase() === 'user name' &&\n        this.setState({ sortType: 'user name' });\n      sortType.toLowerCase() === 'date' && this.setState({ sortType: 'date' });\n      sortType.toLowerCase() === 'path' && this.setState({ sortType: 'path' });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    (sortType.toLowerCase() === 'user name' && (value = data.sortByUsername)) ||\n      (sortType.toLowerCase() === 'path' && (value = data.sortByPath)) ||\n      (sortType.toLowerCase() === 'date' && (value = data.sortByDate)) ||\n      (value = undefined);\n\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach((element) => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (\n            element.username\n              .trim()\n              .toLowerCase()\n              .includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach((element) => {\n          if (\n            element.id.trim().toLowerCase().includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay) + MSInADay - 1;\n        let startTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay);\n\n        this.props.transactions.forEach((element) => {\n          if (\n            endTimeOfSortingDateInMS >= Date.parse(element.time) &&\n            Date.parse(element.time) >= startTimeOfSortingDateInMS\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.sorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenSorted,\n          )}\n        />,\n      );\n    } else {\n      this.setState({ isEmptyInputForSorting: true });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = map(\n      this.props.transactions.slice(0, this.props.transactions.length),\n      (transaction) => {\n        if (\n          document.getElementById(transaction.id) !== null &&\n          document.getElementById(transaction.id).firstElementChild\n            .firstElementChild.firstElementChild.checked\n        ) {\n          transactionsSelected = true;\n          return transaction.id;\n        }\n        return '';\n      },\n    );\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true,\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.noTransactionsSelected)}\n          content={this.props.intl.formatMessage(\n            messages.noTransactionsSelectedToDoUndo,\n          )}\n        />,\n      );\n    }\n\n    Array.from(\n      document.getElementsByClassName('transactions-checkboxes'),\n    ).forEach((element) => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex &&\n      this.setState({\n        upperIndex: this.state.lowerIndex,\n        lowerIndex:\n          this.state.lowerIndex - this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex &&\n      this.setState({\n        lowerIndex: this.state.upperIndex,\n        upperIndex:\n          this.state.upperIndex + this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * Handle next and prev buttons visibility when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.state.sortedTransactions.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next and prev buttons visibility when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    this.state.upperIndex >= this.props.transactions?.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.props.transactions?.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next, prev buttons and table visibility\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      this.props.transactions?.length > 0 &&\n        this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: false });\n\n      this.props.transactions?.length <= 0 &&\n        !this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: true });\n\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (\n      this.props.revertRequest.error &&\n      this.props.revertRequest.error !== null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={this.props.intl.formatMessage(\n            messages.failedToUndoTransactions,\n          )}\n        />,\n      );\n    } else if (\n      this.props.revertRequest.error === null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(\n            messages.successfullyUndoneTransactions,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const transactionsRange =\n      (this.state.sortedTransactions.length > 0 &&\n        this.state.sortedTransactions.slice(\n          this.state.lowerIndex,\n          this.state.upperIndex,\n        )) ||\n      this.props.transactions?.slice(\n        this.state.lowerIndex,\n        this.state.upperIndex,\n      );\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n\n    return (\n      <Container id=\"page-undo\" className=\"controlpanel-undo\">\n        <Helmet title=\"Undo\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Undo Controlpanel\"\n              defaultMessage=\"Undo Controlpanel\"\n            />\n          </Segment>\n          <Segment>\n            {this.props.transactions?.length > 0 && (\n              <Form\n                schema={{\n                  fieldsets: [\n                    {\n                      id: 'default',\n                      title: this.props.intl.formatMessage(messages.default),\n                      fields: this.state.isSortingTypeSelected\n                        ? [\n                            'sortingTypes',\n                            (this.state.sortType.toLowerCase() ===\n                              'user name' &&\n                              'sortByUsername') ||\n                              (this.state.sortType.toLowerCase() === 'path' &&\n                                'sortByPath') ||\n                              (this.state.sortType.toLowerCase() === 'date' &&\n                                'sortByDate'),\n                          ]\n                        : ['sortingTypes'],\n                    },\n                  ],\n                  properties: {\n                    sortingTypes: {\n                      title: this.props.intl.formatMessage(messages.sortBy),\n                      description: this.props.intl.formatMessage(\n                        messages.sortByDescription,\n                      ),\n                      type: 'string',\n                      choices: map(['User Name', 'Path', 'Date'], (type) => [\n                        type,\n                        type,\n                      ]),\n                    },\n                    sortByUsername: {\n                      title: `Enter Username`,\n                      type: 'string',\n                    },\n                    sortByPath: {\n                      title: `Enter Path`,\n                      type: 'string',\n                    },\n                    sortByDate: {\n                      title: `Enter Date and Time`,\n                      type: 'date',\n                    },\n                  },\n                  required: [],\n                }}\n                error={\n                  this.state.isEmptyInputForSorting\n                    ? { message: 'Please enter any input to perform sorting' }\n                    : undefined\n                }\n                onChangeFormData={this.onSelect}\n                onSubmit={\n                  this.state.isSortingTypeSelected ? this.onSort : undefined\n                }\n                onCancel={\n                  this.state.isSortingTypeSelected ? this.onCancel : undefined\n                }\n                resetOnCancel={true}\n              />\n            )}\n          </Segment>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Transactions\"\n                defaultMessage=\"Transactions\"\n              />\n            </Segment>\n            {this.state.isTransactionsNotFound ? (\n              <Segment>\n                <FormattedMessage\n                  id=\"No Transactions Found\"\n                  defaultMessage=\"No transactions found\"\n                />\n              </Segment>\n            ) : (\n              <Table selectable fixed celled compact singleLine attached>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={1}>\n                      <FormattedMessage\n                        id=\"Transactions Checkbox\"\n                        defaultMessage=\"#\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Note\" defaultMessage=\"Note\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(transactionsRange, (transaction) => (\n                    <Table.Row id={transaction.id} key={transaction.id}>\n                      <Table.Cell width={1}>\n                        <Input\n                          type=\"checkbox\"\n                          className=\"transactions-checkboxes\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell\n                        width={3}\n                        title={[transaction.description].join(' ')}\n                      >\n                        {transaction.description}\n                      </Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.username ? transaction.username : 'Zope'}\n                      </Table.Cell>\n                      <Table.Cell width={3}>{transaction.time}</Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.description.includes('Undo')\n                          ? 'Undone'\n                          : ''}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n                <Table.Footer>\n                  <Table.Row>\n                    <Table.HeaderCell textAlign=\"center\" colSpan=\"6\">\n                      <Menu pagination>\n                        <Menu.Item as=\"a\" id=\"prev-button\" icon>\n                          {this.state.showPrevButton ? (\n                            <Icon\n                              onClick={this.onPrev}\n                              name={prevIcon}\n                              title=\"Prev\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" icon>\n                          <Icon\n                            name={undoSVG}\n                            id=\"undo-button\"\n                            className=\"circled\"\n                            size=\"30px\"\n                            title={this.props.intl.formatMessage(messages.undo)}\n                            onClick={this.onUndo}\n                          />\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" id=\"next-button\" icon>\n                          {this.state.showNextButton ? (\n                            <Icon\n                              onClick={this.onNext}\n                              name={nextIcon}\n                              title=\"Next\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                      </Menu>\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Footer>\n              </Table>\n            )}\n          </Segment.Group>\n        </Segment.Group>\n        {this.state.isClient &&\n          createPortal(\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      pathname: props.location.pathname,\n      transactions: state.transactions.transactions_recieved,\n      revertRequest: state.transactions.revert,\n    }),\n    { getTransactions, revertTransactions },\n  ),\n)(UndoControlpanel);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Error","defaultMessage":"Error"},{"id":"Undo","defaultMessage":"Undo"},{"id":"Back","defaultMessage":"Back"},{"id":"Default","defaultMessage":"Default"},{"id":"Sort By","defaultMessage":"Sort by"},{"id":"Sorted","defaultMessage":"Sorted"},{"id":"Unsorted","defaultMessage":"Unsorted"},{"id":"Sort transactions by User-Name, Path or Date","defaultMessage":"Sort transactions by User-Name, Path or Date"},{"id":"Failed To Undo Transactions","defaultMessage":"Failed to undo transactions"},{"id":"Successfully Undone Transactions","defaultMessage":"Successfully undone transactions"},{"id":"Transactions Have Been Sorted","defaultMessage":"Transactions have been sorted"},{"id":"Transactions Have Been Unsorted","defaultMessage":"Transactions have been unsorted"},{"id":"No Transactions Selected","defaultMessage":"No transactions selected"},{"id":"No Transactions Selected To Do Undo","defaultMessage":"No transactions selected to do undo"},{"id":"Undo Controlpanel","defaultMessage":"Undo Controlpanel"},{"id":"Transactions","defaultMessage":"Transactions"},{"id":"No Transactions Found","defaultMessage":"No transactions found"},{"id":"Transactions Checkbox","defaultMessage":"#"},{"id":"What","defaultMessage":"What"},{"id":"Who","defaultMessage":"Who"},{"id":"When","defaultMessage":"When"},{"id":"Note","defaultMessage":"Note"}]}},"sourceType":"module","externalDependencies":[]}