{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/UndoToolbar.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport useUndoManager from '@plone/volto/helpers/UndoManager/useUndoManager';\nimport config from '@plone/volto/registry';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport redoSVG from '@plone/volto/icons/redo.svg';\nconst messages = defineMessages({\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  redo: {\n    \"id\": \"Redo\",\n    \"defaultMessage\": \"Redo\"\n  }\n});\nconst UndoToolbar = ({\n  state,\n  onUndoRedo,\n  maxUndoLevels,\n  enableHotKeys\n}) => {\n  _s();\n  const intl = useIntl();\n  const undoLevels = maxUndoLevels !== null && maxUndoLevels !== void 0 ? maxUndoLevels : config.settings.maxUndoLevels;\n  const {\n    doUndo,\n    doRedo,\n    canUndo,\n    canRedo\n  } = useUndoManager(state, onUndoRedo, {\n    maxUndoLevels: undoLevels\n  });\n  return __jsx(React.Fragment, null, __jsx(Plug, {\n    pluggable: \"main.toolbar.bottom\",\n    id: \"undo-btn\",\n    dependencies: [canUndo, canRedo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    className: \"undo\",\n    onClick: () => doUndo(),\n    \"aria-label\": intl.formatMessage(messages.undo),\n    disabled: !canUndo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: undoSVG,\n    className: \"circled\",\n    size: \"30px\",\n    title: intl.formatMessage(messages.undo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }))), __jsx(Plug, {\n    pluggable: \"main.toolbar.bottom\",\n    id: \"redo-btn\",\n    dependencies: [canUndo, canRedo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    className: \"redo\",\n    onClick: () => doRedo(),\n    \"aria-label\": intl.formatMessage(messages.redo),\n    disabled: !canRedo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: redoSVG,\n    className: \"circled\",\n    size: \"30px\",\n    title: intl.formatMessage(messages.redo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }))));\n};\n_s(UndoToolbar, \"gELt0PbjpN12SgRGz/4otxK2Tbo=\", false, function () {\n  return [useIntl, useUndoManager];\n});\n_c = UndoToolbar;\nexport default UndoToolbar;\nvar _c;\n$RefreshReg$(_c, \"UndoToolbar\");","map":{"version":3,"names":["React","defineMessages","useIntl","Plug","Icon","Button","useUndoManager","config","undoSVG","redoSVG","messages","undo","redo","UndoToolbar","state","onUndoRedo","maxUndoLevels","enableHotKeys","_s","intl","undoLevels","settings","doUndo","doRedo","canUndo","canRedo","__jsx","Fragment","pluggable","id","dependencies","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","formatMessage","disabled","name","size","title","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/UndoToolbar.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Button } from 'semantic-ui-react';\nimport useUndoManager from '@plone/volto/helpers/UndoManager/useUndoManager';\nimport config from '@plone/volto/registry';\n\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport redoSVG from '@plone/volto/icons/redo.svg';\n\nconst messages = defineMessages({\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  redo: {\n    id: 'Redo',\n    defaultMessage: 'Redo',\n  },\n});\n\nconst UndoToolbar = ({ state, onUndoRedo, maxUndoLevels, enableHotKeys }) => {\n  const intl = useIntl();\n  const undoLevels = maxUndoLevels ?? config.settings.maxUndoLevels;\n  const { doUndo, doRedo, canUndo, canRedo } = useUndoManager(\n    state,\n    onUndoRedo,\n    {\n      maxUndoLevels: undoLevels,\n    },\n  );\n\n  return (\n    <>\n      <Plug\n        pluggable=\"main.toolbar.bottom\"\n        id=\"undo-btn\"\n        dependencies={[canUndo, canRedo]}\n      >\n        <Button\n          className=\"undo\"\n          onClick={() => doUndo()}\n          aria-label={intl.formatMessage(messages.undo)}\n          disabled={!canUndo}\n        >\n          <Icon\n            name={undoSVG}\n            className=\"circled\"\n            size=\"30px\"\n            title={intl.formatMessage(messages.undo)}\n          />\n        </Button>\n      </Plug>\n      <Plug\n        pluggable=\"main.toolbar.bottom\"\n        id=\"redo-btn\"\n        dependencies={[canUndo, canRedo]}\n      >\n        <Button\n          className=\"redo\"\n          onClick={() => doRedo()}\n          aria-label={intl.formatMessage(messages.redo)}\n          disabled={!canRedo}\n        >\n          <Icon\n            name={redoSVG}\n            className=\"circled\"\n            size=\"30px\"\n            title={intl.formatMessage(messages.redo)}\n          />\n        </Button>\n      </Plug>\n    </>\n  );\n};\n\nexport default UndoToolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Undo","defaultMessage":"Undo"},{"id":"Redo","defaultMessage":"Redo"}]}},"sourceType":"module","externalDependencies":[]}