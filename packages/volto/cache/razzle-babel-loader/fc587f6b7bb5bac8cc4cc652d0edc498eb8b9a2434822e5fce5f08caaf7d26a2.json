{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx\";\nvar __jsx = React.createElement;\n/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport { hasBlocksData, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers/Blocks/Blocks';\nimport { createPortal } from 'react-dom';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport nth from 'lodash/nth';\nimport join from 'lodash/join';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Sidebar from '@plone/volto/components/manage/Sidebar/Sidebar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { getSchema, updateSchema } from '@plone/volto/actions/schema/schema';\nimport { getControlpanel, updateControlpanel } from '@plone/volto/actions/controlpanels/controlpanels';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  enable: {\n    \"id\": \"Enable editable Blocks\",\n    \"defaultMessage\": \"Enable editable Blocks\"\n  }\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onSubmit\", data => {\n      const schema = {\n        properties: {}\n      };\n      Object.keys(data).filter(k => data[k]).forEach(k => schema.properties[k] = {\n        default: data[k]\n      });\n      this.props.updateSchema(this.props.id, schema);\n    });\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onCancel\", () => {\n      const url = getParentUrl(this.props.pathname);\n      this.props.history.push(getParentUrl(url));\n    });\n    /**\n     * Enable blocks handler\n     * @method onEnableBlocks\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onEnableBlocks\", () => {\n      var _properties$blocksFie, _properties$blocksLay;\n      const {\n        properties = {}\n      } = this.props.schema;\n      const blocksFieldName = getBlocksFieldname(properties);\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n      const schema = {\n        fieldsets: [{\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout']\n        }],\n        properties: {\n          blocks: {\n            title: 'Blocks',\n            type: 'dict',\n            widget: 'json',\n            factory: 'JSONField',\n            default: ((_properties$blocksFie = properties[blocksFieldName]) === null || _properties$blocksFie === void 0 ? void 0 : _properties$blocksFie.default) || {}\n          },\n          blocks_layout: {\n            title: 'Blocks Layout',\n            type: 'dict',\n            widget: 'json',\n            factory: 'JSONField',\n            default: ((_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : _properties$blocksLay.default) || {\n              items: []\n            }\n          }\n        }\n      };\n      this.props.updateSchema(this.props.id, schema);\n    });\n    /**\n     * Disable Blocks behavior handler\n     * @method onDisableBlocksBehavior\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onDisableBlocksBehavior\", () => {\n      this.props.updateControlpanel(this.props.controlpanel['@id'], {\n        [this.state.readOnlyBehavior]: false,\n        'volto.blocks.editable.layout': true\n      });\n    });\n    /**\n     * Enable Blocks behavior handler\n     * @method onEnableBlocksBehavior\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onEnableBlocksBehavior\", () => {\n      this.props.updateControlpanel(this.props.controlpanel['@id'], {\n        'volto.blocks.editable.layout': true\n      });\n    });\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false\n    };\n    this.form = /*#__PURE__*/React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (this.props.cpanelRequest.get.loading && nextProps.cpanelRequest.get.error) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n      const properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n      if (hasBlocksData(properties)) {\n        var _properties$blocksFie2, _properties$blocksLay2, _properties$blocksFie3;\n        this.setState({\n          visual: true\n        });\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = ((_properties$blocksFie2 = properties[blocksFieldName]) === null || _properties$blocksFie2 === void 0 ? void 0 : _properties$blocksFie2.default) || {};\n        content[blocksLayoutFieldname] = ((_properties$blocksLay2 = properties[blocksLayoutFieldname]) === null || _properties$blocksLay2 === void 0 ? void 0 : _properties$blocksLay2.default) || {\n          items: []\n        };\n        const blocksBehavior = ((_properties$blocksFie3 = properties[blocksFieldName]) === null || _properties$blocksFie3 === void 0 ? void 0 : _properties$blocksFie3.behavior) || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated') ? blocksBehavior : ''\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: ''\n        });\n      }\n      this.setState({\n        content: content\n      });\n    }\n\n    // Schema updated\n    if (this.props.schemaRequest.update.loading && nextProps.schemaRequest.update.loaded) {\n      this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    // Blocks behavior disabled\n    if (this.props.cpanelRequest.update.loading && nextProps.cpanelRequest.update.loaded) {\n      this.onEnableBlocks();\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$schema, _this$props$schema2;\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 14\n        }\n      });\n    }\n    if (!this.state.visual) {\n      var _this$props, _this$props$controlpa;\n      // Still loading\n      if (!this.state.content) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 16\n          }\n        });\n      }\n\n      // Blocks are not enabled\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$controlpa = _this$props.controlpanel) === null || _this$props$controlpa === void 0 ? void 0 : _this$props$controlpa.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onEnableBlocksBehavior,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }\n      })), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 15\n        }\n      }), document.getElementById('toolbar')));\n    }\n    if (this.state.readOnlyBehavior) {\n      var _this$props2, _this$props2$controlp;\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$controlp = _this$props2.controlpanel) === null || _this$props2$controlp === void 0 ? void 0 : _this$props2$controlp.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onDisableBlocksBehavior,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }\n      })), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 15\n        }\n      }), document.getElementById('toolbar')));\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(((_this$props$schema = this.props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.properties) || {});\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(((_this$props$schema2 = this.props.schema) === null || _this$props$schema2 === void 0 ? void 0 : _this$props$schema2.properties) || {});\n    return __jsx(\"div\", {\n      id: \"page-controlpanel-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 7\n      }\n    }, __jsx(Form, {\n      isAdminForm: true,\n      ref: this.form,\n      schema: {\n        fieldsets: [{\n          id: 'layout',\n          title: 'Layout',\n          fields: [blocksFieldName, blocksLayoutFieldname]\n        }],\n        properties: _objectSpread(_objectSpread({}, this.props.schema.properties[blocksFieldName]), this.props.schema.properties[blocksLayoutFieldname]),\n        required: []\n      },\n      formData: this.state.content,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      pathname: this.props.pathname,\n      visual: this.state.visual,\n      hideActions: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }\n    }), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Sidebar, {\n      settingsTab: true,\n      documentTab: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 13\n      }\n    }), document.getElementById('sidebar')), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: () => this.form.current.onSubmit(),\n        disabled: this.props.schemaRequest.update.loading,\n        loading: this.props.schemaRequest.update.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        className: \"cancel\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        onClick: () => this.onCancel(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 13\n      }\n    }), document.getElementById('toolbar')));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(ContentTypeLayout, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  getSchema: PropTypes.func.isRequired,\n  updateSchema: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  parent: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.objectOf(PropTypes.any),\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  })\n});\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(ContentTypeLayout, \"defaultProps\", {\n  schema: {},\n  controlpanel: null\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  cpanelRequest: state.controlpanels,\n  controlpanel: state.controlpanels.controlpanel,\n  pathname: props.location.pathname,\n  id: nth(props.location.pathname.split('/'), -2),\n  parent: nth(props.location.pathname.split('/'), -3)\n}), {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel\n}))(ContentTypeLayout);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","getParentUrl","hasBlocksData","getBlocksFieldname","getBlocksLayoutFieldname","createPortal","Button","Segment","toast","defineMessages","injectIntl","FormattedMessage","nth","join","Error","Icon","Toolbar","Sidebar","Toast","Form","getSchema","updateSchema","getControlpanel","updateControlpanel","saveSVG","clearSVG","backSVG","messages","changesSaved","back","save","cancel","info","enable","ContentTypeLayout","constructor","props","_defineProperty","data","schema","properties","Object","keys","filter","k","forEach","default","id","url","pathname","history","push","_properties$blocksFie","_properties$blocksLay","blocksFieldName","blocksLayoutFieldname","fieldsets","title","fields","blocks","type","widget","factory","blocks_layout","items","controlpanel","state","readOnlyBehavior","visual","content","error","isClient","form","createRef","componentDidMount","parent","setState","UNSAFE_componentWillReceiveProps","nextProps","cpanelRequest","get","loading","schemaRequest","loaded","_nextProps$schema","key","value","_properties$blocksFie2","_properties$blocksLay2","_properties$blocksFie3","blocksBehavior","behavior","includes","update","__jsx","intl","formatMessage","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onEnableBlocks","render","_this$props$schema","_this$props$schema2","_this$props","_this$props$controlpa","Fragment","placeholder","className","defaultMessage","values","strong","chunks","primary","onClick","onEnableBlocksBehavior","hideDefaultViewButtons","inner","to","onCancel","name","size","document","getElementById","_this$props2","_this$props2$controlp","onDisableBlocksBehavior","isAdminForm","ref","_objectSpread","required","formData","onSubmit","hideActions","settingsTab","documentTab","current","disabled","func","isRequired","string","objectOf","any","shape","object","controlpanels","location","split"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx"],"sourcesContent":["/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport {\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport { createPortal } from 'react-dom';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport nth from 'lodash/nth';\nimport join from 'lodash/join';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Sidebar from '@plone/volto/components/manage/Sidebar/Sidebar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { getSchema, updateSchema } from '@plone/volto/actions/schema/schema';\nimport {\n  getControlpanel,\n  updateControlpanel,\n} from '@plone/volto/actions/controlpanels/controlpanels';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  enable: {\n    id: 'Enable editable Blocks',\n    defaultMessage: 'Enable editable Blocks',\n  },\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateSchema: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false,\n    };\n\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      const properties = nextProps.schema?.properties || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        this.setState({\n          visual: true,\n        });\n\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = properties[blocksFieldName]?.default || {};\n        content[blocksLayoutFieldname] = properties[blocksLayoutFieldname]\n          ?.default || { items: [] };\n\n        const blocksBehavior = properties[blocksFieldName]?.behavior || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated')\n            ? blocksBehavior\n            : '',\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: '',\n        });\n      }\n\n      this.setState({\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.update.loading &&\n      nextProps.schemaRequest.update.loaded\n    ) {\n      this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Blocks behavior disabled\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit = (data) => {\n    const schema = { properties: {} };\n    Object.keys(data)\n      .filter((k) => data[k])\n      .forEach((k) => (schema.properties[k] = { default: data[k] }));\n    this.props.updateSchema(this.props.id, schema);\n  };\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel = () => {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  };\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks = () => {\n    const { properties = {} } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [\n        {\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout'],\n        },\n      ],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksFieldName]?.default || {},\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksLayoutFieldname]?.default || { items: [] },\n        },\n      },\n    };\n    this.props.updateSchema(this.props.id, schema);\n  };\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior = () => {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false,\n      'volto.blocks.editable.layout': true,\n    });\n  };\n\n  /**\n   * Enable Blocks behavior handler\n   * @method onEnableBlocksBehavior\n   * @returns {undefined}\n   */\n  onEnableBlocksBehavior = () => {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      'volto.blocks.editable.layout': true,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.state.visual) {\n      // Still loading\n      if (!this.state.content) {\n        return <div />;\n      }\n\n      // Blocks are not enabled\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onEnableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          {this.state.isClient &&\n            createPortal(\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Link\n                      className=\"item\"\n                      to=\"#\"\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={backSVG}\n                        size=\"30px\"\n                        className=\"contents circled\"\n                        title={this.props.intl.formatMessage(messages.back)}\n                      />\n                    </Link>\n                  </>\n                }\n              />,\n              document.getElementById('toolbar'),\n            )}\n        </>\n      );\n    }\n\n    if (this.state.readOnlyBehavior) {\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onDisableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          {this.state.isClient &&\n            createPortal(\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Link\n                      className=\"item\"\n                      to=\"#\"\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={backSVG}\n                        size=\"30px\"\n                        className=\"contents circled\"\n                        title={this.props.intl.formatMessage(messages.back)}\n                      />\n                    </Link>\n                  </>\n                }\n              />,\n              document.getElementById('toolbar'),\n            )}\n        </>\n      );\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(\n      this.props.schema?.properties || {},\n    );\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(\n      this.props.schema?.properties || {},\n    );\n    return (\n      <div id=\"page-controlpanel-layout\">\n        <Form\n          isAdminForm\n          ref={this.form}\n          schema={{\n            fieldsets: [\n              {\n                id: 'layout',\n                title: 'Layout',\n                fields: [blocksFieldName, blocksLayoutFieldname],\n              },\n            ],\n            properties: {\n              ...this.props.schema.properties[blocksFieldName],\n              ...this.props.schema.properties[blocksLayoutFieldname],\n            },\n            required: [],\n          }}\n          formData={this.state.content}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          hideActions\n        />\n        {this.state.isClient &&\n          createPortal(\n            <Sidebar settingsTab={true} documentTab={false} />,\n            document.getElementById('sidebar'),\n          )}\n        {this.state.isClient &&\n          createPortal(\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={() => this.form.current.onSubmit()}\n                    disabled={this.props.schemaRequest.update.loading}\n                    loading={this.props.schemaRequest.update.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Button\n                    className=\"cancel\"\n                    aria-label={this.props.intl.formatMessage(messages.cancel)}\n                    onClick={() => this.onCancel()}\n                  >\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Button>\n                </>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      cpanelRequest: state.controlpanels,\n      controlpanel: state.controlpanels.controlpanel,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n      parent: nth(props.location.pathname.split('/'), -3),\n    }),\n    { getSchema, updateSchema, getControlpanel, updateControlpanel },\n  ),\n)(ContentTypeLayout);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"},{"id":"Enable editable Blocks","defaultMessage":"Enable editable Blocks"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>"}]}},"sourceType":"module","externalDependencies":[]}