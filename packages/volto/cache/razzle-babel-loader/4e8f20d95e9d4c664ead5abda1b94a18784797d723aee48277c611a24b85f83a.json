{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx\";\nvar __jsx = React.createElement;\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createGroup, deleteGroup, listGroups, updateGroup } from '@plone/volto/actions/groups/groups';\nimport { listRoles } from '@plone/volto/actions/roles/roles';\nimport { getControlpanel } from '@plone/volto/actions/controlpanels/controlpanels';\nimport { authenticatedRole } from '@plone/volto/actions/authRole/authRole';\nimport { getUser } from '@plone/volto/actions/users/users';\nimport jwtDecode from 'jwt-decode';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Pagination from '@plone/volto/components/theme/Pagination/Pagination';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport RenderGroups from '@plone/volto/components/manage/Controlpanels/Groups/RenderGroups';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nimport { Link } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport { isManager, canAssignRole } from '@plone/volto/helpers/User/User';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\nimport pull from 'lodash/pull';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Button, Form, Input, Loader, Segment, Table, Dimmer } from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"fetchData\", async () => {\n      await this.props.getControlpanel('usergroup');\n      await this.props.listRoles();\n      if (!this.props.many_groups) {\n        await this.props.listGroups();\n        this.setState({\n          groupEntries: this.props.groups\n        });\n      }\n      await this.props.getUser(this.props.userId);\n    });\n    /**\n     * @param {*} event\n     * @memberof GroupsControlpanel\n     */\n    _defineProperty(this, \"updateGroupRoleSubmit\", e => {\n      e.stopPropagation();\n      this.state.groupEntries.forEach(item => {\n        this.props.updateGroup(item.id, item);\n      });\n      this.props.authenticatedRole(this.state.authenticatedRole);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.updateGroups),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 7\n        }\n      }));\n    });\n    /**\n     * On change page\n     * @method onChangePage\n     * @param {object} event Event object.\n     * @param {string} value Page value.\n     * @returns {undefined}\n     */\n    _defineProperty(this, \"onChangePage\", (event, {\n      value\n    }) => {\n      this.setState({\n        currentPage: value\n      });\n    });\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      isLoading: false,\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.fetchData();\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteGroupRequest.loading && nextProps.deleteGroupRequest.loaded || this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.props.listGroups(this.state.search);\n    }\n    if (this.props.deleteGroupRequest.loading && nextProps.deleteGroupRequest.loaded) {\n      this.onDeleteGroupSuccess();\n    }\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.onAddGroupSuccess();\n    }\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.error) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error\n      });\n    }\n  }\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    this.setState({\n      isLoading: true\n    });\n    event.preventDefault();\n    this.props.listGroups(this.state.search).then(() => {\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });\n      // eslint-disable-next-line no-console\n      console.error('Error searching group', error);\n    });\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, {\n    value\n  }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value)\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n      groupToDelete: undefined\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState(prevState => ({\n      groupEntries: map(this.state.groupEntries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === name && !entry.roles.includes(value) ? [...entry.roles, value] : entry.id !== name ? entry.roles : pull(entry.roles, value)\n      })),\n      authenticatedRole: name === 'AuthenticatedUsers' && !prevState.authenticatedRole.includes(value) ? [...prevState.authenticatedRole, value] : name !== 'AuthenticatedUsers' ? prevState.authenticatedRole : pull(prevState.authenticatedRole, value)\n    }));\n  }\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.groupCreated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   * Handle Success after deleteGroup()\n   *\n   * @returns {undefined}\n   */\n  onDeleteGroupSuccess() {\n    this.setState({\n      groupToDelete: undefined,\n      showDelete: false\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.groupDeleted),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props, _this$props$deleteGro, _this$state$groupEntr;\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 14\n        }\n      });\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete ? this.state.groupToDelete.id : '';\n    const isUserManager = isManager(this.props.user);\n    return __jsx(Container, {\n      className: \"users-control-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.groups),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }\n    }, __jsx(Confirm, {\n      open: this.state.showDelete,\n      header: this.props.intl.formatMessage(messages.deleteGroupConfirmTitle),\n      content: __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 15\n        }\n      }, __jsx(Dimmer, {\n        active: this === null || this === void 0 ? void 0 : (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$deleteGro = _this$props.deleteGroupRequest) === null || _this$props$deleteGro === void 0 ? void 0 : _this$props$deleteGro.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 17\n        }\n      }, __jsx(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 19\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Loading\",\n        defaultMessage: \"Loading.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 21\n        }\n      }))), __jsx(\"ul\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Do you really want to delete the group {groupname}?\",\n        defaultMessage: \"Do you really want to delete the group {groupname}?\",\n        values: {\n          groupname: __jsx(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 34\n            }\n          }, groupNameToDelete)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 19\n        }\n      }))),\n      onCancel: this.onDeleteCancel,\n      onConfirm: this.onDeleteOk,\n      size: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }\n    }), this.state.showAddGroup ? __jsx(ModalForm, {\n      open: this.state.showAddGroup,\n      className: \"modal\",\n      onSubmit: this.onAddGroupSubmit,\n      submitError: this.state.addGroupError,\n      onCancel: () => this.setState({\n        showAddGroup: false\n      }),\n      title: this.props.intl.formatMessage(messages.addGroupsFormTitle),\n      loading: this.props.createGroupRequest.loading,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: 'FIXME: Group Data',\n          fields: ['title', 'description', 'groupname', 'email', 'roles']\n        }],\n        properties: {\n          title: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormTitleTitle),\n            type: 'string',\n            description: ''\n          },\n          description: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormDescriptionTitle),\n            type: 'string',\n            description: ''\n          },\n          groupname: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormGroupNameTitle),\n            type: 'string',\n            description: 'A unique identifier for the group. Can not be changed after creation.'\n          },\n          email: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormEmailTitle),\n            type: 'string',\n            description: '',\n            widget: 'email'\n          },\n          roles: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormRolesTitle),\n            type: 'array',\n            choices: this.props.roles.filter(role => canAssignRole(isUserManager, role)).map(role => [role.id, role.title]),\n            noValueOption: false,\n            description: ''\n          }\n        },\n        required: ['groupname']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 13\n      }\n    }) : null), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups\",\n      defaultMessage: \"Groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      defaultMessage: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      values: {\n        plone_svg: __jsx(Icon, {\n          name: ploneSVG,\n          size: \"20px\",\n          color: \"#007EB1\",\n          title: 'plone-svg',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 19\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSearchGroups,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 13\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search',\n        loading: this.state.isLoading,\n        disabled: this.state.isLoading\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchGroups),\n      onChange: this.onChangeSearch,\n      id: \"group-search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 13\n      }\n    }, (this.props.many_groups && this.state.groupEntries.length > 0 || !this.props.many_groups) && __jsx(Table, {\n      padded: true,\n      striped: true,\n      attached: true,\n      unstackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 19\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 21\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 23\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groupname\",\n      defaultMessage: \"Groupname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 25\n      }\n    })), this.props.roles.map(role => __jsx(Table.HeaderCell, {\n      key: role.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 25\n      }\n    }, role.title)), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 23\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Actions\",\n      defaultMessage: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 25\n      }\n    })))), __jsx(Table.Body, {\n      \"data-group\": \"groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 19\n      }\n    }, this.state.groupEntries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(group => __jsx(RenderGroups, {\n      key: group.id,\n      onDelete: this.deleteGroup,\n      roles: this.props.roles,\n      group: group,\n      updateGroups: this.updateGroupRole,\n      inheritedRole: this.state.authenticatedRole,\n      isUserManager: isUserManager,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 25\n      }\n    })))), this.state.groupEntries.length === 0 && this.state.search && __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 17\n      }\n    }, this.props.intl.formatMessage(messages.groupSearchNoResults))), __jsx(\"div\", {\n      className: \"contents-pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 13\n      }\n    }, __jsx(Pagination, {\n      current: this.state.currentPage,\n      total: Math.ceil(((_this$state$groupEntr = this.state.groupEntries) === null || _this$state$groupEntr === void 0 ? void 0 : _this$state$groupEntr.length) / this.state.pageSize),\n      onChangePage: this.onChangePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 15\n      }\n    })))), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: this.updateGroupRoleSubmit,\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 21\n        }\n      })), __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"cancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        id: \"toolbar-add\",\n        \"aria-label\": this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        onClick: () => {\n          this.setState({\n            showAddGroup: true\n          });\n        },\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: addUserSvg,\n        size: \"45px\",\n        color: \"#826A6A\",\n        title: this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 13\n      }\n    }), document.getElementById('toolbar')));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(GroupsControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  groups: PropTypes.arrayOf(PropTypes.shape({\n    Title: PropTypes.string,\n    Description: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string),\n    groupname: PropTypes.string\n  })).isRequired,\n  user: PropTypes.shape({\n    '@id': PropTypes.string,\n    id: PropTypes.string,\n    description: PropTypes.string,\n    email: PropTypes.string,\n    fullname: PropTypes.string,\n    groups: PropTypes.object,\n    location: PropTypes.string,\n    portrait: PropTypes.string,\n    home_page: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string),\n    username: PropTypes.string\n  }).isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n  return {\n    user: state.users.user,\n    userId: state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n    roles: state.roles.roles,\n    groups: state.groups.groups,\n    description: state.description,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    pathname: props.location.pathname,\n    deleteGroupRequest: state.groups.delete,\n    createGroupRequest: state.groups.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, dispatch => bindActionCreators({\n  listRoles,\n  listGroups,\n  deleteGroup,\n  getControlpanel,\n  createGroup,\n  updateGroup,\n  authenticatedRole,\n  getUser\n}, dispatch)))(GroupsControlpanel);","map":{"version":3,"names":["createGroup","deleteGroup","listGroups","updateGroup","listRoles","getControlpanel","authenticatedRole","getUser","jwtDecode","Icon","Toast","Toolbar","Pagination","Error","RenderGroups","ModalForm","Link","Helmet","messages","isManager","canAssignRole","clearSVG","addUserSvg","saveSVG","ploneSVG","find","map","pull","PropTypes","React","Component","FormattedMessage","injectIntl","createPortal","connect","toast","bindActionCreators","compose","Confirm","Container","Button","Form","Input","Loader","Segment","Table","Dimmer","GroupsControlpanel","constructor","props","_defineProperty","many_groups","setState","groupEntries","groups","userId","e","stopPropagation","state","forEach","item","id","success","__jsx","title","intl","formatMessage","content","updateGroups","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","event","value","currentPage","onChangeSearch","bind","onSearchGroups","onDeleteOk","onDeleteCancel","onAddGroupSubmit","onAddGroupError","onAddGroupSuccess","updateGroupRole","search","isLoading","addGroupError","showDelete","groupToDelete","undefined","showAddGroup","isClient","inheritedRole","pageSize","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","deleteGroupRequest","loading","loaded","createGroupRequest","onDeleteGroupSuccess","error","loadRolesRequest","getGroupFromProps","preventDefault","then","catch","console","target","itemsToDelete","name","prevState","entry","_objectSpread","roles","includes","data","callback","addGroupSetFormDataCallback","response","body","message","componentDidUpdate","prevProps","groupCreated","groupDeleted","render","_this$props","_this$props$deleteGro","_this$state$groupEntr","groupNameToDelete","isUserManager","user","className","open","header","deleteGroupConfirmTitle","active","defaultMessage","values","groupname","onCancel","onConfirm","size","onSubmit","submitError","addGroupsFormTitle","schema","fieldsets","fields","properties","addGroupsFormTitleTitle","type","description","addGroupsFormDescriptionTitle","addGroupsFormGroupNameTitle","email","addGroupsFormEmailTitle","widget","addGroupsFormRolesTitle","choices","filter","role","noValueOption","required","Group","raised","secondary","plone_svg","color","Field","action","icon","disabled","placeholder","searchGroups","onChange","length","padded","striped","attached","unstackable","Header","Row","HeaderCell","key","Body","slice","group","onDelete","groupSearchNoResults","current","total","Math","ceil","onChangePage","pathname","hideDefaultViewButtons","inner","Fragment","save","onClick","updateGroupRoleSubmit","to","cancel","addGroupsButtonTitle","document","getElementById","func","isRequired","string","arrayOf","shape","Title","Description","fullname","object","location","portrait","home_page","username","_state$controlpanels","_state$controlpanels$","_state$controlpanels$2","_state$controlpanels2","_state$controlpanels3","_state$controlpanels4","users","userSession","token","sub","many_users","controlpanels","controlpanel","delete","create","authRole","dispatch"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createGroup,\n  deleteGroup,\n  listGroups,\n  updateGroup,\n} from '@plone/volto/actions/groups/groups';\nimport { listRoles } from '@plone/volto/actions/roles/roles';\nimport { getControlpanel } from '@plone/volto/actions/controlpanels/controlpanels';\nimport { authenticatedRole } from '@plone/volto/actions/authRole/authRole';\nimport { getUser } from '@plone/volto/actions/users/users';\nimport jwtDecode from 'jwt-decode';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Pagination from '@plone/volto/components/theme/Pagination/Pagination';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport RenderGroups from '@plone/volto/components/manage/Controlpanels/Groups/RenderGroups';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nimport { Link } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport { isManager, canAssignRole } from '@plone/volto/helpers/User/User';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\nimport pull from 'lodash/pull';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\n\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Button,\n  Form,\n  Input,\n  Loader,\n  Segment,\n  Table,\n  Dimmer,\n} from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        Title: PropTypes.string,\n        Description: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n        groupname: PropTypes.string,\n      }),\n    ).isRequired,\n    user: PropTypes.shape({\n      '@id': PropTypes.string,\n      id: PropTypes.string,\n      description: PropTypes.string,\n      email: PropTypes.string,\n      fullname: PropTypes.string,\n      groups: PropTypes.object,\n      location: PropTypes.string,\n      portrait: PropTypes.string,\n      home_page: PropTypes.string,\n      roles: PropTypes.arrayOf(PropTypes.string),\n      username: PropTypes.string,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      isLoading: false,\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_groups) {\n      await this.props.listGroups();\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n    await this.props.getUser(this.props.userId);\n  };\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteGroupRequest.loading &&\n        nextProps.deleteGroupRequest.loaded) ||\n      (this.props.createGroupRequest.loading &&\n        nextProps.createGroupRequest.loaded)\n    ) {\n      this.props.listGroups(this.state.search);\n    }\n    if (\n      this.props.deleteGroupRequest.loading &&\n      nextProps.deleteGroupRequest.loaded\n    ) {\n      this.onDeleteGroupSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.loaded\n    ) {\n      this.onAddGroupSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.error\n    ) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    this.setState({ isLoading: true });\n    event.preventDefault();\n    this.props\n      .listGroups(this.state.search)\n      .then(() => {\n        this.setState({ isLoading: false });\n      })\n      .catch((error) => {\n        this.setState({ isLoading: false });\n        // eslint-disable-next-line no-console\n        console.error('Error searching group', error);\n      });\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n      groupToDelete: undefined,\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState((prevState) => ({\n      groupEntries: map(this.state.groupEntries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n              ? entry.roles\n              : pull(entry.roles, value),\n      })),\n      authenticatedRole:\n        name === 'AuthenticatedUsers' &&\n        !prevState.authenticatedRole.includes(value)\n          ? [...prevState.authenticatedRole, value]\n          : name !== 'AuthenticatedUsers'\n            ? prevState.authenticatedRole\n            : pull(prevState.authenticatedRole, value),\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRoleSubmit = (e) => {\n    e.stopPropagation();\n    this.state.groupEntries.forEach((item) => {\n      this.props.updateGroup(item.id, item);\n    });\n    this.props.authenticatedRole(this.state.authenticatedRole);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateGroups)}\n      />,\n    );\n  };\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupCreated)}\n      />,\n    );\n  }\n\n  /**\n   * Handle Success after deleteGroup()\n   *\n   * @returns {undefined}\n   */\n  onDeleteGroupSuccess() {\n    this.setState({\n      groupToDelete: undefined,\n      showDelete: false,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupDeleted)}\n      />,\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete\n      ? this.state.groupToDelete.id\n      : '';\n\n    const isUserManager = isManager(this.props.user);\n\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.groups)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteGroupConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <Dimmer active={this?.props?.deleteGroupRequest?.loading}>\n                  <Loader>\n                    <FormattedMessage id=\"Loading\" defaultMessage=\"Loading.\" />\n                  </Loader>\n                </Dimmer>\n\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the group {groupname}?\"\n                    defaultMessage=\"Do you really want to delete the group {groupname}?\"\n                    values={{\n                      groupname: <b>{groupNameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddGroup ? (\n            <ModalForm\n              open={this.state.showAddGroup}\n              className=\"modal\"\n              onSubmit={this.onAddGroupSubmit}\n              submitError={this.state.addGroupError}\n              onCancel={() => this.setState({ showAddGroup: false })}\n              title={this.props.intl.formatMessage(messages.addGroupsFormTitle)}\n              loading={this.props.createGroupRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: Group Data',\n                    fields: [\n                      'title',\n                      'description',\n                      'groupname',\n                      'email',\n                      'roles',\n                    ],\n                  },\n                ],\n                properties: {\n                  title: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormTitleTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  description: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormDescriptionTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  groupname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormGroupNameTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'A unique identifier for the group. Can not be changed after creation.',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles\n                      .filter((role) => canAssignRole(isUserManager, role))\n                      .map((role) => [role.id, role.title]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                },\n                required: ['groupname'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Groups\" defaultMessage=\"Groups\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              defaultMessage=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearchGroups}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{\n                    icon: 'search',\n                    loading: this.state.isLoading,\n                    disabled: this.state.isLoading,\n                  }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchGroups,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"group-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              {((this.props.many_groups &&\n                this.state.groupEntries.length > 0) ||\n                !this.props.many_groups) && (\n                <Table padded striped attached unstackable>\n                  <Table.Header>\n                    <Table.Row>\n                      <Table.HeaderCell>\n                        <FormattedMessage\n                          id=\"Groupname\"\n                          defaultMessage=\"Groupname\"\n                        />\n                      </Table.HeaderCell>\n                      {this.props.roles.map((role) => (\n                        <Table.HeaderCell key={role.id}>\n                          {role.title}\n                        </Table.HeaderCell>\n                      ))}\n                      <Table.HeaderCell>\n                        <FormattedMessage\n                          id=\"Actions\"\n                          defaultMessage=\"Actions\"\n                        />\n                      </Table.HeaderCell>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body data-group=\"groups\">\n                    {this.state.groupEntries\n                      .slice(\n                        this.state.currentPage * 10,\n                        this.state.pageSize * (this.state.currentPage + 1),\n                      )\n                      .map((group) => (\n                        <RenderGroups\n                          key={group.id}\n                          onDelete={this.deleteGroup}\n                          roles={this.props.roles}\n                          group={group}\n                          updateGroups={this.updateGroupRole}\n                          inheritedRole={this.state.authenticatedRole}\n                          isUserManager={isUserManager}\n                        />\n                      ))}\n                  </Table.Body>\n                </Table>\n              )}\n              {this.state.groupEntries.length === 0 && this.state.search && (\n                <Segment>\n                  {this.props.intl.formatMessage(messages.groupSearchNoResults)}\n                </Segment>\n              )}\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.groupEntries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient &&\n          createPortal(\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateGroupRoleSubmit}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addGroupsButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddGroup: true });\n                    }}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addGroupsButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      user: state.users.user,\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      roles: state.roles.roles,\n      groups: state.groups.groups,\n      description: state.description,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      pathname: props.location.pathname,\n      deleteGroupRequest: state.groups.delete,\n      createGroupRequest: state.groups.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listGroups,\n          deleteGroup,\n          getControlpanel,\n          createGroup,\n          updateGroup,\n          authenticatedRole,\n          getUser,\n        },\n        dispatch,\n      ),\n  ),\n)(GroupsControlpanel);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Loading","defaultMessage":"Loading."},{"id":"Do you really want to delete the group {groupname}?","defaultMessage":"Do you really want to delete the group {groupname}?"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.","defaultMessage":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group."},{"id":"Groupname","defaultMessage":"Groupname"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}