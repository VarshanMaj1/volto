{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Preferences/PersonalPreferences.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport map from 'lodash/map';\nimport keys from 'lodash/keys';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { withCookies } from 'react-cookie';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport languages from '@plone/volto/constants/Languages.cjs';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  personalPreferences: {\n    \"id\": \"Personal Preferences\",\n    \"defaultMessage\": \"Personal Preferences\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  language: {\n    \"id\": \"Language\",\n    \"defaultMessage\": \"Language\"\n  },\n  languageDescription: {\n    \"id\": \"Your preferred language\",\n    \"defaultMessage\": \"Your preferred language\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\nconst PersonalPreferences = props => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    closeMenu\n  } = props;\n  const onSubmit = data => {\n    let language = data.language || 'en';\n    if (config.settings.supportedLanguages.includes(language)) {\n      const langFileName = toGettextLang(language);\n      import(/* @vite-ignore */'@root/../locales/' + langFileName + '.json').then(locale => {\n        dispatch(changeLanguage(language, locale.default));\n      });\n    }\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: intl.formatMessage(messages.saved),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }\n    }));\n    closeMenu();\n  };\n  const onCancel = () => {\n    closeMenu();\n  };\n  const {\n    cookies\n  } = props;\n  return __jsx(Form, {\n    formData: {\n      language: cookies.get('I18N_LANGUAGE') || ''\n    },\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['language']\n      }],\n      properties: {\n        language: {\n          description: intl.formatMessage(messages.languageDescription),\n          title: intl.formatMessage(messages.language),\n          type: 'string',\n          choices: map(keys(languages), lang => [lang, languages[lang]])\n        }\n      },\n      required: []\n    },\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n};\nPersonalPreferences.propTypes = {\n  closeMenu: PropTypes.func.isRequired\n};\nexport default compose(withCookies)(PersonalPreferences);","map":{"version":3,"names":["PropTypes","useDispatch","map","keys","defineMessages","useIntl","toast","compose","withCookies","Toast","Form","languages","changeLanguage","toGettextLang","config","messages","personalPreferences","default","language","languageDescription","saved","back","success","PersonalPreferences","props","intl","dispatch","closeMenu","onSubmit","data","settings","supportedLanguages","includes","langFileName","then","locale","__jsx","title","formatMessage","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","cookies","formData","get","schema","fieldsets","id","fields","properties","description","type","choices","lang","required","propTypes","func","isRequired"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Preferences/PersonalPreferences.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport map from 'lodash/map';\nimport keys from 'lodash/keys';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { withCookies } from 'react-cookie';\n\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport languages from '@plone/volto/constants/Languages.cjs';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  language: {\n    id: 'Language',\n    defaultMessage: 'Language',\n  },\n  languageDescription: {\n    id: 'Your preferred language',\n    defaultMessage: 'Your preferred language',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\nconst PersonalPreferences = (props) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { closeMenu } = props;\n  const onSubmit = (data) => {\n    let language = data.language || 'en';\n    if (config.settings.supportedLanguages.includes(language)) {\n      const langFileName = toGettextLang(language);\n      import(\n        /* @vite-ignore */ '@root/../locales/' + langFileName + '.json'\n      ).then((locale) => {\n        dispatch(changeLanguage(language, locale.default));\n      });\n    }\n    toast.success(<Toast success title={intl.formatMessage(messages.saved)} />);\n    closeMenu();\n  };\n\n  const onCancel = () => {\n    closeMenu();\n  };\n  const { cookies } = props;\n  return (\n    <Form\n      formData={{ language: cookies.get('I18N_LANGUAGE') || '' }}\n      schema={{\n        fieldsets: [\n          {\n            id: 'default',\n            title: intl.formatMessage(messages.default),\n            fields: ['language'],\n          },\n        ],\n        properties: {\n          language: {\n            description: intl.formatMessage(messages.languageDescription),\n            title: intl.formatMessage(messages.language),\n            type: 'string',\n            choices: map(keys(languages), (lang) => [lang, languages[lang]]),\n          },\n        },\n        required: [],\n      }}\n      onSubmit={onSubmit}\n      onCancel={onCancel}\n    />\n  );\n};\n\nPersonalPreferences.propTypes = {\n  closeMenu: PropTypes.func.isRequired,\n};\nexport default compose(withCookies)(PersonalPreferences);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Personal Preferences","defaultMessage":"Personal Preferences"},{"id":"Default","defaultMessage":"Default"},{"id":"Language","defaultMessage":"Language"},{"id":"Your preferred language","defaultMessage":"Your preferred language"},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}