{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/widgets/SelectMetadataField.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport map from 'lodash/map';\nimport filter from 'lodash/filter';\nimport toPairs from 'lodash/toPairs';\nimport groupBy from 'lodash/groupBy';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { compose } from 'redux';\nimport { FormFieldWrapper } from '@plone/volto/components/manage/Widgets';\nimport withQueryString from './../hocs/withQueryString';\nimport { defineMessages } from 'react-intl';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nconst identity = a => a;\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  }\n});\n\n/**\n * SelectWidget component function.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nconst SelectWidget = props => {\n  var _indexes$value$value;\n  const {\n    choices,\n    vocabBaseUrl,\n    getVocabulary\n  } = props;\n  useEffect(() => {\n    if (!choices && vocabBaseUrl) {\n      getVocabulary({\n        vocabNameOrURL: vocabBaseUrl\n      });\n    }\n  }, [choices, vocabBaseUrl, getVocabulary]);\n  const {\n    id,\n    value,\n    onChange,\n    placeholder,\n    querystring,\n    filterOptions = identity\n  } = props;\n  const isDisabled = false;\n  const {\n    indexes = []\n  } = querystring;\n  const Select = props.reactSelect.default;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), __jsx(Select, {\n    id: `field-${id}`,\n    name: id,\n    placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : props.intl.formatMessage(messages.select),\n    isDisabled: isDisabled,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    options: map(toPairs(groupBy(toPairs(filterOptions(indexes)), item => item[1].group)), group => ({\n      label: group[0],\n      options: map(filter(group[1], item => item[1].enabled), field => ({\n        label: field[1].title,\n        value: field[0]\n      }))\n    })),\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator,\n      Option\n    },\n    value: {\n      value: value === null || value === void 0 ? void 0 : value.value,\n      label: (_indexes$value$value = indexes[value === null || value === void 0 ? void 0 : value.value]) === null || _indexes$value$value === void 0 ? void 0 : _indexes$value$value.title\n    },\n    onChange: data => {\n      let dataValue = [];\n      if (Array.isArray(data)) {\n        for (let obj of data) {\n          dataValue.push(obj.value);\n        }\n        return onChange(id, dataValue);\n      }\n      return onChange(id, data);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\nSelectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  loading: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  querystring: PropTypes.object\n};\nSelectWidget.defaultProps = {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  loading: false,\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null\n};\nexport default compose(withQueryString, injectLazyLibs(['reactSelect']))(SelectWidget);","map":{"version":3,"names":["map","filter","toPairs","groupBy","useEffect","PropTypes","injectLazyLibs","compose","FormFieldWrapper","withQueryString","defineMessages","Option","DropdownIndicator","selectTheme","customSelectStyles","identity","a","messages","select","SelectWidget","props","_indexes$value$value","choices","vocabBaseUrl","getVocabulary","vocabNameOrURL","id","value","onChange","placeholder","querystring","filterOptions","isDisabled","indexes","Select","reactSelect","default","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","name","intl","formatMessage","className","classNamePrefix","options","item","group","label","enabled","field","title","styles","theme","components","data","dataValue","Array","isArray","obj","push","propTypes","string","isRequired","description","required","bool","error","arrayOf","loading","oneOfType","object","func","onBlur","onClick","onEdit","onDelete","wrapped","defaultProps","items","vocabulary","widgetOptions"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/widgets/SelectMetadataField.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport map from 'lodash/map';\nimport filter from 'lodash/filter';\nimport toPairs from 'lodash/toPairs';\nimport groupBy from 'lodash/groupBy';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { compose } from 'redux';\n\nimport { FormFieldWrapper } from '@plone/volto/components/manage/Widgets';\nimport withQueryString from './../hocs/withQueryString';\nimport { defineMessages } from 'react-intl';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst identity = (a) => a;\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n});\n\n/**\n * SelectWidget component function.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nconst SelectWidget = (props) => {\n  const { choices, vocabBaseUrl, getVocabulary } = props;\n\n  useEffect(() => {\n    if (!choices && vocabBaseUrl) {\n      getVocabulary({ vocabNameOrURL: vocabBaseUrl });\n    }\n  }, [choices, vocabBaseUrl, getVocabulary]);\n\n  const {\n    id,\n    value,\n    onChange,\n    placeholder,\n    querystring,\n    filterOptions = identity,\n  } = props;\n\n  const isDisabled = false;\n  const { indexes = [] } = querystring;\n  const Select = props.reactSelect.default;\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Select\n        id={`field-${id}`}\n        name={id}\n        placeholder={placeholder ?? props.intl.formatMessage(messages.select)}\n        isDisabled={isDisabled}\n        className=\"react-select-container\"\n        classNamePrefix=\"react-select\"\n        options={map(\n          toPairs(\n            groupBy(toPairs(filterOptions(indexes)), (item) => item[1].group),\n          ),\n          (group) => ({\n            label: group[0],\n            options: map(\n              filter(group[1], (item) => item[1].enabled),\n              (field) => ({\n                label: field[1].title,\n                value: field[0],\n              }),\n            ),\n          }),\n        )}\n        styles={customSelectStyles}\n        theme={selectTheme}\n        components={{ DropdownIndicator, Option }}\n        value={{\n          value: value?.value,\n          label: indexes[value?.value]?.title,\n        }}\n        onChange={(data) => {\n          let dataValue = [];\n          if (Array.isArray(data)) {\n            for (let obj of data) {\n              dataValue.push(obj.value);\n            }\n            return onChange(id, dataValue);\n          }\n          return onChange(id, data);\n        }}\n      />\n    </FormFieldWrapper>\n  );\n};\n\nSelectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  loading: PropTypes.bool,\n  value: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  querystring: PropTypes.object,\n};\n\nSelectWidget.defaultProps = {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null,\n  },\n  widgetOptions: {\n    vocabulary: null,\n  },\n  error: [],\n  choices: [],\n  loading: false,\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default compose(\n  withQueryString,\n  injectLazyLibs(['reactSelect']),\n)(SelectWidget);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"}]}},"sourceType":"module","externalDependencies":[]}