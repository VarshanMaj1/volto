{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { SET_BLOCKS_CLIPBOARD, RESET_BLOCKS_CLIPBOARD } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy blocks to clipboard function.\n * @function copyBlocks\n * @param {array} blocksData Block data\n * @returns {Object} Copy action.\n */\nexport function setBlocksClipboard(payload) {\n  return _objectSpread({\n    type: SET_BLOCKS_CLIPBOARD\n  }, Object.assign({}, payload.cut ? {\n    cut: payload.cut.filter(b => !!b)\n  } : {}, payload.copy ? {\n    copy: payload.copy.filter(b => !!b)\n  } : {}));\n}\n\n/**\n * Reset blocks clipboard function.\n * @function resetBlocksClipboard\n * @returns {Object} Reset blocks clipboard\n */\nexport function resetBlocksClipboard() {\n  return {\n    type: RESET_BLOCKS_CLIPBOARD\n  };\n}","map":{"version":3,"names":["SET_BLOCKS_CLIPBOARD","RESET_BLOCKS_CLIPBOARD","setBlocksClipboard","payload","_objectSpread","type","Object","assign","cut","filter","b","copy","resetBlocksClipboard"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/actions/blocksClipboard/blocksClipboard.js"],"sourcesContent":["import {\n  SET_BLOCKS_CLIPBOARD,\n  RESET_BLOCKS_CLIPBOARD,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy blocks to clipboard function.\n * @function copyBlocks\n * @param {array} blocksData Block data\n * @returns {Object} Copy action.\n */\nexport function setBlocksClipboard(payload) {\n  return {\n    type: SET_BLOCKS_CLIPBOARD,\n    ...Object.assign(\n      {},\n      payload.cut ? { cut: payload.cut.filter((b) => !!b) } : {},\n      payload.copy ? { copy: payload.copy.filter((b) => !!b) } : {},\n    ),\n  };\n}\n\n/**\n * Reset blocks clipboard function.\n * @function resetBlocksClipboard\n * @returns {Object} Reset blocks clipboard\n */\nexport function resetBlocksClipboard() {\n  return {\n    type: RESET_BLOCKS_CLIPBOARD,\n  };\n}\n"],"mappings":";;;;;AAAA,SACEA,oBAAoB,EACpBC,sBAAsB,QACjB,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,OAAO,EAAE;EAC1C,OAAAC,aAAA;IACEC,IAAI,EAAEL;EAAoB,GACvBM,MAAM,CAACC,MAAM,CACd,CAAC,CAAC,EACFJ,OAAO,CAACK,GAAG,GAAG;IAAEA,GAAG,EAAEL,OAAO,CAACK,GAAG,CAACC,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC;EAAE,CAAC,GAAG,CAAC,CAAC,EAC1DP,OAAO,CAACQ,IAAI,GAAG;IAAEA,IAAI,EAAER,OAAO,CAACQ,IAAI,CAACF,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC;EAAE,CAAC,GAAG,CAAC,CAC9D,CAAC;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oBAAoBA,CAAA,EAAG;EACrC,OAAO;IACLP,IAAI,EAAEJ;EACR,CAAC;AACH","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}