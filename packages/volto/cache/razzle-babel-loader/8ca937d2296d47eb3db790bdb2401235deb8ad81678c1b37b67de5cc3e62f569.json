{"ast":null,"code":"import Cookies from 'universal-cookie';\nconst LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nconst userSessionReset = ({\n  dispatch,\n  getState\n}) => next => action => {\n  var _action$request, _state$userSession, _state$userSession2;\n  if (typeof action === 'function') {\n    return next(action);\n  }\n  switch (action.type) {\n    case LOCATION_CHANGE:\n      if ((_action$request = action.request) !== null && _action$request !== void 0 && _action$request.subrequest || __SERVER__) {\n        return next(action);\n      }\n      const cookies = new Cookies();\n      const token = cookies.get('auth_token');\n      const state = getState();\n      if (token && !((_state$userSession = state.userSession) !== null && _state$userSession !== void 0 && _state$userSession.token)) {\n        const loginAction = {\n          type: 'LOGIN_SUCCESS',\n          result: {\n            token\n          }\n        };\n        dispatch(loginAction);\n      } else if (!token && (_state$userSession2 = state.userSession) !== null && _state$userSession2 !== void 0 && _state$userSession2.token) {\n        const logoutAction = {\n          type: 'LOGOUT_SUCCESS',\n          result: {\n            token\n          }\n        };\n        dispatch(logoutAction);\n      }\n      return next(action);\n    default:\n      return next(action);\n  }\n};\nexport default userSessionReset;","map":{"version":3,"names":["Cookies","LOCATION_CHANGE","userSessionReset","dispatch","getState","next","action","_action$request","_state$userSession","_state$userSession2","type","request","subrequest","__SERVER__","cookies","token","get","state","userSession","loginAction","result","logoutAction"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/middleware/userSessionReset.js"],"sourcesContent":["import Cookies from 'universal-cookie';\n\nconst LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\n\nconst userSessionReset =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    if (typeof action === 'function') {\n      return next(action);\n    }\n\n    switch (action.type) {\n      case LOCATION_CHANGE:\n        if (action.request?.subrequest || __SERVER__) {\n          return next(action);\n        }\n\n        const cookies = new Cookies();\n        const token = cookies.get('auth_token');\n        const state = getState();\n\n        if (token && !state.userSession?.token) {\n          const loginAction = {\n            type: 'LOGIN_SUCCESS',\n            result: {\n              token,\n            },\n          };\n          dispatch(loginAction);\n        } else if (!token && state.userSession?.token) {\n          const logoutAction = {\n            type: 'LOGOUT_SUCCESS',\n            result: {\n              token,\n            },\n          };\n          dispatch(logoutAction);\n        }\n        return next(action);\n      default:\n        return next(action);\n    }\n  };\n\nexport default userSessionReset;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,kBAAkB;AAEtC,MAAMC,eAAe,GAAG,0BAA0B;AAElD,MAAMC,gBAAgB,GACpBA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KACtBC,IAAI,IACJC,MAAM,IAAK;EAAA,IAAAC,eAAA,EAAAC,kBAAA,EAAAC,mBAAA;EACV,IAAI,OAAOH,MAAM,KAAK,UAAU,EAAE;IAChC,OAAOD,IAAI,CAACC,MAAM,CAAC;EACrB;EAEA,QAAQA,MAAM,CAACI,IAAI;IACjB,KAAKT,eAAe;MAClB,IAAI,CAAAM,eAAA,GAAAD,MAAM,CAACK,OAAO,cAAAJ,eAAA,eAAdA,eAAA,CAAgBK,UAAU,IAAIC,UAAU,EAAE;QAC5C,OAAOR,IAAI,CAACC,MAAM,CAAC;MACrB;MAEA,MAAMQ,OAAO,GAAG,IAAId,OAAO,CAAC,CAAC;MAC7B,MAAMe,KAAK,GAAGD,OAAO,CAACE,GAAG,CAAC,YAAY,CAAC;MACvC,MAAMC,KAAK,GAAGb,QAAQ,CAAC,CAAC;MAExB,IAAIW,KAAK,IAAI,GAAAP,kBAAA,GAACS,KAAK,CAACC,WAAW,cAAAV,kBAAA,eAAjBA,kBAAA,CAAmBO,KAAK,GAAE;QACtC,MAAMI,WAAW,GAAG;UAClBT,IAAI,EAAE,eAAe;UACrBU,MAAM,EAAE;YACNL;UACF;QACF,CAAC;QACDZ,QAAQ,CAACgB,WAAW,CAAC;MACvB,CAAC,MAAM,IAAI,CAACJ,KAAK,KAAAN,mBAAA,GAAIQ,KAAK,CAACC,WAAW,cAAAT,mBAAA,eAAjBA,mBAAA,CAAmBM,KAAK,EAAE;QAC7C,MAAMM,YAAY,GAAG;UACnBX,IAAI,EAAE,gBAAgB;UACtBU,MAAM,EAAE;YACNL;UACF;QACF,CAAC;QACDZ,QAAQ,CAACkB,YAAY,CAAC;MACxB;MACA,OAAOhB,IAAI,CAACC,MAAM,CAAC;IACrB;MACE,OAAOD,IAAI,CAACC,MAAM,CAAC;EACvB;AACF,CAAC;AAEH,eAAeJ,gBAAgB","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}