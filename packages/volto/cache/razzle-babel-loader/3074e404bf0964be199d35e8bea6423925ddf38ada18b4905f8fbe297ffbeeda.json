{"ast":null,"code":"/**\n * Relations actions.\n * @module actions/relations/relations\n */\n\nimport { CREATE_RELATIONS, DELETE_RELATIONS, LIST_RELATIONS, STATS_RELATIONS } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create relation function.\n * @function createRelations\n * @param {Object|Array} content Relation data.\n * @returns {Object} Create relation action.\n */\nexport function createRelations(content) {\n  return {\n    type: CREATE_RELATIONS,\n    request: {\n      op: 'post',\n      path: '/@relations',\n      data: {\n        items: content\n      }\n    }\n  };\n}\n\n/**\n * Delete relation function.\n * @function deleteRelations\n * @param {string} id Relation id\n * @returns {Object} Delete relation action.\n */\nexport function deleteRelations(content) {\n  return {\n    type: DELETE_RELATIONS,\n    request: {\n      op: 'del',\n      path: `/@relations`,\n      data: {\n        items: content\n      }\n    }\n  };\n}\n\n/**\n * Query relations\n * @function queryRelations\n * @param {string} relation Name of relation\n * @param {boolean} onlyBroken\n * @returns {Object} List relations action\n */\nexport function queryRelations(relation = null, onlyBroken = false, subrequest = null, source = null, target = null, query_source = null, query_target = null) {\n  let path = '/@relations';\n  var searchParams = new URLSearchParams();\n  relation && searchParams.append('relation', relation);\n  onlyBroken && searchParams.append('onlyBroken', onlyBroken);\n  source && searchParams.append('source', source);\n  target && searchParams.append('target', target);\n  query_source && searchParams.append('query_source', query_source);\n  query_target && searchParams.append('query_target', query_target);\n  const searchParamsToString = searchParams.toString();\n  if (searchParamsToString) {\n    path += `?${searchParamsToString}`;\n  }\n  return {\n    type: LIST_RELATIONS,\n    subrequest,\n    request: {\n      op: 'get',\n      path: path\n    }\n  };\n}\n\n/** Get relation stats\n * @function getRelationStats\n * @returns {Object} Relation stats\n */\n\nexport function getRelationStats() {\n  let path = '/@relations';\n  return {\n    type: STATS_RELATIONS,\n    request: {\n      op: 'get',\n      path: path\n    }\n  };\n}","map":{"version":3,"names":["CREATE_RELATIONS","DELETE_RELATIONS","LIST_RELATIONS","STATS_RELATIONS","createRelations","content","type","request","op","path","data","items","deleteRelations","queryRelations","relation","onlyBroken","subrequest","source","target","query_source","query_target","searchParams","URLSearchParams","append","searchParamsToString","toString","getRelationStats"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/actions/relations/relations.js"],"sourcesContent":["/**\n * Relations actions.\n * @module actions/relations/relations\n */\n\nimport {\n  CREATE_RELATIONS,\n  DELETE_RELATIONS,\n  LIST_RELATIONS,\n  STATS_RELATIONS,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create relation function.\n * @function createRelations\n * @param {Object|Array} content Relation data.\n * @returns {Object} Create relation action.\n */\nexport function createRelations(content) {\n  return {\n    type: CREATE_RELATIONS,\n    request: {\n      op: 'post',\n      path: '/@relations',\n      data: {\n        items: content,\n      },\n    },\n  };\n}\n\n/**\n * Delete relation function.\n * @function deleteRelations\n * @param {string} id Relation id\n * @returns {Object} Delete relation action.\n */\nexport function deleteRelations(content) {\n  return {\n    type: DELETE_RELATIONS,\n    request: {\n      op: 'del',\n      path: `/@relations`,\n      data: {\n        items: content,\n      },\n    },\n  };\n}\n\n/**\n * Query relations\n * @function queryRelations\n * @param {string} relation Name of relation\n * @param {boolean} onlyBroken\n * @returns {Object} List relations action\n */\nexport function queryRelations(\n  relation = null,\n  onlyBroken = false,\n  subrequest = null,\n  source = null,\n  target = null,\n  query_source = null,\n  query_target = null,\n) {\n  let path = '/@relations';\n  var searchParams = new URLSearchParams();\n  relation && searchParams.append('relation', relation);\n  onlyBroken && searchParams.append('onlyBroken', onlyBroken);\n  source && searchParams.append('source', source);\n  target && searchParams.append('target', target);\n  query_source && searchParams.append('query_source', query_source);\n  query_target && searchParams.append('query_target', query_target);\n  const searchParamsToString = searchParams.toString();\n  if (searchParamsToString) {\n    path += `?${searchParamsToString}`;\n  }\n  return {\n    type: LIST_RELATIONS,\n    subrequest,\n    request: {\n      op: 'get',\n      path: path,\n    },\n  };\n}\n\n/** Get relation stats\n * @function getRelationStats\n * @returns {Object} Relation stats\n */\n\nexport function getRelationStats() {\n  let path = '/@relations';\n  return {\n    type: STATS_RELATIONS,\n    request: {\n      op: 'get',\n      path: path,\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SACEA,gBAAgB,EAChBC,gBAAgB,EAChBC,cAAc,EACdC,eAAe,QACV,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,OAAO;IACLC,IAAI,EAAEN,gBAAgB;IACtBO,OAAO,EAAE;MACPC,EAAE,EAAE,MAAM;MACVC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE;QACJC,KAAK,EAAEN;MACT;IACF;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,eAAeA,CAACP,OAAO,EAAE;EACvC,OAAO;IACLC,IAAI,EAAEL,gBAAgB;IACtBM,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE;QACJC,KAAK,EAAEN;MACT;IACF;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,cAAcA,CAC5BC,QAAQ,GAAG,IAAI,EACfC,UAAU,GAAG,KAAK,EAClBC,UAAU,GAAG,IAAI,EACjBC,MAAM,GAAG,IAAI,EACbC,MAAM,GAAG,IAAI,EACbC,YAAY,GAAG,IAAI,EACnBC,YAAY,GAAG,IAAI,EACnB;EACA,IAAIX,IAAI,GAAG,aAAa;EACxB,IAAIY,YAAY,GAAG,IAAIC,eAAe,CAAC,CAAC;EACxCR,QAAQ,IAAIO,YAAY,CAACE,MAAM,CAAC,UAAU,EAAET,QAAQ,CAAC;EACrDC,UAAU,IAAIM,YAAY,CAACE,MAAM,CAAC,YAAY,EAAER,UAAU,CAAC;EAC3DE,MAAM,IAAII,YAAY,CAACE,MAAM,CAAC,QAAQ,EAAEN,MAAM,CAAC;EAC/CC,MAAM,IAAIG,YAAY,CAACE,MAAM,CAAC,QAAQ,EAAEL,MAAM,CAAC;EAC/CC,YAAY,IAAIE,YAAY,CAACE,MAAM,CAAC,cAAc,EAAEJ,YAAY,CAAC;EACjEC,YAAY,IAAIC,YAAY,CAACE,MAAM,CAAC,cAAc,EAAEH,YAAY,CAAC;EACjE,MAAMI,oBAAoB,GAAGH,YAAY,CAACI,QAAQ,CAAC,CAAC;EACpD,IAAID,oBAAoB,EAAE;IACxBf,IAAI,IAAI,IAAIe,oBAAoB,EAAE;EACpC;EACA,OAAO;IACLlB,IAAI,EAAEJ,cAAc;IACpBc,UAAU;IACVT,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAEA;IACR;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,SAASiB,gBAAgBA,CAAA,EAAG;EACjC,IAAIjB,IAAI,GAAG,aAAa;EACxB,OAAO;IACLH,IAAI,EAAEH,eAAe;IACrBI,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAEA;IACR;EACF,CAAC;AACH","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}