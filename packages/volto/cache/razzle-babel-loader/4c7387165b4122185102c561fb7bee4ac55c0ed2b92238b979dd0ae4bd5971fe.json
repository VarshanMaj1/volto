{"ast":null,"code":"/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers/Url/Url';\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nexport function formatUrl(path) {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n    methods.forEach(method => {\n      this[method] = (path, {\n        params,\n        data,\n        type,\n        headers = {},\n        checkUrl = false,\n        attach = []\n      } = {}) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n          if (params) {\n            request.query(params);\n          }\n          let authToken;\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n          request.set('Accept', 'application/json');\n          if (type) {\n            request.type(type);\n          }\n          Object.keys(headers).forEach(key => request.set(key, headers[key]));\n          if (__SERVER__ && checkUrl && ['get', 'head'].includes(method)) {\n            request.redirects(0);\n          }\n          if (data) {\n            request.send(data);\n          }\n          attach.forEach(attachment => {\n            request.attach.apply(request, attachment);\n          });\n          request.end((err, response) => {\n            if (checkUrl && request.url && request.xhr && encodeURI(stripQuerystring(request.url)) !== stripQuerystring(request.xhr.responseURL)) {\n              var _request$xhr$response;\n              if (((_request$xhr$response = request.xhr.responseURL) === null || _request$xhr$response === void 0 ? void 0 : _request$xhr$response.length) === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL\n                });\n              }\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL\n              });\n            }\n            if ([301, 302].includes(err === null || err === void 0 ? void 0 : err.status)) {\n              return reject({\n                code: err.status,\n                url: err.response.headers.location\n              });\n            }\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\nexport default Api;","map":{"version":3,"names":["superagent","Cookies","config","addHeadersFactory","stripQuerystring","methods","formatUrl","path","settings","APISUFIX","legacyTraverse","startsWith","adjustedPath","apiPath","internalApiPath","__SERVER__","Api","constructor","req","cookies","forEach","method","params","data","type","headers","checkUrl","attach","request","promise","Promise","resolve","reject","query","authToken","universalCookies","get","use","set","Object","keys","key","includes","redirects","send","attachment","apply","end","err","response","url","xhr","encodeURI","responseURL","_request$xhr$response","length","code","status","location","body","text"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Api/Api.js"],"sourcesContent":["/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers/Url/Url';\n\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nexport function formatUrl(path) {\n  const { settings } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n\n    methods.forEach((method) => {\n      this[method] = (\n        path,\n        {\n          params,\n          data,\n          type,\n          headers = {},\n          checkUrl = false,\n          attach = [],\n        } = {},\n      ) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          let authToken;\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          Object.keys(headers).forEach((key) => request.set(key, headers[key]));\n\n          if (__SERVER__ && checkUrl && ['get', 'head'].includes(method)) {\n            request.redirects(0);\n          }\n\n          if (data) {\n            request.send(data);\n          }\n\n          attach.forEach((attachment) => {\n            request.attach.apply(request, attachment);\n          });\n\n          request.end((err, response) => {\n            if (\n              checkUrl &&\n              request.url &&\n              request.xhr &&\n              encodeURI(stripQuerystring(request.url)) !==\n                stripQuerystring(request.xhr.responseURL)\n            ) {\n              if (request.xhr.responseURL?.length === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL,\n                });\n              }\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL,\n              });\n            }\n\n            if ([301, 302].includes(err?.status)) {\n              return reject({\n                code: err.status,\n                url: err.response.headers.location,\n              });\n            }\n\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\n\nexport default Api;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}