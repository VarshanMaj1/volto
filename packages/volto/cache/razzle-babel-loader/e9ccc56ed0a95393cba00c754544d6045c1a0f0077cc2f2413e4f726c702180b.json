{"ast":null,"code":"import { updateIntl } from 'react-intl-redux';\nimport { toGettextLang, toReactIntlLang } from '@plone/volto/helpers/Utils/Utils';\nimport { getCookieOptions } from '@plone/volto/helpers/Cookies/cookies';\nimport Cookies from 'universal-cookie';\nexport function changeLanguageCookies(language, req) {\n  var _req$protocol;\n  const cookies = new Cookies();\n  const cookieOptions = getCookieOptions({\n    secure: req !== null && req !== void 0 && (_req$protocol = req.protocol) !== null && _req$protocol !== void 0 && _req$protocol.startsWith('https') ? true : false,\n    sameSite: 'strict'\n  });\n  if (!req) {\n    cookies.set('I18N_LANGUAGE', toGettextLang(language) || '', cookieOptions);\n  } else {\n    req.universalCookies.set('I18N_LANGUAGE', toGettextLang(language) || '', cookieOptions);\n  }\n}\n\n/**\n * Changes current language using react-intl-redux action and setting the cookie\n * @function changeLanguage\n * @param {string} language target language.\n * @param {number} locale set of locales corresponding the target language.\n * @returns {Object} Change the target language action.\n */\nexport function changeLanguage(language, locale, req) {\n  changeLanguageCookies(language, req);\n  return updateIntl({\n    locale: toReactIntlLang(language),\n    messages: locale\n  });\n}","map":{"version":3,"names":["updateIntl","toGettextLang","toReactIntlLang","getCookieOptions","Cookies","changeLanguageCookies","language","req","_req$protocol","cookies","cookieOptions","secure","protocol","startsWith","sameSite","set","universalCookies","changeLanguage","locale","messages"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/actions/language/language.js"],"sourcesContent":["import { updateIntl } from 'react-intl-redux';\nimport {\n  toGettextLang,\n  toReactIntlLang,\n} from '@plone/volto/helpers/Utils/Utils';\nimport { getCookieOptions } from '@plone/volto/helpers/Cookies/cookies';\nimport Cookies from 'universal-cookie';\n\nexport function changeLanguageCookies(language, req) {\n  const cookies = new Cookies();\n\n  const cookieOptions = getCookieOptions({\n    secure: req?.protocol?.startsWith('https') ? true : false,\n    sameSite: 'strict',\n  });\n\n  if (!req) {\n    cookies.set('I18N_LANGUAGE', toGettextLang(language) || '', cookieOptions);\n  } else {\n    req.universalCookies.set(\n      'I18N_LANGUAGE',\n      toGettextLang(language) || '',\n      cookieOptions,\n    );\n  }\n}\n\n/**\n * Changes current language using react-intl-redux action and setting the cookie\n * @function changeLanguage\n * @param {string} language target language.\n * @param {number} locale set of locales corresponding the target language.\n * @returns {Object} Change the target language action.\n */\nexport function changeLanguage(language, locale, req) {\n  changeLanguageCookies(language, req);\n\n  return updateIntl({\n    locale: toReactIntlLang(language),\n    messages: locale,\n  });\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SACEC,aAAa,EACbC,eAAe,QACV,kCAAkC;AACzC,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAOC,OAAO,MAAM,kBAAkB;AAEtC,OAAO,SAASC,qBAAqBA,CAACC,QAAQ,EAAEC,GAAG,EAAE;EAAA,IAAAC,aAAA;EACnD,MAAMC,OAAO,GAAG,IAAIL,OAAO,CAAC,CAAC;EAE7B,MAAMM,aAAa,GAAGP,gBAAgB,CAAC;IACrCQ,MAAM,EAAEJ,GAAG,aAAHA,GAAG,gBAAAC,aAAA,GAAHD,GAAG,CAAEK,QAAQ,cAAAJ,aAAA,eAAbA,aAAA,CAAeK,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK;IACzDC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,IAAI,CAACP,GAAG,EAAE;IACRE,OAAO,CAACM,GAAG,CAAC,eAAe,EAAEd,aAAa,CAACK,QAAQ,CAAC,IAAI,EAAE,EAAEI,aAAa,CAAC;EAC5E,CAAC,MAAM;IACLH,GAAG,CAACS,gBAAgB,CAACD,GAAG,CACtB,eAAe,EACfd,aAAa,CAACK,QAAQ,CAAC,IAAI,EAAE,EAC7BI,aACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,cAAcA,CAACX,QAAQ,EAAEY,MAAM,EAAEX,GAAG,EAAE;EACpDF,qBAAqB,CAACC,QAAQ,EAAEC,GAAG,CAAC;EAEpC,OAAOP,UAAU,CAAC;IAChBkB,MAAM,EAAEhB,eAAe,CAACI,QAAQ,CAAC;IACjCa,QAAQ,EAAED;EACZ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}