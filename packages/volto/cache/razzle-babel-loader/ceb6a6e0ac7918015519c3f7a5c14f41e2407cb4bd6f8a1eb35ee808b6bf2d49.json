{"ast":null,"code":"/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport { isBlockActive } from '@plone/volto-slate/utils/blocks';\nimport config from '@plone/volto/registry';\n\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\nexport const toggleStyle = (editor, {\n  cssClass,\n  isBlock,\n  isRequested\n}) => {\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\nexport const toggleBlockStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const {\n    slate\n  } = config.settings;\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockStyleActive(editor, style);\n  const wantsList = false;\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem\n    });\n  }\n};\nexport const toggleInlineStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const {\n    slate\n  } = config.settings;\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isInlineStyleActive(editor, style);\n  const wantsList = false;\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem\n    });\n  }\n};\nexport const isBlockStyleActive = (editor, style) => {\n  const keyName = `style-${style}`;\n  const sn = Array.from(Editor.nodes(editor, {\n    match: n => {\n      const isStyle = typeof n.styleName === 'string' || n[keyName];\n      return !Editor.isEditor(n) && isStyle;\n    },\n    mode: 'all'\n  }));\n  for (const [n] of sn) {\n    if (typeof n.styleName === 'string') {\n      if (n.styleName.split(' ').filter(x => x === style).length > 0) {\n        return true;\n      }\n    } else if (n[keyName] && keyName.split('-').filter(x => x === style).length > 0) return true;\n  }\n  return false;\n};\nexport const isInlineStyleActive = (editor, style) => {\n  const m = Editor.marks(editor);\n  const keyName = `style-${style}`;\n  if (m && m[keyName]) {\n    return true;\n  }\n  return false;\n};\nexport const internalToggleBlockStyle = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\nexport const internalToggleInlineStyle = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\nexport const toggleBlockStyleAsListItem = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\n/*\n * Applies an inline style unto a list item.\n */\nexport const toggleInlineStyleAsListItem = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\nfunction toggleInlineStyleInSelection(editor, style) {\n  const m = Editor.marks(editor);\n  const keyName = 'style-' + style;\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\nfunction toggleBlockStyleInSelection(editor, style) {\n  const sn = Array.from(Editor.nodes(editor, {\n    mode: 'highest',\n    match: n => {\n      return !Editor.isEditor(n);\n    }\n  }));\n  for (const [n, p] of sn) {\n    let cn = n.styleName;\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter(x => x === style).length > 0) {\n      cn = cn.split(' ').filter(x => x !== style).join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n    Transforms.setNodes(editor, {\n      styleName: cn\n    }, {\n      at: p\n    });\n  }\n}","map":{"version":3,"names":["Editor","Transforms","isBlockActive","config","toggleStyle","editor","cssClass","isBlock","isRequested","toggleBlockStyle","toggleInlineStyle","style","slate","settings","isListItem","listItemType","isActive","isBlockStyleActive","wantsList","toggleBlockStyleAsListItem","internalToggleBlockStyle","console","warn","isInlineStyleActive","toggleInlineStyleAsListItem","internalToggleInlineStyle","keyName","sn","Array","from","nodes","match","n","isStyle","styleName","isEditor","mode","split","filter","x","length","m","marks","toggleBlockStyleInSelection","toggleInlineStyleInSelection","removeMark","addMark","p","cn","join","concat","setNodes","at"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/StyleMenu/utils.js"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport { isBlockActive } from '@plone/volto-slate/utils/blocks';\nimport config from '@plone/volto/registry';\n\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\nexport const toggleStyle = (editor, { cssClass, isBlock, isRequested }) => {\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\n\nexport const toggleBlockStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const toggleInlineStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isInlineStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const isBlockStyleActive = (editor, style) => {\n  const keyName = `style-${style}`;\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => {\n        const isStyle = typeof n.styleName === 'string' || n[keyName];\n        return !Editor.isEditor(n) && isStyle;\n      },\n      mode: 'all',\n    }),\n  );\n\n  for (const [n] of sn) {\n    if (typeof n.styleName === 'string') {\n      if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n        return true;\n      }\n    } else if (\n      n[keyName] &&\n      keyName.split('-').filter((x) => x === style).length > 0\n    )\n      return true;\n  }\n  return false;\n};\n\nexport const isInlineStyleActive = (editor, style) => {\n  const m = Editor.marks(editor);\n  const keyName = `style-${style}`;\n  if (m && m[keyName]) {\n    return true;\n  }\n  return false;\n};\n\nexport const internalToggleBlockStyle = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\nexport const internalToggleInlineStyle = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\nexport const toggleBlockStyleAsListItem = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\n/*\n * Applies an inline style unto a list item.\n */\nexport const toggleInlineStyleAsListItem = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\nfunction toggleInlineStyleInSelection(editor, style) {\n  const m = Editor.marks(editor);\n  const keyName = 'style-' + style;\n\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\n\nfunction toggleBlockStyleInSelection(editor, style) {\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      match: (n) => {\n        return !Editor.isEditor(n);\n      },\n    }),\n  );\n\n  for (const [n, p] of sn) {\n    let cn = n.styleName;\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n      cn = cn\n        .split(' ')\n        .filter((x) => x !== style)\n        .join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n    Transforms.setNodes(editor, { styleName: cn }, { at: p });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}