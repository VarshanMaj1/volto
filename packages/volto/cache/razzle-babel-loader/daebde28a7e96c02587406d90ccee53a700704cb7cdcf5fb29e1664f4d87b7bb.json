{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nimport config from '@plone/volto/registry';\nconst DEBUG = false;\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nexport const DetachedTextBlockEditor = props => {\n  var _data$instructions;\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription\n  } = props;\n  const {\n    value\n  } = data;\n  const intl = useIntl();\n  const {\n    textblockExtensions\n  } = config.settings.slate;\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  const withBlockProperties = React.useCallback(editor => {\n    editor.getBlockProps = () => props;\n    return editor;\n  }, [props]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner detached-slate-editor\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(SlateEditor, {\n    index: index,\n    readOnly: !inView,\n    properties: properties,\n    extensions: textblockExtensions,\n    renderExtensions: [withBlockProperties],\n    value: value,\n    block: block /* is this needed? */,\n    debug: DEBUG,\n    slateSettings: props.slateSettings,\n    onFocus: () => {\n      if (!selected) {\n        onSelectBlock(block);\n      }\n    },\n    onChange: (value, selection, editor) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n    },\n    selected: selected,\n    placeholder: placeholder,\n    onKeyDown: handleKeyDetached,\n    editableProps: {\n      'aria-multiline': 'true'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DetachedTextBlockEditor;","map":{"version":3,"names":["React","defineMessages","useIntl","useInView","SlateEditor","serializeNodesToText","handleKeyDetached","config","DEBUG","messages","text","DetachedTextBlockEditor","props","_data$instructions","data","index","properties","onSelectBlock","onChangeBlock","block","selected","formTitle","formDescription","value","intl","textblockExtensions","settings","slate","placeholder","formatMessage","instructions","ref","inView","threshold","rootMargin","withBlockProperties","useCallback","editor","getBlockProps","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","readOnly","extensions","renderExtensions","debug","slateSettings","onFocus","onChange","selection","_objectSpread","plaintext","onKeyDown","editableProps"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nimport config from '@plone/volto/registry';\n\nconst DEBUG = false;\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nexport const DetachedTextBlockEditor = (props) => {\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription,\n  } = props;\n  const { value } = data;\n\n  const intl = useIntl();\n  const { textblockExtensions } = config.settings.slate;\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  return (\n    <div className=\"text-slate-editor-inner detached-slate-editor\" ref={ref}>\n      <SlateEditor\n        index={index}\n        readOnly={!inView}\n        properties={properties}\n        extensions={textblockExtensions}\n        renderExtensions={[withBlockProperties]}\n        value={value}\n        block={block /* is this needed? */}\n        debug={DEBUG}\n        slateSettings={props.slateSettings}\n        onFocus={() => {\n          if (!selected) {\n            onSelectBlock(block);\n          }\n        }}\n        onChange={(value, selection, editor) => {\n          onChangeBlock(block, {\n            ...data,\n            value,\n            plaintext: serializeNodesToText(value || []),\n            // TODO: also add html serialized value\n          });\n        }}\n        selected={selected}\n        placeholder={placeholder}\n        onKeyDown={handleKeyDetached}\n        editableProps={{ 'aria-multiline': 'true' }}\n      />\n    </div>\n  );\n};\n\nexport default DetachedTextBlockEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}