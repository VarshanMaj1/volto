{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport qs from 'query-string';\nimport { useSelector } from 'react-redux';\nimport { findBlocks } from '@plone/volto/helpers/Blocks/Blocks';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\n/**\n * @function useCreatePageQueryStringKey\n * @description A hook that creates a key with an id if there are multiple blocks with pagination.\n * @returns {string} Example: page || page_012345678\n */\nconst useCreatePageQueryStringKey = id => {\n  _s();\n  const blockTypesWithPagination = ['search', 'listing'];\n  const blocks = useSelector(state => {\n    var _state$content, _state$content$data;\n    return state === null || state === void 0 ? void 0 : (_state$content = state.content) === null || _state$content === void 0 ? void 0 : (_state$content$data = _state$content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.blocks;\n  }) || [];\n  const hasMultiplePaginations = findBlocks(blocks, blockTypesWithPagination).length > 1;\n  return hasMultiplePaginations ? slugify(`page-${id}`) : 'page';\n};\n_s(useCreatePageQueryStringKey, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nconst useGetBlockType = id => {\n  _s2();\n  const blocks = useSelector(state => {\n    var _state$content2, _state$content2$data;\n    return state === null || state === void 0 ? void 0 : (_state$content2 = state.content) === null || _state$content2 === void 0 ? void 0 : (_state$content2$data = _state$content2.data) === null || _state$content2$data === void 0 ? void 0 : _state$content2$data.blocks;\n  }) || [];\n  const block = blocks[id];\n  return block ? block === null || block === void 0 ? void 0 : block['@type'] : null;\n};\n\n/**\n * A pagination helper that tracks the query and resets pagination in case the\n * query changes.\n */\n_s2(useGetBlockType, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport const usePagination = (id = null, defaultPage = 1) => {\n  _s3();\n  var _qs$parse;\n  const location = useLocation();\n  const history = useHistory();\n  const pageQueryStringKey = useCreatePageQueryStringKey(id);\n  const block_type = useGetBlockType(id);\n  const pageQueryParam = qs.parse(location.search)[pageQueryStringKey] || defaultPage;\n  const [currentPage, setCurrentPageState] = React.useState(parseInt(pageQueryParam));\n  const setCurrentPage = page => {\n    setCurrentPageState(page);\n    const newParams = _objectSpread(_objectSpread({}, qs.parse(location.search)), {}, {\n      [pageQueryStringKey]: page\n    });\n    history.push({\n      search: qs.stringify(newParams)\n    });\n  };\n  const queryRef = useRef((_qs$parse = qs.parse(location.search)) === null || _qs$parse === void 0 ? void 0 : _qs$parse.query);\n  useEffect(() => {\n    var _qs$parse2;\n    if (queryRef.current !== ((_qs$parse2 = qs.parse(location.search)) === null || _qs$parse2 === void 0 ? void 0 : _qs$parse2.query) && block_type === 'search') {\n      var _qs$parse3;\n      setCurrentPageState(defaultPage);\n      const newParams = _objectSpread(_objectSpread({}, qs.parse(location.search)), {}, {\n        [pageQueryStringKey]: defaultPage\n      });\n      delete newParams[pageQueryStringKey];\n      history.replace({\n        search: qs.stringify(newParams)\n      });\n      queryRef.current = (_qs$parse3 = qs.parse(location.search)) === null || _qs$parse3 === void 0 ? void 0 : _qs$parse3.query;\n    } else {\n      var _qs$parse4;\n      setCurrentPageState(parseInt(((_qs$parse4 = qs.parse(location.search)) === null || _qs$parse4 === void 0 ? void 0 : _qs$parse4[pageQueryStringKey]) || defaultPage));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search, block_type]);\n  return {\n    currentPage,\n    setCurrentPage\n  };\n};\n_s3(usePagination, \"w00x1quyyw8vkoX82PU8UirCoVU=\", false, function () {\n  return [useLocation, useHistory, useCreatePageQueryStringKey, useGetBlockType];\n});","map":{"version":3,"names":["React","useRef","useEffect","useHistory","useLocation","qs","useSelector","findBlocks","slugify","useCreatePageQueryStringKey","id","_s","blockTypesWithPagination","blocks","state","_state$content","_state$content$data","content","data","hasMultiplePaginations","length","useGetBlockType","_s2","_state$content2","_state$content2$data","block","usePagination","defaultPage","_s3","_qs$parse","location","history","pageQueryStringKey","block_type","pageQueryParam","parse","search","currentPage","setCurrentPageState","useState","parseInt","setCurrentPage","page","newParams","_objectSpread","push","stringify","queryRef","query","_qs$parse2","current","_qs$parse3","replace","_qs$parse4"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Utils/usePagination.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport qs from 'query-string';\nimport { useSelector } from 'react-redux';\nimport { findBlocks } from '@plone/volto/helpers/Blocks/Blocks';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\n/**\n * @function useCreatePageQueryStringKey\n * @description A hook that creates a key with an id if there are multiple blocks with pagination.\n * @returns {string} Example: page || page_012345678\n */\nconst useCreatePageQueryStringKey = (id) => {\n  const blockTypesWithPagination = ['search', 'listing'];\n  const blocks = useSelector((state) => state?.content?.data?.blocks) || [];\n  const hasMultiplePaginations =\n    findBlocks(blocks, blockTypesWithPagination).length > 1;\n\n  return hasMultiplePaginations ? slugify(`page-${id}`) : 'page';\n};\n\nconst useGetBlockType = (id) => {\n  const blocks = useSelector((state) => state?.content?.data?.blocks) || [];\n  const block = blocks[id];\n  return block ? block?.['@type'] : null;\n};\n\n/**\n * A pagination helper that tracks the query and resets pagination in case the\n * query changes.\n */\nexport const usePagination = (id = null, defaultPage = 1) => {\n  const location = useLocation();\n  const history = useHistory();\n  const pageQueryStringKey = useCreatePageQueryStringKey(id);\n  const block_type = useGetBlockType(id);\n  const pageQueryParam =\n    qs.parse(location.search)[pageQueryStringKey] || defaultPage;\n  const [currentPage, setCurrentPageState] = React.useState(\n    parseInt(pageQueryParam),\n  );\n  const setCurrentPage = (page) => {\n    setCurrentPageState(page);\n    const newParams = {\n      ...qs.parse(location.search),\n      [pageQueryStringKey]: page,\n    };\n    history.push({ search: qs.stringify(newParams) });\n  };\n\n  const queryRef = useRef(qs.parse(location.search)?.query);\n  useEffect(() => {\n    if (\n      queryRef.current !== qs.parse(location.search)?.query &&\n      block_type === 'search'\n    ) {\n      setCurrentPageState(defaultPage);\n      const newParams = {\n        ...qs.parse(location.search),\n        [pageQueryStringKey]: defaultPage,\n      };\n      delete newParams[pageQueryStringKey];\n      history.replace({ search: qs.stringify(newParams) });\n      queryRef.current = qs.parse(location.search)?.query;\n    } else {\n      setCurrentPageState(\n        parseInt(\n          qs.parse(location.search)?.[pageQueryStringKey] || defaultPage,\n        ),\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search, block_type]);\n\n  return {\n    currentPage,\n    setCurrentPage,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}