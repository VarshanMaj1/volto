{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Toolbar/Types.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport { FormattedMessage } from 'react-intl';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { toBackendLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nconst Types = ({\n  types,\n  pathname,\n  content,\n  currentLanguage\n}) => {\n  const {\n    settings\n  } = config;\n  return types.length > 0 || settings.isMultilingual && content['@components'].translations ? __jsx(\"div\", {\n    className: \"menu-more pastanaga-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, types.length > 0 && __jsx(React.Fragment, null, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Add Content\",\n    defaultMessage: \"Add Content\\u2026\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"pastanaga-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, map(filter(types), item => {\n    // Strip the type for the item we want to add\n    const contentTypeToAdd = item['@id'].split('@types/')[1];\n    // If we are in the root or in /contents, we need to strip the preceeding / and /contents\n    const currentPath = pathname.replace(/\\/contents$/, '').replace(/\\/$/, '');\n    // Finally build the route URL\n    const addContentTypeRoute = `${currentPath}/add?type=${contentTypeToAdd}`;\n    return __jsx(\"li\", {\n      key: item['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      to: addContentTypeRoute,\n      id: `toolbar-add-${item['@id'].split('@types/')[1].toLowerCase().replace(' ', '-')}`,\n      className: \"item\",\n      key: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 23\n      }\n    })));\n  })))), settings.isMultilingual && content['@components'].translations && (() => {\n    const translationsLeft = filter(settings.supportedLanguages, lang => !Boolean(content['@components'].translations && find(content['@components'].translations.items, {\n      language: lang\n    })) && toBackendLang(currentLanguage) !== lang);\n    return !isEmpty(translationsLeft) && __jsx(React.Fragment, null, __jsx(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add Translation\\u2026\",\n      defaultMessage: \"Add Translation\\u2026\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    })), __jsx(\"div\", {\n      className: \"pastanaga-menu-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }, map(translationsLeft, lang => __jsx(\"li\", {\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }\n    }, __jsx(Link, {\n      to: {\n        pathname: `${pathname}/create-translation`,\n        state: {\n          type: content['@type'],\n          translationOf: flattenToAppURL(content['@id']),\n          language: lang\n        }\n      },\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Translate to {lang}\",\n      defaultMessage: \"Translate to {lang}\",\n      values: {\n        lang: langmap[lang].nativeName.toLowerCase()\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 27\n      }\n    })))))));\n  })()) : __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  });\n};\nTypes.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    addable: PropTypes.bool,\n    title: PropTypes.string\n  })).isRequired\n};\nexport default connect(state => ({\n  types: filter(state.types.types, 'addable'),\n  currentLanguage: state.intl.locale\n}), {})(Types);","map":{"version":3,"names":["React","PropTypes","connect","Link","filter","find","isEmpty","map","FormattedMessage","flattenToAppURL","langmap","toBackendLang","config","Types","types","pathname","content","currentLanguage","settings","length","isMultilingual","translations","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","id","defaultMessage","item","contentTypeToAdd","split","currentPath","replace","addContentTypeRoute","key","to","toLowerCase","title","translationsLeft","supportedLanguages","lang","Boolean","items","language","state","type","translationOf","values","nativeName","propTypes","string","isRequired","arrayOf","shape","addable","bool","intl","locale"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Toolbar/Types.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport { FormattedMessage } from 'react-intl';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport { toBackendLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\n\nconst Types = ({ types, pathname, content, currentLanguage }) => {\n  const { settings } = config;\n  return types.length > 0 ||\n    (settings.isMultilingual && content['@components'].translations) ? (\n    <div className=\"menu-more pastanaga-menu\">\n      {types.length > 0 && (\n        <>\n          <header>\n            <FormattedMessage id=\"Add Content\" defaultMessage=\"Add Content…\" />\n          </header>\n          <div className=\"pastanaga-menu-list\">\n            <ul>\n              {map(filter(types), (item) => {\n                // Strip the type for the item we want to add\n                const contentTypeToAdd = item['@id'].split('@types/')[1];\n                // If we are in the root or in /contents, we need to strip the preceeding / and /contents\n                const currentPath = pathname\n                  .replace(/\\/contents$/, '')\n                  .replace(/\\/$/, '');\n                // Finally build the route URL\n                const addContentTypeRoute = `${currentPath}/add?type=${contentTypeToAdd}`;\n                return (\n                  <li key={item['@id']}>\n                    <Link\n                      to={addContentTypeRoute}\n                      id={`toolbar-add-${item['@id']\n                        .split('@types/')[1]\n                        .toLowerCase()\n                        .replace(' ', '-')}`}\n                      className=\"item\"\n                      key={item.title}\n                    >\n                      <FormattedMessage id={item.title} />\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n      {settings.isMultilingual &&\n        content['@components'].translations &&\n        (() => {\n          const translationsLeft = filter(\n            settings.supportedLanguages,\n            (lang) =>\n              !Boolean(\n                content['@components'].translations &&\n                  find(content['@components'].translations.items, {\n                    language: lang,\n                  }),\n              ) && toBackendLang(currentLanguage) !== lang,\n          );\n\n          return (\n            !isEmpty(translationsLeft) && (\n              <>\n                <header>\n                  <FormattedMessage\n                    id=\"Add Translation…\"\n                    defaultMessage=\"Add Translation…\"\n                  />\n                </header>\n                <div className=\"pastanaga-menu-list\">\n                  <ul>\n                    {map(translationsLeft, (lang) => (\n                      <li key={lang}>\n                        <Link\n                          to={{\n                            pathname: `${pathname}/create-translation`,\n                            state: {\n                              type: content['@type'],\n                              translationOf: flattenToAppURL(content['@id']),\n                              language: lang,\n                            },\n                          }}\n                          className=\"item\"\n                        >\n                          <FormattedMessage\n                            id=\"Translate to {lang}\"\n                            defaultMessage=\"Translate to {lang}\"\n                            values={{\n                              lang: langmap[lang].nativeName.toLowerCase(),\n                            }}\n                          />\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </>\n            )\n          );\n        })()}\n    </div>\n  ) : (\n    <span />\n  );\n};\n\nTypes.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(\n    PropTypes.shape({\n      '@id': PropTypes.string,\n      addable: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default connect(\n  (state) => ({\n    types: filter(state.types.types, 'addable'),\n    currentLanguage: state.intl.locale,\n  }),\n  {},\n)(Types);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Add Content","defaultMessage":"Add Content…"},{"id":"Add Translation…","defaultMessage":"Add Translation…"},{"id":"Translate to {lang}","defaultMessage":"Translate to {lang}"}]}},"sourceType":"module","externalDependencies":[]}