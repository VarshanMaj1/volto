{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Video/Body.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Embed, Message } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { isInternalURL, flattenToAppURL } from '@plone/volto/helpers/Url/Url';\n\n//Extracting videoID, listID and thumbnailURL from the video URL\nconst getVideoIDAndPlaceholder = url => {\n  let videoID = null;\n  let listID = null;\n  let thumbnailURL = null;\n  if (url) {\n    if (url.match('youtu')) {\n      if (url.match('list')) {\n        const matches = url.match(/^.*\\?list=(.*)|^.*&list=(.*)$/);\n        listID = matches[1] || matches[2];\n        let thumbnailID = null;\n        if (url.match(/\\?v=(.*)&list/)) {\n          thumbnailID = url.match(/^.*\\?v=(.*)&list(.*)/)[1];\n        }\n        if (url.match(/\\?v=(.*)\\?list/)) {\n          thumbnailID = url.match(/^.*\\?v=(.*)\\?list(.*)/)[1];\n        }\n        thumbnailURL = 'https://img.youtube.com/vi/' + thumbnailID + '/sddefault.jpg';\n      } else if (url.match('live')) {\n        videoID = url.match(/^.*\\/live\\/(.*)/)[1];\n      } else if (url.match(/\\.be\\//)) {\n        videoID = url.match(/^.*\\.be\\/(.*)/)[1];\n      } else if (url.match(/\\?v=/)) {\n        videoID = url.match(/^.*\\?v=(.*)$/)[1];\n      }\n      if (videoID) {\n        let thumbnailID = videoID;\n        if (videoID.match(/\\?si=/)) {\n          thumbnailID = videoID.match(/(.*)\\?si=(.*)/)[1];\n        }\n        //load video preview image from youtube\n        thumbnailURL = 'https://img.youtube.com/vi/' + thumbnailID + '/sddefault.jpg';\n      }\n    } else if (url.match('vimeo')) {\n      videoID = url.match(/^.*\\.com\\/(.*)/)[1];\n      if (videoID) {\n        let thumbnailID = videoID;\n        if (videoID.match(/\\?si=/)) {\n          thumbnailID = videoID.match(/(.*)\\?si=(.*)/)[1];\n        }\n        thumbnailURL = 'https://vumbnail.com/' + thumbnailID + '.jpg';\n      }\n    }\n  }\n  return {\n    videoID,\n    listID,\n    thumbnailURL\n  };\n};\nconst Body = ({\n  data,\n  isEditMode\n}) => {\n  let placeholder = data.preview_image ? isInternalURL(data.preview_image) ? `${flattenToAppURL(data.preview_image)}/@@images/image` : data.preview_image : null;\n  const {\n    videoID,\n    listID,\n    thumbnailURL\n  } = getVideoIDAndPlaceholder(data.url);\n  placeholder = !placeholder ? thumbnailURL : placeholder;\n  const ref = /*#__PURE__*/React.createRef();\n  const onKeyDown = e => {\n    if (e.nativeEvent.keyCode === 13) {\n      ref.current.handleClick();\n    }\n  };\n  const embedSettings = {\n    placeholder: placeholder,\n    icon: 'play',\n    defaultActive: false,\n    autoplay: false,\n    aspectRatio: '16:9',\n    tabIndex: 0,\n    onKeyPress: onKeyDown,\n    ref: ref\n  };\n  return __jsx(React.Fragment, null, data.url && __jsx(\"div\", {\n    className: cx('video-inner', {\n      'full-width': data.align === 'full'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, data.url.match('youtu') ? __jsx(React.Fragment, null, data.url.match('list') ? __jsx(Embed, _extends({\n    url: `https://www.youtube.com/embed/videoseries?list=${listID}`\n  }, embedSettings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  })) : __jsx(Embed, _extends({\n    id: videoID,\n    source: \"youtube\"\n  }, embedSettings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }))) : __jsx(React.Fragment, null, data.url.match('vimeo') ? __jsx(Embed, _extends({\n    id: videoID,\n    source: \"vimeo\"\n  }, embedSettings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  })) : __jsx(React.Fragment, null, data.url.match('.mp4') ?\n  // eslint-disable-next-line jsx-a11y/media-has-caption\n  __jsx(\"video\", {\n    src: isInternalURL(data.url) ? data.url.includes('@@download') ? data.url : `${flattenToAppURL(data.url)}/@@download/file` : data.url,\n    controls: true,\n    poster: placeholder,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }) : isEditMode ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 23\n    }\n  }, __jsx(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Please enter a valid URL by deleting the block and adding a new video block.\",\n    defaultMessage: \"Please enter a valid URL by deleting the block and adding a new video block.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 27\n    }\n  })))) : __jsx(\"div\", {\n    className: \"invalidVideoFormat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  })))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = Body;\nBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default Body;\nexport { getVideoIDAndPlaceholder };\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","PropTypes","FormattedMessage","Embed","Message","cx","isInternalURL","flattenToAppURL","getVideoIDAndPlaceholder","url","videoID","listID","thumbnailURL","match","matches","thumbnailID","Body","data","isEditMode","placeholder","preview_image","ref","createRef","onKeyDown","e","nativeEvent","keyCode","current","handleClick","embedSettings","icon","defaultActive","autoplay","aspectRatio","tabIndex","onKeyPress","__jsx","Fragment","className","align","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","id","source","src","includes","controls","poster","type","defaultMessage","_c","propTypes","objectOf","any","isRequired","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Video/Body.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Embed, Message } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { isInternalURL, flattenToAppURL } from '@plone/volto/helpers/Url/Url';\n\n//Extracting videoID, listID and thumbnailURL from the video URL\nconst getVideoIDAndPlaceholder = (url) => {\n  let videoID = null;\n  let listID = null;\n  let thumbnailURL = null;\n\n  if (url) {\n    if (url.match('youtu')) {\n      if (url.match('list')) {\n        const matches = url.match(/^.*\\?list=(.*)|^.*&list=(.*)$/);\n        listID = matches[1] || matches[2];\n\n        let thumbnailID = null;\n        if (url.match(/\\?v=(.*)&list/)) {\n          thumbnailID = url.match(/^.*\\?v=(.*)&list(.*)/)[1];\n        }\n        if (url.match(/\\?v=(.*)\\?list/)) {\n          thumbnailID = url.match(/^.*\\?v=(.*)\\?list(.*)/)[1];\n        }\n        thumbnailURL =\n          'https://img.youtube.com/vi/' + thumbnailID + '/sddefault.jpg';\n      } else if (url.match('live')) {\n        videoID = url.match(/^.*\\/live\\/(.*)/)[1];\n      } else if (url.match(/\\.be\\//)) {\n        videoID = url.match(/^.*\\.be\\/(.*)/)[1];\n      } else if (url.match(/\\?v=/)) {\n        videoID = url.match(/^.*\\?v=(.*)$/)[1];\n      }\n\n      if (videoID) {\n        let thumbnailID = videoID;\n        if (videoID.match(/\\?si=/)) {\n          thumbnailID = videoID.match(/(.*)\\?si=(.*)/)[1];\n        }\n        //load video preview image from youtube\n        thumbnailURL =\n          'https://img.youtube.com/vi/' + thumbnailID + '/sddefault.jpg';\n      }\n    } else if (url.match('vimeo')) {\n      videoID = url.match(/^.*\\.com\\/(.*)/)[1];\n      if (videoID) {\n        let thumbnailID = videoID;\n        if (videoID.match(/\\?si=/)) {\n          thumbnailID = videoID.match(/(.*)\\?si=(.*)/)[1];\n        }\n        thumbnailURL = 'https://vumbnail.com/' + thumbnailID + '.jpg';\n      }\n    }\n  }\n  return { videoID, listID, thumbnailURL };\n};\n\nconst Body = ({ data, isEditMode }) => {\n  let placeholder = data.preview_image\n    ? isInternalURL(data.preview_image)\n      ? `${flattenToAppURL(data.preview_image)}/@@images/image`\n      : data.preview_image\n    : null;\n\n  const { videoID, listID, thumbnailURL } = getVideoIDAndPlaceholder(data.url);\n\n  placeholder = !placeholder ? thumbnailURL : placeholder;\n\n  const ref = React.createRef();\n  const onKeyDown = (e) => {\n    if (e.nativeEvent.keyCode === 13) {\n      ref.current.handleClick();\n    }\n  };\n\n  const embedSettings = {\n    placeholder: placeholder,\n    icon: 'play',\n    defaultActive: false,\n    autoplay: false,\n    aspectRatio: '16:9',\n    tabIndex: 0,\n    onKeyPress: onKeyDown,\n    ref: ref,\n  };\n\n  return (\n    <>\n      {data.url && (\n        <div\n          className={cx('video-inner', {\n            'full-width': data.align === 'full',\n          })}\n        >\n          {data.url.match('youtu') ? (\n            <>\n              {data.url.match('list') ? (\n                <Embed\n                  url={`https://www.youtube.com/embed/videoseries?list=${listID}`}\n                  {...embedSettings}\n                />\n              ) : (\n                <Embed id={videoID} source=\"youtube\" {...embedSettings} />\n              )}\n            </>\n          ) : (\n            <>\n              {data.url.match('vimeo') ? (\n                <Embed id={videoID} source=\"vimeo\" {...embedSettings} />\n              ) : (\n                <>\n                  {data.url.match('.mp4') ? (\n                    // eslint-disable-next-line jsx-a11y/media-has-caption\n                    <video\n                      src={\n                        isInternalURL(data.url)\n                          ? data.url.includes('@@download')\n                            ? data.url\n                            : `${flattenToAppURL(data.url)}/@@download/file`\n                          : data.url\n                      }\n                      controls\n                      poster={placeholder}\n                      type=\"video/mp4\"\n                    />\n                  ) : isEditMode ? (\n                    <div>\n                      <Message>\n                        <center>\n                          <FormattedMessage\n                            id=\"Please enter a valid URL by deleting the block and adding a new video block.\"\n                            defaultMessage=\"Please enter a valid URL by deleting the block and adding a new video block.\"\n                          />\n                        </center>\n                      </Message>\n                    </div>\n                  ) : (\n                    <div className=\"invalidVideoFormat\" />\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default Body;\nexport { getVideoIDAndPlaceholder };\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Please enter a valid URL by deleting the block and adding a new video block.","defaultMessage":"Please enter a valid URL by deleting the block and adding a new video block."}]}},"sourceType":"module","externalDependencies":[]}