{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Teaser/Body.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultBody from './DefaultBody';\nimport config from '@plone/volto/registry';\nconst TeaserBody = props => {\n  var _data$href, _data$href$;\n  const {\n    variation,\n    data\n  } = props;\n  const hasType = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : (_data$href$ = _data$href[0]) === null || _data$href$ === void 0 ? void 0 : _data$href$['@type'];\n\n  // Compatible with the previous version of the component registry\n  // and the Volto 16 one.\n  const BodyComponent = (config === null || config === void 0 ? void 0 : config.getComponent) && hasType && config.getComponent({\n    name: 'Teaser',\n    dependencies: [hasType]\n  }).component || (variation === null || variation === void 0 ? void 0 : variation.template) || DefaultBody;\n  return __jsx(BodyComponent, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  }));\n};\nTeaserBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool\n};\nexport default TeaserBody;","map":{"version":3,"names":["React","PropTypes","DefaultBody","config","TeaserBody","props","_data$href","_data$href$","variation","data","hasType","href","BodyComponent","getComponent","name","dependencies","component","template","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","objectOf","any","isRequired","isEditMode","bool"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Teaser/Body.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultBody from './DefaultBody';\nimport config from '@plone/volto/registry';\n\nconst TeaserBody = (props) => {\n  const { variation, data } = props;\n\n  const hasType = data.href?.[0]?.['@type'];\n\n  // Compatible with the previous version of the component registry\n  // and the Volto 16 one.\n  const BodyComponent =\n    (config?.getComponent &&\n      hasType &&\n      config.getComponent({ name: 'Teaser', dependencies: [hasType] })\n        .component) ||\n    variation?.template ||\n    DefaultBody;\n\n  return <BodyComponent {...props} />;\n};\n\nTeaserBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nexport default TeaserBody;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA,IAAAC,UAAA,EAAAC,WAAA;EAC5B,MAAM;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGJ,KAAK;EAEjC,MAAMK,OAAO,IAAAJ,UAAA,GAAGG,IAAI,CAACE,IAAI,cAAAL,UAAA,wBAAAC,WAAA,GAATD,UAAA,CAAY,CAAC,CAAC,cAAAC,WAAA,uBAAdA,WAAA,CAAiB,OAAO,CAAC;;EAEzC;EACA;EACA,MAAMK,aAAa,GAChB,CAAAT,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEU,YAAY,KACnBH,OAAO,IACPP,MAAM,CAACU,YAAY,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,YAAY,EAAE,CAACL,OAAO;EAAE,CAAC,CAAC,CAC7DM,SAAS,KACdR,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAES,QAAQ,KACnBf,WAAW;EAEb,OAAOgB,KAAA,CAACN,aAAa,EAAAO,QAAA,KAAKd,KAAK;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CAAC;AACrC,CAAC;AAEDrB,UAAU,CAACsB,SAAS,GAAG;EACrBjB,IAAI,EAAER,SAAS,CAAC0B,QAAQ,CAAC1B,SAAS,CAAC2B,GAAG,CAAC,CAACC,UAAU;EAClDC,UAAU,EAAE7B,SAAS,CAAC8B;AACxB,CAAC;AAED,eAAe3B,UAAU","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}