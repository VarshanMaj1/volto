{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport { ADD_COMMENT, DELETE_COMMENT, LIST_COMMENTS, LIST_MORE_COMMENTS, UPDATE_COMMENT } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  items: [],\n  items_total: null,\n  permissions: {},\n  next: null\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  var _action$result$batchi, _action$result$batchi2;\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: action.result.items,\n        next: (_action$result$batchi = action.result.batching) === null || _action$result$batchi === void 0 ? void 0 : _action$result$batchi.next,\n        items_total: action.result.items_total,\n        permissions: action.result.permissions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: [...state.items, ...action.result.items],\n        next: (_action$result$batchi2 = action.result.batching) === null || _action$result$batchi2 === void 0 ? void 0 : _action$result$batchi2.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${LIST_COMMENTS}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: [],\n        items_total: null,\n        permissions: {},\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_COMMENT","DELETE_COMMENT","LIST_COMMENTS","LIST_MORE_COMMENTS","UPDATE_COMMENT","initialState","add","loaded","loading","error","delete","update","list","items","items_total","permissions","next","getRequestKey","actionType","split","toLowerCase","comments","state","action","_action$result$batchi","_action$result$batchi2","type","_objectSpread","result","batching"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/reducers/comments/comments.js"],"sourcesContent":["/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n  items_total: null,\n  permissions: {},\n  next: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result.items,\n        next: action.result.batching?.next,\n        items_total: action.result.items_total,\n        permissions: action.result.permissions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: [...state.items, ...action.result.items],\n        next: action.result.batching?.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_FAIL`:\n      return {\n        ...state,\n        items: [],\n        items_total: null,\n        permissions: {},\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}