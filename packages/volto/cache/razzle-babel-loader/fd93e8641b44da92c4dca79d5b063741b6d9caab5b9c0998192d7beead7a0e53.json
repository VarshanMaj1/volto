{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/View/RenderBlocks.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { defineMessages, useIntl } from 'react-intl';\nimport map from 'lodash/map';\nimport MaybeWrap from '@plone/volto/components/manage/MaybeWrap/MaybeWrap';\nimport { applyBlockDefaults, getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData } from '@plone/volto/helpers/Blocks/Blocks';\nimport StyleWrapper from '@plone/volto/components/manage/Blocks/Block/StyleWrapper';\nimport config from '@plone/volto/registry';\nimport ViewDefaultBlock from '@plone/volto/components/manage/Blocks/Block/DefaultView';\nimport RenderEmptyBlock from './RenderEmptyBlock';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  },\n  invalidBlock: {\n    \"id\": \"Invalid Block\",\n    \"defaultMessage\": \"Invalid block - Will be removed on saving\"\n  }\n});\nconst RenderBlocks = props => {\n  _s();\n  const {\n    content,\n    location,\n    metadata,\n    blockWrapperTag\n  } = props;\n  const intl = useIntl();\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n  return hasBlocksData(content) ? __jsx(CustomTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, map(content[blocksLayoutFieldname].items, block => {\n    var _blocksConfig$content, _content$blocksFieldn, _content$blocksFieldn2, _content$blocksFieldn3, _content$blocksFieldn4;\n    const Block = ((_blocksConfig$content = blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _blocksConfig$content === void 0 ? void 0 : _blocksConfig$content.view) || ViewDefaultBlock;\n    const blockData = applyBlockDefaults({\n      data: content[blocksFieldname][block],\n      intl,\n      metadata,\n      properties: content\n    });\n    if (((_content$blocksFieldn3 = content[blocksFieldname]) === null || _content$blocksFieldn3 === void 0 ? void 0 : (_content$blocksFieldn4 = _content$blocksFieldn3[block]) === null || _content$blocksFieldn4 === void 0 ? void 0 : _content$blocksFieldn4['@type']) === 'empty') {\n      return __jsx(MaybeWrap, {\n        key: block,\n        condition: blockWrapperTag,\n        as: blockWrapperTag,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, __jsx(RenderEmptyBlock, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }));\n    }\n    if (Block) {\n      return __jsx(MaybeWrap, {\n        key: block,\n        condition: blockWrapperTag,\n        as: blockWrapperTag,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, __jsx(StyleWrapper, _extends({\n        key: block\n      }, props, {\n        id: block,\n        block: block,\n        data: blockData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }), __jsx(Block, {\n        id: block,\n        metadata: metadata,\n        properties: content,\n        data: blockData,\n        path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n        blocksConfig: blocksConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      })));\n    }\n    if (blockData) {\n      var _content$blocksFieldn5, _content$blocksFieldn6;\n      return __jsx(\"div\", {\n        key: block,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, intl.formatMessage(messages.unknownBlock, {\n        block: (_content$blocksFieldn5 = content[blocksFieldname]) === null || _content$blocksFieldn5 === void 0 ? void 0 : (_content$blocksFieldn6 = _content$blocksFieldn5[block]) === null || _content$blocksFieldn6 === void 0 ? void 0 : _content$blocksFieldn6['@type']\n      }));\n    }\n    return __jsx(\"div\", {\n      key: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, intl.formatMessage(messages.invalidBlock));\n  })) : '';\n};\n_s(RenderBlocks, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n_c = RenderBlocks;\nexport default RenderBlocks;\nvar _c;\n$RefreshReg$(_c, \"RenderBlocks\");","map":{"version":3,"names":["React","getBaseUrl","defineMessages","useIntl","map","MaybeWrap","applyBlockDefaults","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","StyleWrapper","config","ViewDefaultBlock","RenderEmptyBlock","messages","unknownBlock","invalidBlock","RenderBlocks","props","_s","content","location","metadata","blockWrapperTag","intl","blocksFieldname","blocksLayoutFieldname","blocksConfig","blocks","CustomTag","as","Fragment","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","items","block","_blocksConfig$content","_content$blocksFieldn","_content$blocksFieldn2","_content$blocksFieldn3","_content$blocksFieldn4","Block","view","blockData","data","properties","key","condition","_extends","id","path","pathname","_content$blocksFieldn5","_content$blocksFieldn6","formatMessage","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/View/RenderBlocks.jsx"],"sourcesContent":["import React from 'react';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { defineMessages, useIntl } from 'react-intl';\nimport map from 'lodash/map';\nimport MaybeWrap from '@plone/volto/components/manage/MaybeWrap/MaybeWrap';\nimport {\n  applyBlockDefaults,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport StyleWrapper from '@plone/volto/components/manage/Blocks/Block/StyleWrapper';\nimport config from '@plone/volto/registry';\nimport ViewDefaultBlock from '@plone/volto/components/manage/Blocks/Block/DefaultView';\nimport RenderEmptyBlock from './RenderEmptyBlock';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n  invalidBlock: {\n    id: 'Invalid Block',\n    defaultMessage: 'Invalid block - Will be removed on saving',\n  },\n});\n\nconst RenderBlocks = (props) => {\n  const { content, location, metadata, blockWrapperTag } = props;\n  const intl = useIntl();\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n\n  return hasBlocksData(content) ? (\n    <CustomTag>\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          blocksConfig[content[blocksFieldname]?.[block]?.['@type']]?.view ||\n          ViewDefaultBlock;\n\n        const blockData = applyBlockDefaults({\n          data: content[blocksFieldname][block],\n          intl,\n          metadata,\n          properties: content,\n        });\n\n        if (content[blocksFieldname]?.[block]?.['@type'] === 'empty') {\n          return (\n            <MaybeWrap\n              key={block}\n              condition={blockWrapperTag}\n              as={blockWrapperTag}\n            >\n              <RenderEmptyBlock />\n            </MaybeWrap>\n          );\n        }\n\n        if (Block) {\n          return (\n            <MaybeWrap\n              key={block}\n              condition={blockWrapperTag}\n              as={blockWrapperTag}\n            >\n              <StyleWrapper\n                key={block}\n                {...props}\n                id={block}\n                block={block}\n                data={blockData}\n              >\n                <Block\n                  id={block}\n                  metadata={metadata}\n                  properties={content}\n                  data={blockData}\n                  path={getBaseUrl(location?.pathname || '')}\n                  blocksConfig={blocksConfig}\n                />\n              </StyleWrapper>\n            </MaybeWrap>\n          );\n        }\n\n        if (blockData) {\n          return (\n            <div key={block}>\n              {intl.formatMessage(messages.unknownBlock, {\n                block: content[blocksFieldname]?.[block]?.['@type'],\n              })}\n            </div>\n          );\n        }\n\n        return (\n          <div key={block}>{intl.formatMessage(messages.invalidBlock)}</div>\n        );\n      })}\n    </CustomTag>\n  ) : (\n    ''\n  );\n};\n\nexport default RenderBlocks;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"},{"id":"Invalid Block","defaultMessage":"Invalid block - Will be removed on saving"}]}},"sourceType":"module","externalDependencies":[]}