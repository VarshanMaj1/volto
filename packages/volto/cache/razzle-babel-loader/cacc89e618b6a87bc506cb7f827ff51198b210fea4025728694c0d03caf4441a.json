{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Block/BlocksForm.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport cloneDeep from 'lodash/cloneDeep';\nimport map from 'lodash/map';\nimport EditBlock from './Edit';\nimport DragDropList from '@plone/volto/components/manage/DragDropList/DragDropList';\nimport { getBlocks, getBlocksFieldname, getBlocksLayoutFieldname, applyBlockDefaults, getBlocksHierarchy, addBlock, insertBlock, changeBlock, deleteBlock, moveBlock, moveBlockEnhanced, mutateBlock, nextBlockId, previousBlockId } from '@plone/volto/helpers/Blocks/Blocks';\nimport { useDetectClickOutside } from '@plone/volto/helpers/Utils/useDetectClickOutside';\nimport { useEvent } from '@plone/volto/helpers/Utils/useEvent';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { setSidebarTab } from '@plone/volto/actions/sidebar/sidebar';\nimport { setUIState } from '@plone/volto/actions/form/form';\nimport { useDispatch } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { createPortal } from 'react-dom';\nimport Order from './Order/Order';\nconst BlocksForm = props => {\n  const {\n    pathname,\n    onChangeField,\n    properties,\n    type,\n    navRoot,\n    onChangeFormData,\n    selectedBlock,\n    multiSelected,\n    onSelectBlock,\n    allowedBlocks,\n    showRestricted,\n    title,\n    description,\n    metadata,\n    manage,\n    children,\n    isMainForm = true,\n    isContainer,\n    stopPropagation,\n    disableAddBlockOnEnterKey,\n    blocksConfig = config.blocks.blocksConfig,\n    editable = true,\n    direction = 'vertical',\n    history,\n    location,\n    token,\n    errors,\n    blocksErrors\n  } = props;\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(false);\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  const blockList = getBlocks(properties);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const ClickOutsideListener = () => {\n    onSelectBlock(null);\n    dispatch(setSidebarTab(0));\n  };\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n    // Disabled feature for now https://github.com/plone/volto/pull/2389#issuecomment-830027413\n    disableClick: true,\n    disableKeys: !isMainForm\n  });\n  const handleKeyDown = (e, index, block, node, {\n    disableEnter = false,\n    disableArrowUp = false,\n    disableArrowDown = false\n  } = {}) => {\n    const isMultipleSelection = e.shiftKey;\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      onFocusPreviousBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      onFocusNextBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      if (!disableAddBlockOnEnterKey) {\n        onSelectBlock(onAddBlock(config.settings.defaultBlockType, index + 1));\n      }\n      e.preventDefault();\n    }\n  };\n  const onFocusPreviousBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const prev = previousBlockId(properties, currentBlock);\n    if (prev === null) return;\n    blockNode.blur();\n    onSelectBlock(prev, isMultipleSelection);\n  };\n  const onFocusNextBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const next = nextBlockId(properties, currentBlock);\n    if (next === null) return;\n    blockNode.blur();\n    onSelectBlock(next, isMultipleSelection);\n  };\n  const onMutateBlock = (id, value) => {\n    const newFormData = mutateBlock(properties, id, value, {}, intl);\n    onChangeFormData(newFormData);\n  };\n  const onInsertBlock = (id, value, current) => {\n    const [newId, newFormData] = insertBlock(properties, id, value, current, config.experimental.addBlockButton.enabled ? 1 : 0, {}, intl);\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blockData = newFormData[blocksFieldname][newId];\n    newFormData[blocksFieldname][newId] = applyBlockDefaults({\n      data: blockData,\n      intl,\n      metadata,\n      properties\n    });\n    onChangeFormData(newFormData);\n    return newId;\n  };\n  const onAddBlock = (type, index) => {\n    if (editable) {\n      const [id, newFormData] = addBlock(properties, type, index, {}, intl);\n      const blocksFieldname = getBlocksFieldname(newFormData);\n      const blockData = newFormData[blocksFieldname][id];\n      newFormData[blocksFieldname][id] = applyBlockDefaults({\n        data: blockData,\n        intl,\n        metadata,\n        properties\n      });\n      onChangeFormData(newFormData);\n      return id;\n    }\n  };\n  const onChangeBlock = (id, value) => {\n    const newFormData = changeBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n  const onDeleteBlock = (id, selectPrev) => {\n    const previous = previousBlockId(properties, id);\n    const newFormData = deleteBlock(properties, id, intl);\n    onChangeFormData(newFormData);\n    onSelectBlock(selectPrev ? previous : null);\n  };\n  const onMoveBlock = (dragIndex, hoverIndex) => {\n    const newFormData = moveBlock(properties, dragIndex, hoverIndex);\n    onChangeFormData(newFormData);\n  };\n  const onMoveBlockEnhanced = ({\n    source,\n    destination\n  }) => {\n    const newFormData = moveBlockEnhanced(cloneDeep(properties), {\n      source,\n      destination\n    });\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(newFormData);\n    let error = false;\n    const allowedBlocks = Object.keys(blocksConfig);\n    map(newFormData[blocksLayoutFieldname].items, id => {\n      var _block$blocksLayoutFi;\n      const block = newFormData[blocksFieldname][id];\n      if (!allowedBlocks.includes(block['@type'])) {\n        error = true;\n      }\n      if (Array.isArray((_block$blocksLayoutFi = block[blocksLayoutFieldname]) === null || _block$blocksLayoutFi === void 0 ? void 0 : _block$blocksLayoutFi.items)) {\n        const size = block[blocksLayoutFieldname].items.length;\n        const allowedSubBlocks = [...(blocksConfig[block['@type']].allowedBlocks || allowedBlocks), 'empty'] || ['empty'];\n        if (size < 1 || size > (blocksConfig[block['@type']].maxLength || 4)) {\n          error = true;\n        }\n        map(block[blocksLayoutFieldname].items, subId => {\n          const subBlock = block[blocksFieldname][subId];\n          if (!allowedSubBlocks.includes(subBlock['@type'])) {\n            error = true;\n          }\n        });\n      }\n    });\n    if (!error) {\n      onChangeFormData(newFormData);\n      dispatch(setUIState({\n        selected: null,\n        multiSelected: [],\n        gridSelected: null\n      }));\n    }\n  };\n  const defaultBlockWrapper = ({\n    draginfo\n  }, editBlock, blockProps) => __jsx(EditBlockWrapper, {\n    draginfo: draginfo,\n    blockProps: blockProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, editBlock);\n  const editBlockWrapper = children || defaultBlockWrapper;\n\n  // Remove invalid blocks on saving\n  // Note they are alreaady filtered by DragDropList, but we also want them\n  // to be removed when the user saves the page next. Otherwise the invalid\n  // blocks would linger for ever.\n\n  for (const [n, v] of blockList) {\n    if (!v) {\n      const newFormData = deleteBlock(properties, n, intl);\n      onChangeFormData(newFormData);\n    }\n  }\n  useEvent('voltoClickBelowContent', () => {\n    if (!config.experimental.addBlockButton.enabled || !isMainForm) return;\n    onSelectBlock(onAddBlock(config.settings.defaultBlockType, blockList.length));\n  });\n  return __jsx(React.Fragment, null, isMainForm && isClient && /*#__PURE__*/createPortal(__jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, __jsx(Order, {\n    items: getBlocksHierarchy(properties),\n    onMoveBlock: onMoveBlockEnhanced,\n    onDeleteBlock: onDeleteBlock,\n    onSelectBlock: onSelectBlock,\n    removable: true,\n    errors: blocksErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  })), document.getElementById('sidebar-order')), __jsx(\"div\", {\n    className: \"blocks-form\",\n    role: \"presentation\",\n    ref: ref,\n    onKeyDown: e => {\n      if (stopPropagation) {\n        e.stopPropagation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }, __jsx(\"fieldset\", {\n    className: \"invisible\",\n    disabled: !editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }, __jsx(DragDropList, {\n    childList: blockList,\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      const newFormData = moveBlock(properties, source.index, destination.index);\n      onChangeFormData(newFormData);\n      return true;\n    },\n    direction: direction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, dragProps => {\n    const {\n      child,\n      childId,\n      index\n    } = dragProps;\n    const blockProps = {\n      allowedBlocks,\n      showRestricted,\n      block: childId,\n      data: child,\n      handleKeyDown,\n      id: childId,\n      formTitle: title,\n      formDescription: description,\n      index,\n      manage,\n      onAddBlock,\n      onInsertBlock,\n      onChangeBlock,\n      onChangeField,\n      onChangeFormData,\n      onDeleteBlock,\n      onFocusNextBlock,\n      onFocusPreviousBlock,\n      onMoveBlock,\n      onMutateBlock,\n      onSelectBlock,\n      pathname,\n      metadata,\n      properties,\n      contentType: type,\n      navRoot,\n      blocksConfig,\n      selected: selectedBlock === childId,\n      multiSelected: multiSelected === null || multiSelected === void 0 ? void 0 : multiSelected.includes(childId),\n      type: child['@type'],\n      editable,\n      showBlockChooser: selectedBlock === childId,\n      detached: isContainer,\n      // Properties to pass to the BlocksForm to match the View ones\n      content: properties,\n      history,\n      location,\n      token,\n      errors,\n      blocksErrors\n    };\n    return editBlockWrapper(dragProps, __jsx(EditBlock, _extends({\n      key: childId\n    }, blockProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }\n    })), blockProps);\n  }))));\n};\nexport default BlocksForm;","map":{"version":3,"names":["React","useEffect","useState","useIntl","cloneDeep","map","EditBlock","DragDropList","getBlocks","getBlocksFieldname","getBlocksLayoutFieldname","applyBlockDefaults","getBlocksHierarchy","addBlock","insertBlock","changeBlock","deleteBlock","moveBlock","moveBlockEnhanced","mutateBlock","nextBlockId","previousBlockId","useDetectClickOutside","useEvent","EditBlockWrapper","setSidebarTab","setUIState","useDispatch","config","createPortal","Order","BlocksForm","props","pathname","onChangeField","properties","type","navRoot","onChangeFormData","selectedBlock","multiSelected","onSelectBlock","allowedBlocks","showRestricted","title","description","metadata","manage","children","isMainForm","isContainer","stopPropagation","disableAddBlockOnEnterKey","blocksConfig","blocks","editable","direction","history","location","token","errors","blocksErrors","isClient","setIsClient","blockList","dispatch","intl","ClickOutsideListener","ref","onTriggered","triggerKeys","disableClick","disableKeys","handleKeyDown","e","index","block","node","disableEnter","disableArrowUp","disableArrowDown","isMultipleSelection","shiftKey","key","onFocusPreviousBlock","preventDefault","onFocusNextBlock","onAddBlock","settings","defaultBlockType","currentBlock","blockNode","prev","blur","next","onMutateBlock","id","value","newFormData","onInsertBlock","current","newId","experimental","addBlockButton","enabled","blocksFieldname","blockData","data","onChangeBlock","onDeleteBlock","selectPrev","previous","onMoveBlock","dragIndex","hoverIndex","onMoveBlockEnhanced","source","destination","blocksLayoutFieldname","error","Object","keys","items","_block$blocksLayoutFi","includes","Array","isArray","size","length","allowedSubBlocks","maxLength","subId","subBlock","selected","gridSelected","defaultBlockWrapper","draginfo","editBlock","blockProps","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","editBlockWrapper","n","v","Fragment","removable","document","getElementById","className","role","onKeyDown","disabled","childList","onMoveItem","result","dragProps","child","childId","formTitle","formDescription","contentType","showBlockChooser","detached","content","_extends"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Block/BlocksForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport cloneDeep from 'lodash/cloneDeep';\nimport map from 'lodash/map';\nimport EditBlock from './Edit';\nimport DragDropList from '@plone/volto/components/manage/DragDropList/DragDropList';\nimport {\n  getBlocks,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  applyBlockDefaults,\n  getBlocksHierarchy,\n  addBlock,\n  insertBlock,\n  changeBlock,\n  deleteBlock,\n  moveBlock,\n  moveBlockEnhanced,\n  mutateBlock,\n  nextBlockId,\n  previousBlockId,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport { useDetectClickOutside } from '@plone/volto/helpers/Utils/useDetectClickOutside';\nimport { useEvent } from '@plone/volto/helpers/Utils/useEvent';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { setSidebarTab } from '@plone/volto/actions/sidebar/sidebar';\nimport { setUIState } from '@plone/volto/actions/form/form';\nimport { useDispatch } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { createPortal } from 'react-dom';\n\nimport Order from './Order/Order';\n\nconst BlocksForm = (props) => {\n  const {\n    pathname,\n    onChangeField,\n    properties,\n    type,\n    navRoot,\n    onChangeFormData,\n    selectedBlock,\n    multiSelected,\n    onSelectBlock,\n    allowedBlocks,\n    showRestricted,\n    title,\n    description,\n    metadata,\n    manage,\n    children,\n    isMainForm = true,\n    isContainer,\n    stopPropagation,\n    disableAddBlockOnEnterKey,\n    blocksConfig = config.blocks.blocksConfig,\n    editable = true,\n    direction = 'vertical',\n    history,\n    location,\n    token,\n    errors,\n    blocksErrors,\n  } = props;\n\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const blockList = getBlocks(properties);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    onSelectBlock(null);\n    dispatch(setSidebarTab(0));\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n    // Disabled feature for now https://github.com/plone/volto/pull/2389#issuecomment-830027413\n    disableClick: true,\n    disableKeys: !isMainForm,\n  });\n\n  const handleKeyDown = (\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) => {\n    const isMultipleSelection = e.shiftKey;\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      onFocusPreviousBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      onFocusNextBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      if (!disableAddBlockOnEnterKey) {\n        onSelectBlock(onAddBlock(config.settings.defaultBlockType, index + 1));\n      }\n      e.preventDefault();\n    }\n  };\n\n  const onFocusPreviousBlock = (\n    currentBlock,\n    blockNode,\n    isMultipleSelection,\n  ) => {\n    const prev = previousBlockId(properties, currentBlock);\n    if (prev === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(prev, isMultipleSelection);\n  };\n\n  const onFocusNextBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const next = nextBlockId(properties, currentBlock);\n    if (next === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(next, isMultipleSelection);\n  };\n\n  const onMutateBlock = (id, value) => {\n    const newFormData = mutateBlock(properties, id, value, {}, intl);\n    onChangeFormData(newFormData);\n  };\n\n  const onInsertBlock = (id, value, current) => {\n    const [newId, newFormData] = insertBlock(\n      properties,\n      id,\n      value,\n      current,\n      config.experimental.addBlockButton.enabled ? 1 : 0,\n      {},\n      intl,\n    );\n\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blockData = newFormData[blocksFieldname][newId];\n    newFormData[blocksFieldname][newId] = applyBlockDefaults({\n      data: blockData,\n      intl,\n      metadata,\n      properties,\n    });\n\n    onChangeFormData(newFormData);\n    return newId;\n  };\n\n  const onAddBlock = (type, index) => {\n    if (editable) {\n      const [id, newFormData] = addBlock(properties, type, index, {}, intl);\n      const blocksFieldname = getBlocksFieldname(newFormData);\n      const blockData = newFormData[blocksFieldname][id];\n      newFormData[blocksFieldname][id] = applyBlockDefaults({\n        data: blockData,\n        intl,\n        metadata,\n        properties,\n      });\n      onChangeFormData(newFormData);\n      return id;\n    }\n  };\n\n  const onChangeBlock = (id, value) => {\n    const newFormData = changeBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n\n  const onDeleteBlock = (id, selectPrev) => {\n    const previous = previousBlockId(properties, id);\n\n    const newFormData = deleteBlock(properties, id, intl);\n    onChangeFormData(newFormData);\n\n    onSelectBlock(selectPrev ? previous : null);\n  };\n\n  const onMoveBlock = (dragIndex, hoverIndex) => {\n    const newFormData = moveBlock(properties, dragIndex, hoverIndex);\n    onChangeFormData(newFormData);\n  };\n\n  const onMoveBlockEnhanced = ({ source, destination }) => {\n    const newFormData = moveBlockEnhanced(cloneDeep(properties), {\n      source,\n      destination,\n    });\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(newFormData);\n    let error = false;\n\n    const allowedBlocks = Object.keys(blocksConfig);\n\n    map(newFormData[blocksLayoutFieldname].items, (id) => {\n      const block = newFormData[blocksFieldname][id];\n      if (!allowedBlocks.includes(block['@type'])) {\n        error = true;\n      }\n      if (Array.isArray(block[blocksLayoutFieldname]?.items)) {\n        const size = block[blocksLayoutFieldname].items.length;\n        const allowedSubBlocks = [\n          ...(blocksConfig[block['@type']].allowedBlocks || allowedBlocks),\n          'empty',\n        ] || ['empty'];\n        if (size < 1 || size > (blocksConfig[block['@type']].maxLength || 4)) {\n          error = true;\n        }\n        map(block[blocksLayoutFieldname].items, (subId) => {\n          const subBlock = block[blocksFieldname][subId];\n          if (!allowedSubBlocks.includes(subBlock['@type'])) {\n            error = true;\n          }\n        });\n      }\n    });\n\n    if (!error) {\n      onChangeFormData(newFormData);\n      dispatch(\n        setUIState({\n          selected: null,\n          multiSelected: [],\n          gridSelected: null,\n        }),\n      );\n    }\n  };\n\n  const defaultBlockWrapper = ({ draginfo }, editBlock, blockProps) => (\n    <EditBlockWrapper draginfo={draginfo} blockProps={blockProps}>\n      {editBlock}\n    </EditBlockWrapper>\n  );\n\n  const editBlockWrapper = children || defaultBlockWrapper;\n\n  // Remove invalid blocks on saving\n  // Note they are alreaady filtered by DragDropList, but we also want them\n  // to be removed when the user saves the page next. Otherwise the invalid\n  // blocks would linger for ever.\n\n  for (const [n, v] of blockList) {\n    if (!v) {\n      const newFormData = deleteBlock(properties, n, intl);\n      onChangeFormData(newFormData);\n    }\n  }\n\n  useEvent('voltoClickBelowContent', () => {\n    if (!config.experimental.addBlockButton.enabled || !isMainForm) return;\n    onSelectBlock(\n      onAddBlock(config.settings.defaultBlockType, blockList.length),\n    );\n  });\n\n  return (\n    <>\n      {isMainForm &&\n        isClient &&\n        createPortal(\n          <div>\n            <Order\n              items={getBlocksHierarchy(properties)}\n              onMoveBlock={onMoveBlockEnhanced}\n              onDeleteBlock={onDeleteBlock}\n              onSelectBlock={onSelectBlock}\n              removable\n              errors={blocksErrors}\n            />\n          </div>,\n          document.getElementById('sidebar-order'),\n        )}\n      <div\n        className=\"blocks-form\"\n        role=\"presentation\"\n        ref={ref}\n        onKeyDown={(e) => {\n          if (stopPropagation) {\n            e.stopPropagation();\n          }\n        }}\n      >\n        <fieldset className=\"invisible\" disabled={!editable}>\n          <DragDropList\n            childList={blockList}\n            onMoveItem={(result) => {\n              const { source, destination } = result;\n              if (!destination) {\n                return;\n              }\n              const newFormData = moveBlock(\n                properties,\n                source.index,\n                destination.index,\n              );\n              onChangeFormData(newFormData);\n              return true;\n            }}\n            direction={direction}\n          >\n            {(dragProps) => {\n              const { child, childId, index } = dragProps;\n              const blockProps = {\n                allowedBlocks,\n                showRestricted,\n                block: childId,\n                data: child,\n                handleKeyDown,\n                id: childId,\n                formTitle: title,\n                formDescription: description,\n                index,\n                manage,\n                onAddBlock,\n                onInsertBlock,\n                onChangeBlock,\n                onChangeField,\n                onChangeFormData,\n                onDeleteBlock,\n                onFocusNextBlock,\n                onFocusPreviousBlock,\n                onMoveBlock,\n                onMutateBlock,\n                onSelectBlock,\n                pathname,\n                metadata,\n                properties,\n                contentType: type,\n                navRoot,\n                blocksConfig,\n                selected: selectedBlock === childId,\n                multiSelected: multiSelected?.includes(childId),\n                type: child['@type'],\n                editable,\n                showBlockChooser: selectedBlock === childId,\n                detached: isContainer,\n                // Properties to pass to the BlocksForm to match the View ones\n                content: properties,\n                history,\n                location,\n                token,\n                errors,\n                blocksErrors,\n              };\n              return editBlockWrapper(\n                dragProps,\n                <EditBlock key={childId} {...blockProps} />,\n                blockProps,\n              );\n            }}\n          </DragDropList>\n        </fieldset>\n      </div>\n    </>\n  );\n};\n\nexport default BlocksForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}