{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/SearchBlockView.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ListingBody from '@plone/volto/components/manage/Blocks/Listing/ListingBody';\nimport { withBlockExtensions } from '@plone/volto/helpers/Extensions';\nimport config from '@plone/volto/registry';\nimport { withSearch, withQueryString } from './hocs';\nimport { compose } from 'redux';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport isFunction from 'lodash/isFunction';\nimport cx from 'classnames';\nconst getListingBodyVariation = data => {\n  const {\n    variations\n  } = config.blocks.blocksConfig.listing;\n  let variation = data.listingBodyTemplate ? variations.find(({\n    id\n  }) => id === data.listingBodyTemplate) : variations.find(({\n    isDefault\n  }) => isDefault);\n  if (!variation) variation = variations[0];\n  return variation;\n};\nconst isfunc = obj => isFunction(obj) || typeof obj === 'function';\nconst _filtered = obj => Object.assign({}, ...Object.keys(obj).map(k => {\n  const reject = k !== 'properties' && !isfunc(obj[k]);\n  return reject ? {\n    [k]: obj[k]\n  } : {};\n}));\nconst blockPropsAreChanged = (prevProps, nextProps) => {\n  const prev = _filtered(prevProps);\n  const next = _filtered(nextProps);\n  return isEqual(prev, next);\n};\nconst applyDefaults = (data, root) => {\n  var _data$query;\n  const defaultQuery = [{\n    i: 'path',\n    o: 'plone.app.querystring.operation.string.absolutePath',\n    v: root || '/'\n  }];\n  const searchBySearchableText = data.query.filter(item => item['i'] === 'SearchableText').length;\n  const sort_on = data !== null && data !== void 0 && data.sort_on ? {\n    sort_on: data.sort_on\n  } : searchBySearchableText === 0 ? {\n    sort_on: 'effective'\n  } : {};\n  const sort_order = data !== null && data !== void 0 && data.sort_order ? {\n    sort_order: data.sort_order\n  } : searchBySearchableText === 0 ? {\n    sort_order: 'descending'\n  } : {};\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, data), sort_on), sort_order), {}, {\n    query: data !== null && data !== void 0 && (_data$query = data.query) !== null && _data$query !== void 0 && _data$query.length ? data.query : defaultQuery\n  });\n};\nconst SearchBlockView = props => {\n  _s();\n  const {\n    id,\n    data,\n    searchData,\n    mode = 'view',\n    variation,\n    className\n  } = props;\n  const Layout = variation.view;\n  const dataListingBodyVariation = getListingBodyVariation(data).id;\n  const [selectedView, setSelectedView] = React.useState(dataListingBodyVariation);\n\n  // in the block edit you can change the used listing block variation,\n  // but it's cached here in the state. So we reset it.\n  React.useEffect(() => {\n    if (mode !== 'view') {\n      setSelectedView(dataListingBodyVariation);\n    }\n  }, [dataListingBodyVariation, mode]);\n  const root = useSelector(state => state.breadcrumbs.root);\n  const listingBodyData = applyDefaults(searchData, root);\n  const {\n    variations\n  } = config.blocks.blocksConfig.listing;\n  const listingBodyVariation = variations.find(({\n    id\n  }) => id === selectedView);\n  return __jsx(\"div\", {\n    className: cx('block search', selectedView, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, _extends({}, props, {\n    isEditMode: mode === 'edit',\n    selectedView: selectedView,\n    setSelectedView: setSelectedView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), __jsx(ListingBody, {\n    id: id,\n    variation: _objectSpread(_objectSpread({}, data), listingBodyVariation),\n    data: listingBodyData,\n    path: props.path,\n    isEditMode: mode === 'edit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n};\n_s(SearchBlockView, \"EfGisPAwqDF3R+rT10GX+XxRUro=\", false, function () {\n  return [useSelector];\n});\n_c = SearchBlockView;\nexport const SearchBlockViewComponent = compose(withBlockExtensions, Component => /*#__PURE__*/React.memo(Component, blockPropsAreChanged))(SearchBlockView);\nexport default withSearch()(withQueryString(SearchBlockViewComponent));\nvar _c;\n$RefreshReg$(_c, \"SearchBlockView\");","map":{"version":3,"names":["React","ListingBody","withBlockExtensions","config","withSearch","withQueryString","compose","useSelector","isEqual","isFunction","cx","getListingBodyVariation","data","variations","blocks","blocksConfig","listing","variation","listingBodyTemplate","find","id","isDefault","isfunc","obj","_filtered","Object","assign","keys","map","k","reject","blockPropsAreChanged","prevProps","nextProps","prev","next","applyDefaults","root","_data$query","defaultQuery","i","o","v","searchBySearchableText","query","filter","item","length","sort_on","sort_order","_objectSpread","SearchBlockView","props","_s","searchData","mode","className","Layout","view","dataListingBodyVariation","selectedView","setSelectedView","useState","useEffect","state","breadcrumbs","listingBodyData","listingBodyVariation","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","isEditMode","path","_c","SearchBlockViewComponent","Component","memo","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/SearchBlockView.jsx"],"sourcesContent":["import React from 'react';\n\nimport ListingBody from '@plone/volto/components/manage/Blocks/Listing/ListingBody';\nimport { withBlockExtensions } from '@plone/volto/helpers/Extensions';\n\nimport config from '@plone/volto/registry';\n\nimport { withSearch, withQueryString } from './hocs';\nimport { compose } from 'redux';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport isFunction from 'lodash/isFunction';\nimport cx from 'classnames';\n\nconst getListingBodyVariation = (data) => {\n  const { variations } = config.blocks.blocksConfig.listing;\n\n  let variation = data.listingBodyTemplate\n    ? variations.find(({ id }) => id === data.listingBodyTemplate)\n    : variations.find(({ isDefault }) => isDefault);\n\n  if (!variation) variation = variations[0];\n\n  return variation;\n};\n\nconst isfunc = (obj) => isFunction(obj) || typeof obj === 'function';\n\nconst _filtered = (obj) =>\n  Object.assign(\n    {},\n    ...Object.keys(obj).map((k) => {\n      const reject = k !== 'properties' && !isfunc(obj[k]);\n      return reject ? { [k]: obj[k] } : {};\n    }),\n  );\n\nconst blockPropsAreChanged = (prevProps, nextProps) => {\n  const prev = _filtered(prevProps);\n  const next = _filtered(nextProps);\n\n  return isEqual(prev, next);\n};\n\nconst applyDefaults = (data, root) => {\n  const defaultQuery = [\n    {\n      i: 'path',\n      o: 'plone.app.querystring.operation.string.absolutePath',\n      v: root || '/',\n    },\n  ];\n\n  const searchBySearchableText = data.query.filter(\n    (item) => item['i'] === 'SearchableText',\n  ).length;\n\n  const sort_on = data?.sort_on\n    ? { sort_on: data.sort_on }\n    : searchBySearchableText === 0\n      ? { sort_on: 'effective' }\n      : {};\n  const sort_order = data?.sort_order\n    ? { sort_order: data.sort_order }\n    : searchBySearchableText === 0\n      ? { sort_order: 'descending' }\n      : {};\n\n  return {\n    ...data,\n    ...sort_on,\n    ...sort_order,\n    query: data?.query?.length ? data.query : defaultQuery,\n  };\n};\n\nconst SearchBlockView = (props) => {\n  const { id, data, searchData, mode = 'view', variation, className } = props;\n\n  const Layout = variation.view;\n\n  const dataListingBodyVariation = getListingBodyVariation(data).id;\n  const [selectedView, setSelectedView] = React.useState(\n    dataListingBodyVariation,\n  );\n\n  // in the block edit you can change the used listing block variation,\n  // but it's cached here in the state. So we reset it.\n  React.useEffect(() => {\n    if (mode !== 'view') {\n      setSelectedView(dataListingBodyVariation);\n    }\n  }, [dataListingBodyVariation, mode]);\n\n  const root = useSelector((state) => state.breadcrumbs.root);\n  const listingBodyData = applyDefaults(searchData, root);\n\n  const { variations } = config.blocks.blocksConfig.listing;\n  const listingBodyVariation = variations.find(({ id }) => id === selectedView);\n\n  return (\n    <div className={cx('block search', selectedView, className)}>\n      <Layout\n        {...props}\n        isEditMode={mode === 'edit'}\n        selectedView={selectedView}\n        setSelectedView={setSelectedView}\n      >\n        <ListingBody\n          id={id}\n          variation={{ ...data, ...listingBodyVariation }}\n          data={listingBodyData}\n          path={props.path}\n          isEditMode={mode === 'edit'}\n        />\n      </Layout>\n    </div>\n  );\n};\n\nexport const SearchBlockViewComponent = compose(\n  withBlockExtensions,\n  (Component) => React.memo(Component, blockPropsAreChanged),\n)(SearchBlockView);\n\nexport default withSearch()(withQueryString(SearchBlockViewComponent));\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}