{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport flatten from 'lodash/flatten';\nimport keys from 'lodash/keys';\nimport pickBy from 'lodash/pickBy';\nimport isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport mapKeys from 'lodash/mapKeys';\nimport merge from 'lodash/merge';\nimport { GET_SCHEMA, POST_SCHEMA, PUT_SCHEMA, UPDATE_SCHEMA } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null\n  }\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: _objectSpread(_objectSpread({}, action.result), {}, {\n          required: [...action.result.required, ...flatten(map(keys(pickBy(action.result.properties, isArray)), fieldset => map(action.result.definitions[fieldset].required, required => `${fieldset}.${required}`)))],\n          properties: _objectSpread(_objectSpread({}, action.result.properties), merge(...map(keys(pickBy(action.result.properties, isArray)), fieldset => mapKeys(action.result.definitions[fieldset].properties, (value, key) => `${fieldset}.${key}`))))\n        })\n      });\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null\n      });\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["flatten","keys","pickBy","isArray","map","mapKeys","merge","GET_SCHEMA","POST_SCHEMA","PUT_SCHEMA","UPDATE_SCHEMA","initialState","error","loaded","loading","schema","post","update","put","getRequestKey","actionType","split","toLowerCase","state","action","type","_objectSpread","result","required","properties","fieldset","definitions","value","key"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/reducers/schema/schema.js"],"sourcesContent":["/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport flatten from 'lodash/flatten';\nimport keys from 'lodash/keys';\nimport pickBy from 'lodash/pickBy';\nimport isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport mapKeys from 'lodash/mapKeys';\nimport merge from 'lodash/merge';\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), (fieldset) =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  (required) => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                (fieldset) =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}