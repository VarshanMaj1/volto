{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/AlternateHrefLangs/AlternateHrefLangs.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport config from '@plone/volto/registry';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nconst AlternateHrefLangs = props => {\n  var _content$Components, _content$Components$t, _content$Components2, _content$Components2$;\n  const {\n    content\n  } = props;\n  return __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, config.settings.isMultilingual && ((_content$Components = content['@components']) === null || _content$Components === void 0 ? void 0 : (_content$Components$t = _content$Components.translations) === null || _content$Components$t === void 0 ? void 0 : _content$Components$t.items) && [...((_content$Components2 = content['@components']) === null || _content$Components2 === void 0 ? void 0 : (_content$Components2$ = _content$Components2.translations) === null || _content$Components2$ === void 0 ? void 0 : _content$Components2$.items), {\n    '@id': content['@id'],\n    language: content.language.token\n  }].map((item, key) => {\n    return __jsx(\"link\", {\n      key: key,\n      rel: \"alternate\",\n      hrefLang: item.language,\n      href: item['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    });\n  }));\n};\nexport { AlternateHrefLangs };","map":{"version":3,"names":["config","Helmet","AlternateHrefLangs","props","_content$Components","_content$Components$t","_content$Components2","_content$Components2$","content","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","settings","isMultilingual","translations","items","language","token","map","item","key","rel","hrefLang","href"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/AlternateHrefLangs/AlternateHrefLangs.jsx"],"sourcesContent":["import config from '@plone/volto/registry';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\n\nconst AlternateHrefLangs = (props) => {\n  const { content } = props;\n  return (\n    <Helmet>\n      {config.settings.isMultilingual &&\n        content['@components']?.translations?.items &&\n        [\n          ...content['@components']?.translations?.items,\n          { '@id': content['@id'], language: content.language.token },\n        ].map((item, key) => {\n          return (\n            <link\n              key={key}\n              rel=\"alternate\"\n              hrefLang={item.language}\n              href={item['@id']}\n            />\n          );\n        })}\n    </Helmet>\n  );\n};\n\nexport { AlternateHrefLangs };\n"],"mappings":";;;AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,MAAM,MAAM,oCAAoC;AAEvD,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAA,IAAAC,mBAAA,EAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA;EACpC,MAAM;IAAEC;EAAQ,CAAC,GAAGL,KAAK;EACzB,OACEM,KAAA,CAACR,MAAM;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACJf,MAAM,CAACgB,QAAQ,CAACC,cAAc,MAAAb,mBAAA,GAC7BI,OAAO,CAAC,aAAa,CAAC,cAAAJ,mBAAA,wBAAAC,qBAAA,GAAtBD,mBAAA,CAAwBc,YAAY,cAAAb,qBAAA,uBAApCA,qBAAA,CAAsCc,KAAK,KAC3C,CACE,KAAAb,oBAAA,GAAGE,OAAO,CAAC,aAAa,CAAC,cAAAF,oBAAA,wBAAAC,qBAAA,GAAtBD,oBAAA,CAAwBY,YAAY,cAAAX,qBAAA,uBAApCA,qBAAA,CAAsCY,KAAK,GAC9C;IAAE,KAAK,EAAEX,OAAO,CAAC,KAAK,CAAC;IAAEY,QAAQ,EAAEZ,OAAO,CAACY,QAAQ,CAACC;EAAM,CAAC,CAC5D,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;IACnB,OACEf,KAAA;MACEe,GAAG,EAAEA,GAAI;MACTC,GAAG,EAAC,WAAW;MACfC,QAAQ,EAAEH,IAAI,CAACH,QAAS;MACxBO,IAAI,EAAEJ,IAAI,CAAC,KAAK,CAAE;MAAAb,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACnB,CAAC;EAEN,CAAC,CACG,CAAC;AAEb,CAAC;AAED,SAASb,kBAAkB","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}