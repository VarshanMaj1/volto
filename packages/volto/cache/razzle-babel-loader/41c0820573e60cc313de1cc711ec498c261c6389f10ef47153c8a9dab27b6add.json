{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Content helper.\n * @module helpers/Content\n */\n\nimport omitBy from 'lodash/omitBy';\nimport mapKeys from 'lodash/mapKeys';\nimport pickBy from 'lodash/pickBy';\nimport map from 'lodash/map';\nimport keys from 'lodash/keys';\nimport endsWith from 'lodash/endsWith';\nimport find from 'lodash/find';\nimport config from '@plone/volto/registry';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the block\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n  let nestedProps = props;\n  map(props['@static_behaviors'], behavior => {\n    const values = mapKeys(pickBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1), (value, key) => key.replace(`${behavior}.`, ''));\n    nestedProps = omitBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1);\n    nestedProps = _objectSpread(_objectSpread({}, nestedProps), {}, {\n      [behavior]: values\n    });\n  });\n  return nestedProps;\n}\n\n/**\n * Get layout field.\n * @function getLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the layout\n */\nexport function getLayoutFieldname(props) {\n  return find(keys(props), key => endsWith(key, 'content_layout')) || 'layout';\n}\n\n/**\n * Get content icon.\n * @description Configurable in config\n * @function getContentIcon\n * @param {string} type Content type\n * @param {boolean} isFolderish\n * @returns {Object} Icon component\n */\nexport function getContentIcon(type, isFolderish) {\n  const {\n    settings\n  } = config;\n  const {\n    contentIcons\n  } = settings;\n  if (type in contentIcons) return contentIcons[type];\n  return isFolderish ? contentIcons.Folder : contentIcons.File;\n}\n\n/**\n * Get the language independent fields presents in a schema.\n * @description Configurable in config\n * @function getLanguageIndependentFields\n * @param {string} schema content type JSON Schema serialization\n * @returns {array} List of language independent fields\n */\nexport function getLanguageIndependentFields(schema) {\n  const {\n    properties\n  } = schema;\n  return Object.keys(properties).filter(field => {\n    var _properties$field$mul;\n    return Object.keys(properties[field]).includes('multilingual_options') && ((_properties$field$mul = properties[field]['multilingual_options']) === null || _properties$field$mul === void 0 ? void 0 : _properties$field$mul['language_independent']);\n  });\n}","map":{"version":3,"names":["omitBy","mapKeys","pickBy","map","keys","endsWith","find","config","nestContent","props","nestedProps","behavior","values","value","key","indexOf","replace","_objectSpread","getLayoutFieldname","getContentIcon","type","isFolderish","settings","contentIcons","Folder","File","getLanguageIndependentFields","schema","properties","Object","filter","field","_properties$field$mul","includes"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/helpers/Content/Content.js"],"sourcesContent":["/**\n * Content helper.\n * @module helpers/Content\n */\n\nimport omitBy from 'lodash/omitBy';\nimport mapKeys from 'lodash/mapKeys';\nimport pickBy from 'lodash/pickBy';\nimport map from 'lodash/map';\nimport keys from 'lodash/keys';\nimport endsWith from 'lodash/endsWith';\nimport find from 'lodash/find';\nimport config from '@plone/volto/registry';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the block\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n\n  let nestedProps = props;\n\n  map(props['@static_behaviors'], (behavior) => {\n    const values = mapKeys(\n      pickBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1),\n      (value, key) => key.replace(`${behavior}.`, ''),\n    );\n    nestedProps = omitBy(\n      nestedProps,\n      (value, key) => key.indexOf(behavior) !== -1,\n    );\n    nestedProps = {\n      ...nestedProps,\n      [behavior]: values,\n    };\n  });\n  return nestedProps;\n}\n\n/**\n * Get layout field.\n * @function getLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the layout\n */\nexport function getLayoutFieldname(props) {\n  return (\n    find(keys(props), (key) => endsWith(key, 'content_layout')) || 'layout'\n  );\n}\n\n/**\n * Get content icon.\n * @description Configurable in config\n * @function getContentIcon\n * @param {string} type Content type\n * @param {boolean} isFolderish\n * @returns {Object} Icon component\n */\nexport function getContentIcon(type, isFolderish) {\n  const { settings } = config;\n  const { contentIcons } = settings;\n\n  if (type in contentIcons) return contentIcons[type];\n  return isFolderish ? contentIcons.Folder : contentIcons.File;\n}\n\n/**\n * Get the language independent fields presents in a schema.\n * @description Configurable in config\n * @function getLanguageIndependentFields\n * @param {string} schema content type JSON Schema serialization\n * @returns {array} List of language independent fields\n */\nexport function getLanguageIndependentFields(schema) {\n  const { properties } = schema;\n  return Object.keys(properties).filter(\n    (field) =>\n      Object.keys(properties[field]).includes('multilingual_options') &&\n      properties[field]['multilingual_options']?.['language_independent'],\n  );\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAE;EACjC,IAAI,CAACA,KAAK,CAAC,mBAAmB,CAAC,EAAE;IAC/B,OAAOA,KAAK;EACd;EAEA,IAAIC,WAAW,GAAGD,KAAK;EAEvBN,GAAG,CAACM,KAAK,CAAC,mBAAmB,CAAC,EAAGE,QAAQ,IAAK;IAC5C,MAAMC,MAAM,GAAGX,OAAO,CACpBC,MAAM,CAACQ,WAAW,EAAE,CAACG,KAAK,EAAEC,GAAG,KAAKA,GAAG,CAACC,OAAO,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EACjE,CAACE,KAAK,EAAEC,GAAG,KAAKA,GAAG,CAACE,OAAO,CAAC,GAAGL,QAAQ,GAAG,EAAE,EAAE,CAChD,CAAC;IACDD,WAAW,GAAGV,MAAM,CAClBU,WAAW,EACX,CAACG,KAAK,EAAEC,GAAG,KAAKA,GAAG,CAACC,OAAO,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAC7C,CAAC;IACDD,WAAW,GAAAO,aAAA,CAAAA,aAAA,KACNP,WAAW;MACd,CAACC,QAAQ,GAAGC;IAAM,EACnB;EACH,CAAC,CAAC;EACF,OAAOF,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,kBAAkBA,CAACT,KAAK,EAAE;EACxC,OACEH,IAAI,CAACF,IAAI,CAACK,KAAK,CAAC,EAAGK,GAAG,IAAKT,QAAQ,CAACS,GAAG,EAAE,gBAAgB,CAAC,CAAC,IAAI,QAAQ;AAE3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACC,IAAI,EAAEC,WAAW,EAAE;EAChD,MAAM;IAAEC;EAAS,CAAC,GAAGf,MAAM;EAC3B,MAAM;IAAEgB;EAAa,CAAC,GAAGD,QAAQ;EAEjC,IAAIF,IAAI,IAAIG,YAAY,EAAE,OAAOA,YAAY,CAACH,IAAI,CAAC;EACnD,OAAOC,WAAW,GAAGE,YAAY,CAACC,MAAM,GAAGD,YAAY,CAACE,IAAI;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAACC,MAAM,EAAE;EACnD,MAAM;IAAEC;EAAW,CAAC,GAAGD,MAAM;EAC7B,OAAOE,MAAM,CAACzB,IAAI,CAACwB,UAAU,CAAC,CAACE,MAAM,CAClCC,KAAK;IAAA,IAAAC,qBAAA;IAAA,OACJH,MAAM,CAACzB,IAAI,CAACwB,UAAU,CAACG,KAAK,CAAC,CAAC,CAACE,QAAQ,CAAC,sBAAsB,CAAC,MAAAD,qBAAA,GAC/DJ,UAAU,CAACG,KAAK,CAAC,CAAC,sBAAsB,CAAC,cAAAC,qBAAA,uBAAzCA,qBAAA,CAA4C,sBAAsB,CAAC;EAAA,CACvE,CAAC;AACH","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}