{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/FormattedDate/FormattedDate.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { formatDate, long_date_format } from '@plone/volto/helpers/Utils/Date';\nimport { useSelector } from 'react-redux';\n\n/**\n * Friendly formatting of dates\n */\nconst FormattedDate = ({\n  date,\n  format,\n  long,\n  includeTime,\n  relative,\n  className,\n  locale,\n  children\n}) => {\n  _s();\n  const language = useSelector(state => locale || state.intl.locale);\n  const toDate = d => typeof d === 'string' ? new Date(d) : d;\n  const args = {\n    date,\n    long,\n    includeTime,\n    format,\n    locale: language\n  };\n  const new_date = new Date(toDate(date));\n  // Dat check taken from https://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript#1353711\n  if (Object.prototype.toString.call(new_date) === '[object Date]') {\n    // it is a date\n    if (isNaN(new_date)) {\n      // date object is not valid\n      return __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }\n      }, \"bad date\");\n    }\n  } else {\n    // not a date object\n    return __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    }, \"not a date\");\n  }\n  return __jsx(\"time\", {\n    className: className,\n    dateTime: date,\n    title: new Intl.DateTimeFormat(language, long_date_format).format(new_date).replace('\\u202F', ' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, children ? children(formatDate(_objectSpread(_objectSpread({}, args), {}, {\n    formatToParts: true\n  }))) : formatDate(args));\n};\n_s(FormattedDate, \"lQANm1MwgmwtuScNKGsbP20Mv9w=\", false, function () {\n  return [useSelector];\n});\n_c = FormattedDate;\nexport default FormattedDate;\nvar _c;\n$RefreshReg$(_c, \"FormattedDate\");","map":{"version":3,"names":["React","formatDate","long_date_format","useSelector","FormattedDate","date","format","long","includeTime","relative","className","locale","children","_s","language","state","intl","toDate","d","Date","args","new_date","Object","prototype","toString","call","isNaN","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dateTime","title","Intl","DateTimeFormat","replace","_objectSpread","formatToParts","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/FormattedDate/FormattedDate.jsx"],"sourcesContent":["import React from 'react';\nimport { formatDate, long_date_format } from '@plone/volto/helpers/Utils/Date';\nimport { useSelector } from 'react-redux';\n\n/**\n * Friendly formatting of dates\n */\nconst FormattedDate = ({\n  date,\n  format,\n  long,\n  includeTime,\n  relative,\n  className,\n  locale,\n  children,\n}) => {\n  const language = useSelector((state) => locale || state.intl.locale);\n  const toDate = (d) => (typeof d === 'string' ? new Date(d) : d);\n  const args = { date, long, includeTime, format, locale: language };\n  const new_date = new Date(toDate(date));\n  // Dat check taken from https://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript#1353711\n  if (Object.prototype.toString.call(new_date) === '[object Date]') {\n    // it is a date\n    if (isNaN(new_date)) {\n      // date object is not valid\n      return <span>bad date</span>;\n    }\n  } else {\n    // not a date object\n    return <span>not a date</span>;\n  }\n\n  return (\n    <time\n      className={className}\n      dateTime={date}\n      title={new Intl.DateTimeFormat(language, long_date_format)\n        .format(new_date)\n        .replace('\\u202F', ' ')}\n    >\n      {children\n        ? children(\n            formatDate({\n              ...args,\n              formatToParts: true,\n            }),\n          )\n        : formatDate(args)}\n    </time>\n  );\n};\n\nexport default FormattedDate;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,iCAAiC;AAC9E,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAAC;EACrBC,IAAI;EACJC,MAAM;EACNC,IAAI;EACJC,WAAW;EACXC,QAAQ;EACRC,SAAS;EACTC,MAAM;EACNC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,QAAQ,GAAGX,WAAW,CAAEY,KAAK,IAAKJ,MAAM,IAAII,KAAK,CAACC,IAAI,CAACL,MAAM,CAAC;EACpE,MAAMM,MAAM,GAAIC,CAAC,IAAM,OAAOA,CAAC,KAAK,QAAQ,GAAG,IAAIC,IAAI,CAACD,CAAC,CAAC,GAAGA,CAAE;EAC/D,MAAME,IAAI,GAAG;IAAEf,IAAI;IAAEE,IAAI;IAAEC,WAAW;IAAEF,MAAM;IAAEK,MAAM,EAAEG;EAAS,CAAC;EAClE,MAAMO,QAAQ,GAAG,IAAIF,IAAI,CAACF,MAAM,CAACZ,IAAI,CAAC,CAAC;EACvC;EACA,IAAIiB,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,QAAQ,CAAC,KAAK,eAAe,EAAE;IAChE;IACA,IAAIK,KAAK,CAACL,QAAQ,CAAC,EAAE;MACnB;MACA,OAAOM,KAAA;QAAAC,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAAM,UAAc,CAAC;IAC9B;EACF,CAAC,MAAM;IACL;IACA,OAAON,KAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAM,YAAgB,CAAC;EAChC;EAEA,OACEN,KAAA;IACEjB,SAAS,EAAEA,SAAU;IACrBwB,QAAQ,EAAE7B,IAAK;IACf8B,KAAK,EAAE,IAAIC,IAAI,CAACC,cAAc,CAACvB,QAAQ,EAAEZ,gBAAgB,CAAC,CACvDI,MAAM,CAACe,QAAQ,CAAC,CAChBiB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEzBrB,QAAQ,GACLA,QAAQ,CACNX,UAAU,CAAAsC,aAAA,CAAAA,aAAA,KACLnB,IAAI;IACPoB,aAAa,EAAE;EAAI,EACpB,CACH,CAAC,GACDvC,UAAU,CAACmB,IAAI,CACf,CAAC;AAEX,CAAC;AAACP,EAAA,CA5CIT,aAAa;EAAA,QAUAD,WAAW;AAAA;AAAAsC,EAAA,GAVxBrC,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}