{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Error/Error.jsx\";\nvar __jsx = React.createElement;\n/**\n * @module components/theme/Error/Error\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * Error function.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = props => {\n  const {\n    views\n  } = config;\n  const {\n    error\n  } = props;\n  let FoundView;\n  if (error.status === undefined) {\n    // For some reason, while development and if CORS is in place and the\n    // requested resource is 404, it returns undefined as status, then the\n    // next statement will fail\n    FoundView = views.errorViews.corsError;\n  } else {\n    FoundView = views.errorViews[error.status.toString()];\n  }\n  if (!FoundView) {\n    FoundView = views.errorViews['404']; // default to 404\n  }\n  return __jsx(\"div\", {\n    id: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(FoundView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  })));\n};\n_c = Error;\nexport default Error;\nvar _c;\n$RefreshReg$(_c, \"Error\");","map":{"version":3,"names":["React","config","Error","props","views","error","FoundView","status","undefined","errorViews","corsError","toString","__jsx","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Error/Error.jsx"],"sourcesContent":["/**\n * @module components/theme/Error/Error\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * Error function.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = (props) => {\n  const { views } = config;\n  const { error } = props;\n  let FoundView;\n  if (error.status === undefined) {\n    // For some reason, while development and if CORS is in place and the\n    // requested resource is 404, it returns undefined as status, then the\n    // next statement will fail\n    FoundView = views.errorViews.corsError;\n  } else {\n    FoundView = views.errorViews[error.status.toString()];\n  }\n  if (!FoundView) {\n    FoundView = views.errorViews['404']; // default to 404\n  }\n  return (\n    <div id=\"view\">\n      <FoundView {...props} />\n    </div>\n  );\n};\n\nexport default Error;\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAIC,KAAK,IAAK;EACvB,MAAM;IAAEC;EAAM,CAAC,GAAGH,MAAM;EACxB,MAAM;IAAEI;EAAM,CAAC,GAAGF,KAAK;EACvB,IAAIG,SAAS;EACb,IAAID,KAAK,CAACE,MAAM,KAAKC,SAAS,EAAE;IAC9B;IACA;IACA;IACAF,SAAS,GAAGF,KAAK,CAACK,UAAU,CAACC,SAAS;EACxC,CAAC,MAAM;IACLJ,SAAS,GAAGF,KAAK,CAACK,UAAU,CAACJ,KAAK,CAACE,MAAM,CAACI,QAAQ,CAAC,CAAC,CAAC;EACvD;EACA,IAAI,CAACL,SAAS,EAAE;IACdA,SAAS,GAAGF,KAAK,CAACK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACvC;EACA,OACEG,KAAA;IAAKC,EAAE,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACZP,KAAA,CAACN,SAAS,EAAAc,QAAA,KAAKjB,KAAK;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CACpB,CAAC;AAEV,CAAC;AAACE,EAAA,GApBInB,KAAK;AAsBX,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}