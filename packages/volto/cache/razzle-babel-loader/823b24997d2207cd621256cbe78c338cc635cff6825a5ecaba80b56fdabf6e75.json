{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/start-client.jsx\";\nvar __jsx = React.createElement;\nimport '@plone/volto/config'; // This is the bootstrap for the global config - client side\nimport '@root/theme';\nimport React from 'react';\nimport { hydrateRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { ReduxAsyncConnect } from '@plone/volto/helpers/AsyncConnect';\nimport { loadableReady } from '@loadable/component';\nimport { CookiesProvider } from 'react-cookie';\nimport debug from 'debug';\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\nimport configureStore from '@plone/volto/store';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport { persistAuthToken } from '@plone/volto/helpers/AuthToken/AuthToken';\nimport ScrollToTop from '@plone/volto/helpers/ScrollToTop/ScrollToTop';\nexport const history = createBrowserHistory();\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\nexport default function client() {\n  const api = new Api();\n  const store = configureStore(window.__data, history, api);\n  persistAuthToken(store);\n\n  // On Cypress we expose the history, the store and the settings\n  // so we can access from Cypress and manipulate them\n  if (window.Cypress) {\n    window.appHistory = history;\n    window.store = store;\n    window.settings = config.settings;\n  }\n\n  // Setup the client registry from the SSR response values, presents in the `window.env`\n  // variable. This is key for the Seamless mode to work.\n  if (window.env.apiPath) {\n    config.settings.apiPath = window.env.apiPath;\n  }\n  if (window.env.publicURL) {\n    config.settings.publicURL = window.env.publicURL;\n  }\n  // There are some cases that the client needs to know the internal server URL\n  // too, as some helpers (isInternalURL and flattenToAppURL) need to be aware of it.\n  // This is specially important when the hydration of the store coming from the first SSR\n  // request happens, since there all the server URLs might be the internalApiPath ones,\n  // and the client should be able to take care of them properly.\n  if (window.env.RAZZLE_INTERNAL_API_PATH) {\n    config.settings.internalApiPath = window.env.RAZZLE_INTERNAL_API_PATH;\n  }\n  // TODO: To be removed when the use of the legacy traverse is deprecated.\n  if (window.env.RAZZLE_LEGACY_TRAVERSE) {\n    config.settings.legacyTraverse = true;\n  }\n  loadableReady(() => {\n    hydrateRoot(document.getElementById('main'), __jsx(CookiesProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, __jsx(IntlProvider, {\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, __jsx(ConnectedRouter, {\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, __jsx(ScrollToTop, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, __jsx(ReduxAsyncConnect, {\n      routes: routes,\n      helpers: api,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    })))))));\n  });\n}","map":{"version":3,"names":["React","hydrateRoot","Provider","IntlProvider","ConnectedRouter","createBrowserHistory","ReduxAsyncConnect","loadableReady","CookiesProvider","debug","routes","config","configureStore","Api","persistAuthToken","ScrollToTop","history","reactIntlErrorHandler","error","client","api","store","window","__data","Cypress","appHistory","settings","env","apiPath","publicURL","RAZZLE_INTERNAL_API_PATH","internalApiPath","RAZZLE_LEGACY_TRAVERSE","legacyTraverse","document","getElementById","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onError","helpers"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/start-client.jsx"],"sourcesContent":["import '@plone/volto/config'; // This is the bootstrap for the global config - client side\nimport '@root/theme';\nimport React from 'react';\nimport { hydrateRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { ReduxAsyncConnect } from '@plone/volto/helpers/AsyncConnect';\nimport { loadableReady } from '@loadable/component';\nimport { CookiesProvider } from 'react-cookie';\nimport debug from 'debug';\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\n\nimport configureStore from '@plone/volto/store';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport { persistAuthToken } from '@plone/volto/helpers/AuthToken/AuthToken';\nimport ScrollToTop from '@plone/volto/helpers/ScrollToTop/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\n\nexport default function client() {\n  const api = new Api();\n\n  const store = configureStore(window.__data, history, api);\n  persistAuthToken(store);\n\n  // On Cypress we expose the history, the store and the settings\n  // so we can access from Cypress and manipulate them\n  if (window.Cypress) {\n    window.appHistory = history;\n    window.store = store;\n    window.settings = config.settings;\n  }\n\n  // Setup the client registry from the SSR response values, presents in the `window.env`\n  // variable. This is key for the Seamless mode to work.\n  if (window.env.apiPath) {\n    config.settings.apiPath = window.env.apiPath;\n  }\n  if (window.env.publicURL) {\n    config.settings.publicURL = window.env.publicURL;\n  }\n  // There are some cases that the client needs to know the internal server URL\n  // too, as some helpers (isInternalURL and flattenToAppURL) need to be aware of it.\n  // This is specially important when the hydration of the store coming from the first SSR\n  // request happens, since there all the server URLs might be the internalApiPath ones,\n  // and the client should be able to take care of them properly.\n  if (window.env.RAZZLE_INTERNAL_API_PATH) {\n    config.settings.internalApiPath = window.env.RAZZLE_INTERNAL_API_PATH;\n  }\n  // TODO: To be removed when the use of the legacy traverse is deprecated.\n  if (window.env.RAZZLE_LEGACY_TRAVERSE) {\n    config.settings.legacyTraverse = true;\n  }\n\n  loadableReady(() => {\n    hydrateRoot(\n      document.getElementById('main'),\n      <CookiesProvider>\n        <Provider store={store}>\n          <IntlProvider onError={reactIntlErrorHandler}>\n            <ConnectedRouter history={history}>\n              <ScrollToTop>\n                <ReduxAsyncConnect routes={routes} helpers={api} />\n              </ScrollToTop>\n            </ConnectedRouter>\n          </IntlProvider>\n        </Provider>\n      </CookiesProvider>,\n    );\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}