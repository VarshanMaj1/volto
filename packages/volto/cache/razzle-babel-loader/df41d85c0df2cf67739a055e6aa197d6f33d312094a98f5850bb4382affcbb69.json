{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/Link/index.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport { _insertElement, _unwrapElement, _isActiveElement, _getActiveElement } from '@plone/volto-slate/elementEditor/utils';\nimport { SIMPLELINK, LINK } from '@plone/volto-slate/constants';\nimport { LinkElement } from './render';\nimport { simpleLinkDeserializer, withSimpleLink } from './extensions';\nimport { setPluginOptions } from '@plone/volto-slate/actions/plugins';\nimport UIToolbarButton from '@plone/volto-slate/editor/ui/ToolbarButton';\nimport PositionedToolbar from '@plone/volto-slate/editor/ui/PositionedToolbar';\nimport { useSelectionPosition } from '@plone/volto-slate/hooks/useSelectionPosition';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add link\",\n    \"defaultMessage\": \"Add link\"\n  },\n  edit: {\n    \"id\": \"Edit link\",\n    \"defaultMessage\": \"Edit link\"\n  }\n});\nfunction getPositionStyle(rect) {\n  return {\n    style: {\n      opacity: 1,\n      top: rect.top + window.pageYOffset - 6,\n      left: rect.left + window.pageXOffset + rect.width / 2\n    }\n  };\n}\nconst LinkEditor = props => {\n  var _node$data;\n  const {\n    editor,\n    pluginId,\n    getActiveElement,\n    unwrapElement,\n    insertElement\n  } = props;\n  const pid = `${editor.uid}-${pluginId}`;\n  const showEditor = useSelector(state => {\n    var _state$slate_plugins, _state$slate_plugins$;\n    return (_state$slate_plugins = state['slate_plugins']) === null || _state$slate_plugins === void 0 ? void 0 : (_state$slate_plugins$ = _state$slate_plugins[pid]) === null || _state$slate_plugins$ === void 0 ? void 0 : _state$slate_plugins$.show_sidebar_editor;\n  });\n  const savedPosition = React.useRef();\n  const rect = useSelectionPosition();\n  const dispatch = useDispatch();\n  const active = getActiveElement(editor);\n  // console.log('active', active);\n  const [node] = active || [];\n  if (showEditor && !savedPosition.current) {\n    savedPosition.current = getPositionStyle(rect);\n  }\n  return showEditor ? __jsx(PositionedToolbar, {\n    className: \"add-link\",\n    position: savedPosition.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(AddLinkForm, {\n    block: \"draft-js\",\n    placeholder: 'Add link',\n    data: {\n      url: (node === null || node === void 0 ? void 0 : (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.url) || ''\n    },\n    theme: {},\n    onChangeValue: url => {\n      if (!active) {\n        if (!editor.selection) editor.selection = editor.savedSelection;\n        insertElement(editor, {\n          url\n        });\n      } else {\n        const selection = unwrapElement(editor);\n        editor.selection = selection;\n        insertElement(editor, {\n          url\n        });\n      }\n      ReactEditor.focus(editor);\n      dispatch(setPluginOptions(pid, {\n        show_sidebar_editor: false\n      }));\n      savedPosition.current = null;\n    },\n    onClear: () => {\n      // clear button was pressed in the link edit popup\n      const newSelection = JSON.parse(JSON.stringify(unwrapElement(editor)));\n      editor.selection = newSelection;\n      editor.savedSelection = newSelection;\n    },\n    onOverrideContent: c => {\n      dispatch(setPluginOptions(pid, {\n        show_sidebar_editor: false\n      }));\n      savedPosition.current = null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  })) : null;\n};\nconst applyConfig = config => {\n  const {\n    slate\n  } = config.settings;\n  const PLUGINID = SIMPLELINK;\n  const linkBtnIndex = slate.toolbarButtons.findIndex(b => b === LINK);\n  slate.expandedToolbarButtons = slate.expandedToolbarButtons.filter(b => b !== LINK);\n  const insertElement = _insertElement(PLUGINID);\n  const getActiveElement = _getActiveElement(PLUGINID);\n  const isActiveElement = _isActiveElement(PLUGINID);\n  const unwrapElement = _unwrapElement(PLUGINID);\n  const ToolbarButton = props => {\n    const dispatch = useDispatch();\n    const editor = useSlate();\n    const isElement = isActiveElement(editor);\n    return __jsx(UIToolbarButton, {\n      title: isElement ? messages.edit : messages.add,\n      icon: isElement ? unlinkSVG : linkSVG,\n      active: isElement,\n      onMouseDown: e => {\n        e.stopPropagation();\n        e.preventDefault();\n        const pid = `${editor.uid}-${PLUGINID}`;\n        editor.savedSelection = JSON.parse(JSON.stringify(editor.selection));\n        dispatch(setPluginOptions(pid, {\n          show_sidebar_editor: true\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    });\n  };\n  const pluginOptions = {\n    insertElement,\n    getActiveElement,\n    isActiveElement,\n    unwrapElement\n  };\n  slate.buttons[PLUGINID] = ToolbarButton;\n  slate.toolbarButtons[linkBtnIndex] = PLUGINID;\n  slate.htmlTagsToSlate.A = simpleLinkDeserializer;\n  slate.extensions.push(withSimpleLink);\n  slate.elements[PLUGINID] = LinkElement;\n  slate.nodeTypesToHighlight.push(PLUGINID);\n  slate.persistentHelpers.push(props => __jsx(LinkEditor, _extends({}, props, {\n    pluginId: PLUGINID\n  }, pluginOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  })));\n  return config;\n};\nexport default applyConfig;","map":{"version":3,"names":["React","defineMessages","ReactEditor","useSlate","useSelector","useDispatch","AddLinkForm","_insertElement","_unwrapElement","_isActiveElement","_getActiveElement","SIMPLELINK","LINK","LinkElement","simpleLinkDeserializer","withSimpleLink","setPluginOptions","UIToolbarButton","PositionedToolbar","useSelectionPosition","linkSVG","unlinkSVG","messages","add","edit","getPositionStyle","rect","style","opacity","top","window","pageYOffset","left","pageXOffset","width","LinkEditor","props","_node$data","editor","pluginId","getActiveElement","unwrapElement","insertElement","pid","uid","showEditor","state","_state$slate_plugins","_state$slate_plugins$","show_sidebar_editor","savedPosition","useRef","dispatch","active","node","current","__jsx","className","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","block","placeholder","data","url","theme","onChangeValue","selection","savedSelection","focus","onClear","newSelection","JSON","parse","stringify","onOverrideContent","c","applyConfig","config","slate","settings","PLUGINID","linkBtnIndex","toolbarButtons","findIndex","b","expandedToolbarButtons","filter","isActiveElement","ToolbarButton","isElement","title","icon","onMouseDown","e","stopPropagation","preventDefault","pluginOptions","buttons","htmlTagsToSlate","A","extensions","push","elements","nodeTypesToHighlight","persistentHelpers","_extends"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/Link/index.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport {\n  _insertElement,\n  _unwrapElement,\n  _isActiveElement,\n  _getActiveElement,\n} from '@plone/volto-slate/elementEditor/utils';\nimport { SIMPLELINK, LINK } from '@plone/volto-slate/constants';\nimport { LinkElement } from './render';\nimport { simpleLinkDeserializer, withSimpleLink } from './extensions';\nimport { setPluginOptions } from '@plone/volto-slate/actions/plugins';\nimport UIToolbarButton from '@plone/volto-slate/editor/ui/ToolbarButton';\nimport PositionedToolbar from '@plone/volto-slate/editor/ui/PositionedToolbar';\nimport { useSelectionPosition } from '@plone/volto-slate/hooks/useSelectionPosition';\n\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add link',\n    defaultMessage: 'Add link',\n  },\n  edit: {\n    id: 'Edit link',\n    defaultMessage: 'Edit link',\n  },\n});\n\nfunction getPositionStyle(rect) {\n  return {\n    style: {\n      opacity: 1,\n      top: rect.top + window.pageYOffset - 6,\n      left: rect.left + window.pageXOffset + rect.width / 2,\n    },\n  };\n}\n\nconst LinkEditor = (props) => {\n  const { editor, pluginId, getActiveElement, unwrapElement, insertElement } =\n    props;\n  const pid = `${editor.uid}-${pluginId}`;\n  const showEditor = useSelector((state) => {\n    return state['slate_plugins']?.[pid]?.show_sidebar_editor;\n  });\n  const savedPosition = React.useRef();\n  const rect = useSelectionPosition();\n\n  const dispatch = useDispatch();\n\n  const active = getActiveElement(editor);\n  // console.log('active', active);\n  const [node] = active || [];\n\n  if (showEditor && !savedPosition.current) {\n    savedPosition.current = getPositionStyle(rect);\n  }\n\n  return showEditor ? (\n    <PositionedToolbar className=\"add-link\" position={savedPosition.current}>\n      <AddLinkForm\n        block=\"draft-js\"\n        placeholder={'Add link'}\n        data={{ url: node?.data?.url || '' }}\n        theme={{}}\n        onChangeValue={(url) => {\n          if (!active) {\n            if (!editor.selection) editor.selection = editor.savedSelection;\n            insertElement(editor, { url });\n          } else {\n            const selection = unwrapElement(editor);\n            editor.selection = selection;\n            insertElement(editor, { url });\n          }\n          ReactEditor.focus(editor);\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: false }));\n          savedPosition.current = null;\n        }}\n        onClear={() => {\n          // clear button was pressed in the link edit popup\n          const newSelection = JSON.parse(\n            JSON.stringify(unwrapElement(editor)),\n          );\n          editor.selection = newSelection;\n          editor.savedSelection = newSelection;\n        }}\n        onOverrideContent={(c) => {\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: false }));\n          savedPosition.current = null;\n        }}\n      />\n    </PositionedToolbar>\n  ) : null;\n};\n\nconst applyConfig = (config) => {\n  const { slate } = config.settings;\n\n  const PLUGINID = SIMPLELINK;\n\n  const linkBtnIndex = slate.toolbarButtons.findIndex((b) => b === LINK);\n  slate.expandedToolbarButtons = slate.expandedToolbarButtons.filter(\n    (b) => b !== LINK,\n  );\n\n  const insertElement = _insertElement(PLUGINID);\n  const getActiveElement = _getActiveElement(PLUGINID);\n  const isActiveElement = _isActiveElement(PLUGINID);\n  const unwrapElement = _unwrapElement(PLUGINID);\n\n  const ToolbarButton = (props) => {\n    const dispatch = useDispatch();\n    const editor = useSlate();\n    const isElement = isActiveElement(editor);\n\n    return (\n      <UIToolbarButton\n        title={isElement ? messages.edit : messages.add}\n        icon={isElement ? unlinkSVG : linkSVG}\n        active={isElement}\n        onMouseDown={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n          const pid = `${editor.uid}-${PLUGINID}`;\n          editor.savedSelection = JSON.parse(JSON.stringify(editor.selection));\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: true }));\n        }}\n      />\n    );\n  };\n\n  const pluginOptions = {\n    insertElement,\n    getActiveElement,\n    isActiveElement,\n    unwrapElement,\n  };\n\n  slate.buttons[PLUGINID] = ToolbarButton;\n  slate.toolbarButtons[linkBtnIndex] = PLUGINID;\n  slate.htmlTagsToSlate.A = simpleLinkDeserializer;\n  slate.extensions.push(withSimpleLink);\n  slate.elements[PLUGINID] = LinkElement;\n  slate.nodeTypesToHighlight.push(PLUGINID);\n  slate.persistentHelpers.push((props) => (\n    <LinkEditor {...props} pluginId={PLUGINID} {...pluginOptions} />\n  ));\n\n  return config;\n};\n\nexport default applyConfig;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Add link","defaultMessage":"Add link"},{"id":"Edit link","defaultMessage":"Edit link"}]}},"sourceType":"module","externalDependencies":[]}