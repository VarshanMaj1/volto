{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getQueryStringResults } from '@plone/volto/actions/querystringsearch/querystringsearch';\nimport { resolveBlockExtensions } from '@plone/volto/helpers/Extensions';\nimport qs from 'query-string';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\nconst getCurrentPage = (location, id) => {\n  const pageQueryParam = qs.parse(location.search);\n  switch (Object.keys(pageQueryParam).length) {\n    case 0:\n      return 1;\n    case 1:\n      // when there is only one query param, it could be the simple page number or the sluggified block id\n      return pageQueryParam['page'] || pageQueryParam[slugify(`page-${id}`)];\n    default:\n      return pageQueryParam[slugify(`page-${id}`)];\n  }\n};\nexport default function getListingBlockAsyncData(props) {\n  var _resolvedExtensions$v;\n  const {\n    data,\n    path,\n    location,\n    id,\n    dispatch,\n    blocksConfig,\n    content\n  } = props;\n  const {\n    resolvedExtensions\n  } = resolveBlockExtensions(data, blocksConfig);\n  const subrequestID = content !== null && content !== void 0 && content.UID ? `${content === null || content === void 0 ? void 0 : content.UID}-${id}` : id;\n  const currentPage = getCurrentPage(location, id);\n  if (!data.querystring) {\n    return [async () => {\n      return null;\n    }];\n  }\n  return [dispatch(getQueryStringResults(path, _objectSpread(_objectSpread({}, data.querystring), resolvedExtensions !== null && resolvedExtensions !== void 0 && (_resolvedExtensions$v = resolvedExtensions.variation) !== null && _resolvedExtensions$v !== void 0 && _resolvedExtensions$v.fullobjects ? {\n    fullobjects: 1\n  } : {\n    metadata_fields: '_all'\n  }), subrequestID, currentPage))];\n}","map":{"version":3,"names":["getQueryStringResults","resolveBlockExtensions","qs","slugify","getCurrentPage","location","id","pageQueryParam","parse","search","Object","keys","length","getListingBlockAsyncData","props","_resolvedExtensions$v","data","path","dispatch","blocksConfig","content","resolvedExtensions","subrequestID","UID","currentPage","querystring","_objectSpread","variation","fullobjects","metadata_fields"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Listing/getAsyncData.js"],"sourcesContent":["import { getQueryStringResults } from '@plone/volto/actions/querystringsearch/querystringsearch';\nimport { resolveBlockExtensions } from '@plone/volto/helpers/Extensions';\nimport qs from 'query-string';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\nconst getCurrentPage = (location, id) => {\n  const pageQueryParam = qs.parse(location.search);\n  switch (Object.keys(pageQueryParam).length) {\n    case 0:\n      return 1;\n    case 1:\n      // when there is only one query param, it could be the simple page number or the sluggified block id\n      return pageQueryParam['page'] || pageQueryParam[slugify(`page-${id}`)];\n    default:\n      return pageQueryParam[slugify(`page-${id}`)];\n  }\n};\n\nexport default function getListingBlockAsyncData(props) {\n  const { data, path, location, id, dispatch, blocksConfig, content } = props;\n\n  const { resolvedExtensions } = resolveBlockExtensions(data, blocksConfig);\n\n  const subrequestID = content?.UID ? `${content?.UID}-${id}` : id;\n  const currentPage = getCurrentPage(location, id);\n\n  if (!data.querystring) {\n    return [\n      async () => {\n        return null;\n      },\n    ];\n  }\n\n  return [\n    dispatch(\n      getQueryStringResults(\n        path,\n        {\n          ...data.querystring,\n          ...(resolvedExtensions?.variation?.fullobjects\n            ? { fullobjects: 1 }\n            : { metadata_fields: '_all' }),\n        },\n        subrequestID,\n        currentPage,\n      ),\n    ),\n  ];\n}\n"],"mappings":";AAAA,SAASA,qBAAqB,QAAQ,0DAA0D;AAChG,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,OAAOC,EAAE,MAAM,cAAc;AAC7B,SAASC,OAAO,QAAQ,kCAAkC;AAE1D,MAAMC,cAAc,GAAGA,CAACC,QAAQ,EAAEC,EAAE,KAAK;EACvC,MAAMC,cAAc,GAAGL,EAAE,CAACM,KAAK,CAACH,QAAQ,CAACI,MAAM,CAAC;EAChD,QAAQC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAACK,MAAM;IACxC,KAAK,CAAC;MACJ,OAAO,CAAC;IACV,KAAK,CAAC;MACJ;MACA,OAAOL,cAAc,CAAC,MAAM,CAAC,IAAIA,cAAc,CAACJ,OAAO,CAAC,QAAQG,EAAE,EAAE,CAAC,CAAC;IACxE;MACE,OAAOC,cAAc,CAACJ,OAAO,CAAC,QAAQG,EAAE,EAAE,CAAC,CAAC;EAChD;AACF,CAAC;AAED,eAAe,SAASO,wBAAwBA,CAACC,KAAK,EAAE;EAAA,IAAAC,qBAAA;EACtD,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAEZ,QAAQ;IAAEC,EAAE;IAAEY,QAAQ;IAAEC,YAAY;IAAEC;EAAQ,CAAC,GAAGN,KAAK;EAE3E,MAAM;IAAEO;EAAmB,CAAC,GAAGpB,sBAAsB,CAACe,IAAI,EAAEG,YAAY,CAAC;EAEzE,MAAMG,YAAY,GAAGF,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEG,GAAG,GAAG,GAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,GAAG,IAAIjB,EAAE,EAAE,GAAGA,EAAE;EAChE,MAAMkB,WAAW,GAAGpB,cAAc,CAACC,QAAQ,EAAEC,EAAE,CAAC;EAEhD,IAAI,CAACU,IAAI,CAACS,WAAW,EAAE;IACrB,OAAO,CACL,YAAY;MACV,OAAO,IAAI;IACb,CAAC,CACF;EACH;EAEA,OAAO,CACLP,QAAQ,CACNlB,qBAAqB,CACnBiB,IAAI,EAAAS,aAAA,CAAAA,aAAA,KAECV,IAAI,CAACS,WAAW,GACfJ,kBAAkB,aAAlBA,kBAAkB,gBAAAN,qBAAA,GAAlBM,kBAAkB,CAAEM,SAAS,cAAAZ,qBAAA,eAA7BA,qBAAA,CAA+Ba,WAAW,GAC1C;IAAEA,WAAW,EAAE;EAAE,CAAC,GAClB;IAAEC,eAAe,EAAE;EAAO,CAAC,GAEjCP,YAAY,EACZE,WACF,CACF,CAAC,CACF;AACH","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}