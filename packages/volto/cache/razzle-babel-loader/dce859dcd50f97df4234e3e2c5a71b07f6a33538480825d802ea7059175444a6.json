{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/CreateTranslation.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { getTranslationLocator } from '@plone/volto/actions/translations/translations';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nconst CreateTranslation = props => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    language,\n    translationOf\n  } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n  const [translationObject, setTranslationObject] = React.useState(null);\n  const languageFrom = useSelector(state => state.intl.locale);\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then(resp => {\n      setTranslationLocation(resp['@id']);\n    });\n\n    //and we load the translationObject\n    dispatch(getContent(translationOf, null, 'translationObject')).then(resp => {\n      setTranslationObject(resp);\n    });\n\n    // On unmount we dispatch the language change\n    return () => {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        const langFileName = toGettextLang(language);\n        import(/* @vite-ignore */'@root/../locales/' + langFileName + '.json').then(locale => {\n          dispatch(changeLanguage(language, locale.default));\n        });\n      }\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n  return translationLocation && translationObject && __jsx(Redirect, {\n    to: {\n      pathname: `${flattenToAppURL(translationLocation)}/add`,\n      search: `?type=${props.location.state.type}`,\n      state: {\n        translationOf: props.location.state.translationOf,\n        language: props.location.state.language,\n        translationObject: translationObject,\n        languageFrom\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  });\n};\n_s(CreateTranslation, \"2Zq6zejxLz3CDYAxOOiBr0ghLoU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = CreateTranslation;\nexport default CreateTranslation;\nvar _c;\n$RefreshReg$(_c, \"CreateTranslation\");","map":{"version":3,"names":["React","Redirect","useDispatch","useSelector","changeLanguage","getTranslationLocator","getContent","flattenToAppURL","toGettextLang","config","CreateTranslation","props","_s","dispatch","language","translationOf","location","state","translationLocation","setTranslationLocation","useState","translationObject","setTranslationObject","languageFrom","intl","locale","useEffect","then","resp","settings","supportedLanguages","includes","langFileName","default","__jsx","to","pathname","search","type","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Multilingual/CreateTranslation.jsx"],"sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { getTranslationLocator } from '@plone/volto/actions/translations/translations';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport { toGettextLang } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\n\nconst CreateTranslation = (props) => {\n  const dispatch = useDispatch();\n  const { language, translationOf } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n  const [translationObject, setTranslationObject] = React.useState(null);\n  const languageFrom = useSelector((state) => state.intl.locale);\n\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then((resp) => {\n      setTranslationLocation(resp['@id']);\n    });\n\n    //and we load the translationObject\n    dispatch(getContent(translationOf, null, 'translationObject')).then(\n      (resp) => {\n        setTranslationObject(resp);\n      },\n    );\n\n    // On unmount we dispatch the language change\n    return () => {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        const langFileName = toGettextLang(language);\n        import(\n          /* @vite-ignore */ '@root/../locales/' + langFileName + '.json'\n        ).then((locale) => {\n          dispatch(changeLanguage(language, locale.default));\n        });\n      }\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n\n  return (\n    translationLocation &&\n    translationObject && (\n      <Redirect\n        to={{\n          pathname: `${flattenToAppURL(translationLocation)}/add`,\n          search: `?type=${props.location.state.type}`,\n          state: {\n            translationOf: props.location.state.translationOf,\n            language: props.location.state.language,\n            translationObject: translationObject,\n            languageFrom,\n          },\n        }}\n      />\n    )\n  );\n};\n\nexport default CreateTranslation;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,qBAAqB,QAAQ,gDAAgD;AACtF,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,aAAa,QAAQ,kCAAkC;AAChE,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEY,QAAQ;IAAEC;EAAc,CAAC,GAAGJ,KAAK,CAACK,QAAQ,CAACC,KAAK;EACxD,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnB,KAAK,CAACoB,QAAQ,CAAC,IAAI,CAAC;EAC1E,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGtB,KAAK,CAACoB,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAMG,YAAY,GAAGpB,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACO,IAAI,CAACC,MAAM,CAAC;EAE9DzB,KAAK,CAAC0B,SAAS,CAAC,MAAM;IACpB;IACAb,QAAQ,CAACR,qBAAqB,CAACU,aAAa,EAAED,QAAQ,CAAC,CAAC,CAACa,IAAI,CAAEC,IAAI,IAAK;MACtET,sBAAsB,CAACS,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAf,QAAQ,CAACP,UAAU,CAACS,aAAa,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC,CAACY,IAAI,CAChEC,IAAI,IAAK;MACRN,oBAAoB,CAACM,IAAI,CAAC;IAC5B,CACF,CAAC;;IAED;IACA,OAAO,MAAM;MACX;MACA,IAAInB,MAAM,CAACoB,QAAQ,CAACC,kBAAkB,CAACC,QAAQ,CAACjB,QAAQ,CAAC,EAAE;QACzD,MAAMkB,YAAY,GAAGxB,aAAa,CAACM,QAAQ,CAAC;QAC5C,MAAM,CACJ,kBAAmB,mBAAmB,GAAGkB,YAAY,GAAG,OAC1D,CAAC,CAACL,IAAI,CAAEF,MAAM,IAAK;UACjBZ,QAAQ,CAACT,cAAc,CAACU,QAAQ,EAAEW,MAAM,CAACQ,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC;MACJ;IACF,CAAC;IACD;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OACEf,mBAAmB,IACnBG,iBAAiB,IACfa,KAAA,CAACjC,QAAQ;IACPkC,EAAE,EAAE;MACFC,QAAQ,EAAE,GAAG7B,eAAe,CAACW,mBAAmB,CAAC,MAAM;MACvDmB,MAAM,EAAE,SAAS1B,KAAK,CAACK,QAAQ,CAACC,KAAK,CAACqB,IAAI,EAAE;MAC5CrB,KAAK,EAAE;QACLF,aAAa,EAAEJ,KAAK,CAACK,QAAQ,CAACC,KAAK,CAACF,aAAa;QACjDD,QAAQ,EAAEH,KAAK,CAACK,QAAQ,CAACC,KAAK,CAACH,QAAQ;QACvCO,iBAAiB,EAAEA,iBAAiB;QACpCE;MACF;IACF,CAAE;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACF;AAEL,CAAC;AAAChC,EAAA,CArDIF,iBAAiB;EAAA,QACJR,WAAW,EAIPC,WAAW;AAAA;AAAA0C,EAAA,GAL5BnC,iBAAiB;AAuDvB,eAAeA,iBAAiB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}