{"ast":null,"code":"import { Text, Transforms, Element } from 'slate'; // Editor,\nimport { SIMPLELINK } from '@plone/volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\nconst nodeToText = node => {\n  if (Text.isText(node)) {\n    return node.text.trim();\n  } else {\n    return node.children.map(nodeToText).join('');\n  }\n};\nexport const withSimpleLink = editor => {\n  const {\n    isInline,\n    normalizeNode\n  } = editor;\n  editor.isInline = element => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  };\n  editor.normalizeNode = entry => {\n    const [node, path] = entry;\n    const isTextNode = Text.isText(node);\n    const isElementNode = Element.isElement(node);\n    const isLinkTypeNode = node.type === SIMPLELINK;\n\n    // delete childless link nodes\n    if (!isTextNode && isElementNode && isLinkTypeNode && !nodeToText(node)) {\n      Transforms.removeNodes(editor, {\n        at: path\n      });\n      return;\n    }\n    return normalizeNode(entry);\n  };\n  return editor;\n};\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n  let children = Array.from(parent.childNodes).map(el => deserialize(editor, el)).flat();\n  if (!children.length) children = [{\n    text: ''\n  }];\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href')\n    }\n  };\n  return jsx('element', attrs, children);\n};\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';","map":{"version":3,"names":["Text","Transforms","Element","SIMPLELINK","jsx","deserialize","nodeToText","node","isText","text","trim","children","map","join","withSimpleLink","editor","isInline","normalizeNode","element","type","entry","path","isTextNode","isElementNode","isElement","isLinkTypeNode","removeNodes","at","simpleLinkDeserializer","el","parent","Array","from","childNodes","flat","length","attrs","data","url","getAttribute","id"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/Link/extensions.js"],"sourcesContent":["import { Text, Transforms, Element } from 'slate'; // Editor,\nimport { SIMPLELINK } from '@plone/volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\n\nconst nodeToText = (node) => {\n  if (Text.isText(node)) {\n    return node.text.trim();\n  } else {\n    return node.children.map(nodeToText).join('');\n  }\n};\n\nexport const withSimpleLink = (editor) => {\n  const { isInline, normalizeNode } = editor;\n\n  editor.isInline = (element) => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n    const isTextNode = Text.isText(node);\n    const isElementNode = Element.isElement(node);\n    const isLinkTypeNode = node.type === SIMPLELINK;\n\n    // delete childless link nodes\n    if (!isTextNode && isElementNode && isLinkTypeNode && !nodeToText(node)) {\n      Transforms.removeNodes(editor, { at: path });\n      return;\n    }\n\n    return normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n\n  let children = Array.from(parent.childNodes)\n    .map((el) => deserialize(editor, el))\n    .flat();\n\n  if (!children.length) children = [{ text: '' }];\n\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href'),\n    },\n  };\n\n  return jsx('element', attrs, children);\n};\n\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO,CAAC,CAAC;AACnD,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,WAAW,QAAQ,uCAAuC;AAEnE,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAC3B,IAAIP,IAAI,CAACQ,MAAM,CAACD,IAAI,CAAC,EAAE;IACrB,OAAOA,IAAI,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC;EACzB,CAAC,MAAM;IACL,OAAOH,IAAI,CAACI,QAAQ,CAACC,GAAG,CAACN,UAAU,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,MAAM;IAAEC,QAAQ;IAAEC;EAAc,CAAC,GAAGF,MAAM;EAE1CA,MAAM,CAACC,QAAQ,GAAIE,OAAO,IAAK;IAC7B,OAAOA,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKhB,UAAU,GAAG,IAAI,GAAGa,QAAQ,CAACE,OAAO,CAAC;EAC1E,CAAC;EAEDH,MAAM,CAACE,aAAa,GAAIG,KAAK,IAAK;IAChC,MAAM,CAACb,IAAI,EAAEc,IAAI,CAAC,GAAGD,KAAK;IAC1B,MAAME,UAAU,GAAGtB,IAAI,CAACQ,MAAM,CAACD,IAAI,CAAC;IACpC,MAAMgB,aAAa,GAAGrB,OAAO,CAACsB,SAAS,CAACjB,IAAI,CAAC;IAC7C,MAAMkB,cAAc,GAAGlB,IAAI,CAACY,IAAI,KAAKhB,UAAU;;IAE/C;IACA,IAAI,CAACmB,UAAU,IAAIC,aAAa,IAAIE,cAAc,IAAI,CAACnB,UAAU,CAACC,IAAI,CAAC,EAAE;MACvEN,UAAU,CAACyB,WAAW,CAACX,MAAM,EAAE;QAAEY,EAAE,EAAEN;MAAK,CAAC,CAAC;MAC5C;IACF;IAEA,OAAOJ,aAAa,CAACG,KAAK,CAAC;EAC7B,CAAC;EAED,OAAOL,MAAM;AACf,CAAC;AAED,OAAO,MAAMa,sBAAsB,GAAGA,CAACb,MAAM,EAAEc,EAAE,KAAK;EACpD,IAAIC,MAAM,GAAGD,EAAE;EAEf,IAAIlB,QAAQ,GAAGoB,KAAK,CAACC,IAAI,CAACF,MAAM,CAACG,UAAU,CAAC,CACzCrB,GAAG,CAAEiB,EAAE,IAAKxB,WAAW,CAACU,MAAM,EAAEc,EAAE,CAAC,CAAC,CACpCK,IAAI,CAAC,CAAC;EAET,IAAI,CAACvB,QAAQ,CAACwB,MAAM,EAAExB,QAAQ,GAAG,CAAC;IAAEF,IAAI,EAAE;EAAG,CAAC,CAAC;EAE/C,MAAM2B,KAAK,GAAG;IACZjB,IAAI,EAAEhB,UAAU;IAChBkC,IAAI,EAAE;MACJC,GAAG,EAAET,EAAE,CAACU,YAAY,CAAC,MAAM;IAC7B;EACF,CAAC;EAED,OAAOnC,GAAG,CAAC,SAAS,EAAEgC,KAAK,EAAEzB,QAAQ,CAAC;AACxC,CAAC;AAEDiB,sBAAsB,CAACY,EAAE,GAAG,wBAAwB","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}