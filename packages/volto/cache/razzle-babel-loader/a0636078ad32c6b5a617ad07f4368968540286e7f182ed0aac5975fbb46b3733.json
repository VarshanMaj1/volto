{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/BlocksToolbar.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport { getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers/Blocks/Blocks';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport without from 'lodash/without';\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions/blocksClipboard/blocksClipboard';\nimport config from '@plone/volto/registry';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { cloneBlocks } from '@plone/volto/helpers/Blocks/cloneBlocks';\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n  loadFromStorage() {\n    var _load;\n    const clipboard = (_load = load({\n      states: ['blocksClipboard']\n    })) === null || _load === void 0 ? void 0 : _load.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard)) this.props.setBlocksClipboard(clipboard || {});\n  }\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds)\n      })\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n  setBlocksClipboard(actionType) {\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(blockId => [blockId, blocks[blockId]]).filter(([blockId]) => !!blockId); // Removes null blocks\n    this.props.setBlocksClipboard({\n      [actionType]: blocksData\n    });\n    this.props.onSetSelectedBlocks([]);\n  }\n  pasteBlocks(e) {\n    const {\n      formData,\n      blocksClipboard = {},\n      selectedBlock\n    } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData.filter(([blockId, blockData]) => blockId && !!blockData['@type']) // Removes null blocks\n    .map(([blockId, blockData]) => {\n      const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n      return mode === 'copy' ? blockConfig.cloneData ? blockConfig.cloneData(blockData) : [uuid(), cloneBlocks(blockData)] : [blockId, blockData]; // if cut/pasting blocks, we don't clone\n    }).filter(info => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex = formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n    const newBlockData = {\n      [blocksFieldname]: _objectSpread(_objectSpread({}, formData[blocksFieldname]), Object.assign({}, ...cloneWithIds.map(([id, data]) => ({\n        [id]: data\n      })))),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: [...formData[blocksLayoutFieldname].items.slice(0, selectedIndex), ...cloneWithIds.map(([id]) => id), ...formData[blocksLayoutFieldname].items.slice(selectedIndex)]\n      })\n    };\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl\n    } = this.props;\n    return __jsx(React.Fragment, null, selectedBlocks.length > 0 ? __jsx(React.Fragment, null, __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-delete-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.deleteBlocks),\n      onClick: this.deleteBlocks,\n      tabIndex: 0,\n      className: \"deleteBlocks\",\n      id: \"toolbar-delete-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-cut-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.cutBlocks),\n      onClick: this.cutBlocksToClipboard,\n      tabIndex: 0,\n      className: \"cutBlocks\",\n      id: \"toolbar-cut-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: cutSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-copy-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.copyBlocks),\n      onClick: this.copyBlocksToClipboard,\n      tabIndex: 0,\n      className: \"copyBlocks\",\n      id: \"toolbar-copy-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: copySVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    })))) : '', selectedBlock && ((blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.cut) || (blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.copy)) && __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"block-paste-btn\",\n      dependencies: [selectedBlock],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.pasteBlocks),\n      onClick: this.pasteBlocks,\n      tabIndex: 0,\n      className: \"pasteBlocks\",\n      id: \"toolbar-paste-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"blockCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }, (blocksClipboard.cut || blocksClipboard.copy).length), __jsx(Icon, {\n      name: pasteSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }\n    }))));\n  }\n}\nexport default compose(injectIntl, connect(state => {\n  return {\n    blocksClipboard: (state === null || state === void 0 ? void 0 : state.blocksClipboard) || {}\n  };\n}, {\n  setBlocksClipboard,\n  resetBlocksClipboard\n}))(BlocksToolbarComponent);","map":{"version":3,"names":["React","compose","connect","injectIntl","messages","getBlocksFieldname","getBlocksLayoutFieldname","Icon","Plug","v4","uuid","load","isEqual","omit","without","setBlocksClipboard","resetBlocksClipboard","config","copySVG","cutSVG","pasteSVG","trashSVG","cloneBlocks","BlocksToolbarComponent","Component","constructor","props","copyBlocksToClipboard","bind","cutBlocksToClipboard","deleteBlocks","loadFromStorage","pasteBlocks","_load","clipboard","states","blocksClipboard","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","blockIds","selectedBlocks","formData","blocksFieldname","blocksLayoutFieldname","onSelectBlock","newBlockData","_objectSpread","items","onChangeBlocks","actionType","blocks","blocksData","map","blockId","filter","onSetSelectedBlocks","e","selectedBlock","mode","Object","keys","includes","cloneWithIds","blockData","blockConfig","blocksConfig","cloneData","info","selectedIndex","indexOf","assign","id","data","slice","ctrlKey","metaKey","render","intl","__jsx","Fragment","length","pluggable","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMessage","onClick","tabIndex","className","name","size","cutBlocks","copyBlocks","cut","copy","dependencies","state"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/BlocksToolbar.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { messages } from '@plone/volto/helpers/MessageLabels/MessageLabels';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers/Blocks/Blocks';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport without from 'lodash/without';\n\nimport {\n  setBlocksClipboard,\n  resetBlocksClipboard,\n} from '@plone/volto/actions/blocksClipboard/blocksClipboard';\nimport config from '@plone/volto/registry';\n\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { cloneBlocks } from '@plone/volto/helpers/Blocks/cloneBlocks';\n\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    const clipboard = load({ states: ['blocksClipboard'] })?.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard))\n      this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds),\n      },\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks\n      .map((blockId) => [blockId, blocks[blockId]])\n      .filter(([blockId]) => !!blockId); // Removes null blocks\n    this.props.setBlocksClipboard({ [actionType]: blocksData });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const { formData, blocksClipboard = {}, selectedBlock } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData\n      .filter(([blockId, blockData]) => blockId && !!blockData['@type']) // Removes null blocks\n      .map(([blockId, blockData]) => {\n        const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy'\n          ? blockConfig.cloneData\n            ? blockConfig.cloneData(blockData)\n            : [uuid(), cloneBlocks(blockData)]\n          : [blockId, blockData]; // if cut/pasting blocks, we don't clone\n      })\n      .filter((info) => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex =\n      formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n\n    const newBlockData = {\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        ...Object.assign(\n          {},\n          ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n        ),\n      },\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, selectedIndex),\n          ...cloneWithIds.map(([id]) => id),\n          ...formData[blocksLayoutFieldname].items.slice(selectedIndex),\n        ],\n      },\n    };\n\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl,\n    } = this.props;\n    return (\n      <>\n        {selectedBlocks.length > 0 ? (\n          <>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-delete-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.deleteBlocks)}\n                onClick={this.deleteBlocks}\n                tabIndex={0}\n                className=\"deleteBlocks\"\n                id=\"toolbar-delete-blocks\"\n              >\n                <Icon name={trashSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-cut-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.cutBlocks)}\n                onClick={this.cutBlocksToClipboard}\n                tabIndex={0}\n                className=\"cutBlocks\"\n                id=\"toolbar-cut-blocks\"\n              >\n                <Icon name={cutSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-copy-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.copyBlocks)}\n                onClick={this.copyBlocksToClipboard}\n                tabIndex={0}\n                className=\"copyBlocks\"\n                id=\"toolbar-copy-blocks\"\n              >\n                <Icon name={copySVG} size=\"30px\" />\n              </button>\n            </Plug>\n          </>\n        ) : (\n          ''\n        )}\n        {selectedBlock && (blocksClipboard?.cut || blocksClipboard?.copy) && (\n          <Plug\n            pluggable=\"main.toolbar.bottom\"\n            id=\"block-paste-btn\"\n            dependencies={[selectedBlock]}\n          >\n            <button\n              aria-label={intl.formatMessage(messages.pasteBlocks)}\n              onClick={this.pasteBlocks}\n              tabIndex={0}\n              className=\"pasteBlocks\"\n              id=\"toolbar-paste-blocks\"\n            >\n              <span className=\"blockCount\">\n                {(blocksClipboard.cut || blocksClipboard.copy).length}\n              </span>\n              <Icon name={pasteSVG} size=\"30px\" />\n            </button>\n          </Plug>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        blocksClipboard: state?.blocksClipboard || {},\n      };\n    },\n    { setBlocksClipboard, resetBlocksClipboard },\n  ),\n)(BlocksToolbarComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}