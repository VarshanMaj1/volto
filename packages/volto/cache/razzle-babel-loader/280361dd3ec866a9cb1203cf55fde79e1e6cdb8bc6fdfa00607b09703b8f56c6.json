{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Comments/CommentEditModal.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport { updateComment } from '@plone/volto/actions/comments/comments';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nconst messages = defineMessages({\n  editComment: {\n    \"id\": \"Edit comment\",\n    \"defaultMessage\": \"Edit comment\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  comment: {\n    \"id\": \"Comment\",\n    \"defaultMessage\": \"Comment\"\n  }\n});\nconst CommentEditModal = props => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    onOk,\n    open,\n    onCancel\n  } = props;\n  const request = useSelector(state => state.comments.update, shallowEqual);\n  const prevRequestLoading = usePrevious(request.loading);\n  useEffect(() => {\n    if (prevRequestLoading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevRequestLoading, request.loaded]);\n  const onSubmit = data => {\n    dispatch(updateComment(props.id, data.text));\n  };\n  return props.open && __jsx(ModalForm, {\n    open: open,\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    formData: {\n      text: props.text\n    },\n    title: intl.formatMessage(messages.editComment),\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['text']\n      }],\n      properties: {\n        text: {\n          title: intl.formatMessage(messages.comment),\n          type: 'string',\n          widget: 'textarea',\n          description: ''\n        }\n      },\n      required: ['text']\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  });\n};\nCommentEditModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }),\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};\nCommentEditModal.defaultProps = {\n  id: '',\n  text: ''\n};\nexport default CommentEditModal;","map":{"version":3,"names":["useEffect","PropTypes","useDispatch","useSelector","shallowEqual","defineMessages","useIntl","usePrevious","updateComment","ModalForm","messages","editComment","default","comment","CommentEditModal","props","intl","dispatch","onOk","open","onCancel","request","state","comments","update","prevRequestLoading","loading","loaded","onSubmit","data","id","text","__jsx","formData","title","formatMessage","schema","fieldsets","fields","properties","type","widget","description","required","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","string","isRequired","shape","bool","func","defaultProps"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Comments/CommentEditModal.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport { updateComment } from '@plone/volto/actions/comments/comments';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\n\nconst messages = defineMessages({\n  editComment: {\n    id: 'Edit comment',\n    defaultMessage: 'Edit comment',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n});\n\nconst CommentEditModal = (props) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { onOk, open, onCancel } = props;\n  const request = useSelector((state) => state.comments.update, shallowEqual);\n\n  const prevRequestLoading = usePrevious(request.loading);\n\n  useEffect(() => {\n    if (prevRequestLoading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevRequestLoading, request.loaded]);\n\n  const onSubmit = (data) => {\n    dispatch(updateComment(props.id, data.text));\n  };\n\n  return (\n    props.open && (\n      <ModalForm\n        open={open}\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        formData={{ text: props.text }}\n        title={intl.formatMessage(messages.editComment)}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: intl.formatMessage(messages.default),\n              fields: ['text'],\n            },\n          ],\n          properties: {\n            text: {\n              title: intl.formatMessage(messages.comment),\n              type: 'string',\n              widget: 'textarea',\n              description: '',\n            },\n          },\n          required: ['text'],\n        }}\n      />\n    )\n  );\n};\n\nCommentEditModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool,\n  }),\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nCommentEditModal.defaultProps = {\n  id: '',\n  text: '',\n};\n\nexport default CommentEditModal;\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,WAAW,EAAEC,WAAW,EAAEC,YAAY,QAAQ,aAAa;AACpE,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AAEpD,SAASC,WAAW,QAAQ,wCAAwC;AACpE,SAASC,aAAa,QAAQ,wCAAwC;AACtE,SAASC,SAAS,QAAQ,qCAAqC;AAE/D,MAAMC,QAAQ,GAAGL,cAAc,CAAC;EAC9BM,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,OAAO;IAAA;IAAA;EAAA;AAIT,CAAC,CAAC;AAEF,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,MAAMC,IAAI,GAAGV,OAAO,CAAC,CAAC;EACtB,MAAMW,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEgB,IAAI;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGL,KAAK;EACtC,MAAMM,OAAO,GAAGlB,WAAW,CAAEmB,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACC,MAAM,EAAEpB,YAAY,CAAC;EAE3E,MAAMqB,kBAAkB,GAAGlB,WAAW,CAACc,OAAO,CAACK,OAAO,CAAC;EAEvD1B,SAAS,CAAC,MAAM;IACd,IAAIyB,kBAAkB,IAAIJ,OAAO,CAACM,MAAM,EAAE;MACxCT,IAAI,CAAC,CAAC;IACR;EACF,CAAC,EAAE,CAACA,IAAI,EAAEO,kBAAkB,EAAEJ,OAAO,CAACM,MAAM,CAAC,CAAC;EAE9C,MAAMC,QAAQ,GAAIC,IAAI,IAAK;IACzBZ,QAAQ,CAACT,aAAa,CAACO,KAAK,CAACe,EAAE,EAAED,IAAI,CAACE,IAAI,CAAC,CAAC;EAC9C,CAAC;EAED,OACEhB,KAAK,CAACI,IAAI,IACRa,KAAA,CAACvB,SAAS;IACRU,IAAI,EAAEA,IAAK;IACXS,QAAQ,EAAEA,QAAS;IACnBR,QAAQ,EAAEA,QAAS;IACnBa,QAAQ,EAAE;MAAEF,IAAI,EAAEhB,KAAK,CAACgB;IAAK,CAAE;IAC/BG,KAAK,EAAElB,IAAI,CAACmB,aAAa,CAACzB,QAAQ,CAACC,WAAW,CAAE;IAChDyB,MAAM,EAAE;MACNC,SAAS,EAAE,CACT;QACEP,EAAE,EAAE,SAAS;QACbI,KAAK,EAAElB,IAAI,CAACmB,aAAa,CAACzB,QAAQ,CAACE,OAAO,CAAC;QAC3C0B,MAAM,EAAE,CAAC,MAAM;MACjB,CAAC,CACF;MACDC,UAAU,EAAE;QACVR,IAAI,EAAE;UACJG,KAAK,EAAElB,IAAI,CAACmB,aAAa,CAACzB,QAAQ,CAACG,OAAO,CAAC;UAC3C2B,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAE,UAAU;UAClBC,WAAW,EAAE;QACf;MACF,CAAC;MACDC,QAAQ,EAAE,CAAC,MAAM;IACnB,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACF;AAEL,CAAC;AAEDnC,gBAAgB,CAACoC,SAAS,GAAG;EAC3BpB,EAAE,EAAE7B,SAAS,CAACkD,MAAM,CAACC,UAAU;EAC/BrB,IAAI,EAAE9B,SAAS,CAACkD,MAAM,CAACC,UAAU;EACjC/B,OAAO,EAAEpB,SAAS,CAACoD,KAAK,CAAC;IACvB3B,OAAO,EAAEzB,SAAS,CAACqD,IAAI;IACvB3B,MAAM,EAAE1B,SAAS,CAACqD;EACpB,CAAC,CAAC;EACFnC,IAAI,EAAElB,SAAS,CAACqD,IAAI,CAACF,UAAU;EAC/BlC,IAAI,EAAEjB,SAAS,CAACsD,IAAI,CAACH,UAAU;EAC/BhC,QAAQ,EAAEnB,SAAS,CAACsD,IAAI,CAACH;AAC3B,CAAC;AAEDtC,gBAAgB,CAAC0C,YAAY,GAAG;EAC9B1B,EAAE,EAAE,EAAE;EACNC,IAAI,EAAE;AACR,CAAC;AAED,eAAejB,gBAAgB","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Edit comment","defaultMessage":"Edit comment"},{"id":"Default","defaultMessage":"Default"},{"id":"Comment","defaultMessage":"Comment"}]}},"sourceType":"module","externalDependencies":[]}