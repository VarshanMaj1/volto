{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Aliases.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { getBaseUrl, getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { removeAliases, addAliases, getAliases, uploadAliases } from '@plone/volto/actions/aliases/aliases';\nimport { createPortal } from 'react-dom';\nimport { Button, Checkbox, Container, Form, Header, Input, Loader, Menu, Pagination, Radio, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport DatetimeWidget from '@plone/volto/components/manage/Widgets/DatetimeWidget';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport FormattedDate from '@plone/volto/components/theme/FormattedDate/FormattedDate';\nimport { useClient } from '@plone/volto/hooks/client/useClient';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport map from 'lodash/map';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  AddUrl: {\n    \"id\": \"Add Alternative URL\",\n    \"defaultMessage\": \"Add Alternative URL\"\n  },\n  EditUrl: {\n    \"id\": \"Edit Alternative URL\",\n    \"defaultMessage\": \"Edit Alternative URL\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  },\n  successUpload: {\n    \"id\": \"Aliases have been uploaded.\",\n    \"defaultMessage\": \"Aliases have been uploaded.\"\n  },\n  successRemove: {\n    \"id\": \"Aliases have been removed.\",\n    \"defaultMessage\": \"Aliases have been removed.\"\n  },\n  filterByPrefix: {\n    \"id\": \"Filter by prefix\",\n    \"defaultMessage\": \"Filter by path\"\n  },\n  manualOrAuto: {\n    \"id\": \"Manually or automatically added?\",\n    \"defaultMessage\": \"Manually or automatically added?\"\n  },\n  createdAfter: {\n    \"id\": \"Created after\",\n    \"defaultMessage\": \"Created after\"\n  },\n  createdBefore: {\n    \"id\": \"Created before\",\n    \"defaultMessage\": \"Created before\"\n  },\n  altUrlPathTitle: {\n    \"id\": \"Alternative url path (Required)\",\n    \"defaultMessage\": \"Alternative URL path (Required)\"\n  },\n  altUrlError: {\n    \"id\": \"Alternative url path must start with a slash.\",\n    \"defaultMessage\": \"Alternative URL path must start with a slash.\"\n  },\n  targetUrlPathTitle: {\n    \"id\": \"Target Path (Required)\",\n    \"defaultMessage\": \"Target Path (Required)\"\n  },\n  BulkUploadAltUrls: {\n    \"id\": \"BulkUploadAltUrls\",\n    \"defaultMessage\": \"Bulk upload CSV\"\n  },\n  CSVFile: {\n    \"id\": \"CSVFile\",\n    \"defaultMessage\": \"CSV file\"\n  },\n  Both: {\n    \"id\": \"Both\",\n    \"defaultMessage\": \"Both\"\n  },\n  Automatically: {\n    \"id\": \"Automatically\",\n    \"defaultMessage\": \"Automatically\"\n  },\n  Manually: {\n    \"id\": \"Manually\",\n    \"defaultMessage\": \"Manually\"\n  },\n  examplePath: {\n    \"id\": \"examplePath\",\n    \"defaultMessage\": \"/example\"\n  }\n});\nconst filterChoices = [{\n  label: 'Both',\n  value: ''\n}, {\n  label: 'Automatically',\n  value: 'no'\n}, {\n  label: 'Manually',\n  value: 'yes'\n}];\nconst itemsPerPageChoices = [10, 25, 50, 'All'];\nconst Aliases = props => {\n  _s();\n  const title = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    pathname\n  } = useLocation();\n  const history = useHistory();\n  const hasAdvancedFiltering = useSelector(state => {\n    var _state$site$data, _state$site$data$feat;\n    return (_state$site$data = state.site.data) === null || _state$site$data === void 0 ? void 0 : (_state$site$data$feat = _state$site$data.features) === null || _state$site$data$feat === void 0 ? void 0 : _state$site$data$feat.filter_aliases_by_date;\n  });\n  const hasBulkUpload = hasAdvancedFiltering !== undefined;\n  const aliases = useSelector(state => state.aliases);\n  const {\n    0: filterType,\n    1: setFilterType\n  } = useState(filterChoices[0]);\n  const {\n    0: createdBefore,\n    1: setCreatedBefore\n  } = useState(null);\n  const {\n    0: createdAfter,\n    1: setCreatedAfter\n  } = useState(null);\n  const {\n    0: aliasesToRemove,\n    1: setAliasesToRemove\n  } = useState([]);\n  const {\n    0: filterQuery,\n    1: setFilterQuery\n  } = useState('');\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: itemsPerPage,\n    1: setItemsPerPage\n  } = useState(10);\n  const {\n    0: addModalOpen,\n    1: setAddModalOpen\n  } = useState(false);\n  const {\n    0: addError,\n    1: setAddError\n  } = useState(null);\n  const {\n    0: editingData,\n    1: setEditingData\n  } = useState(null);\n  const {\n    0: uploadModalOpen,\n    1: setUploadModalOpen\n  } = useState(false);\n  const {\n    0: uploadError,\n    1: setUploadError\n  } = useState(null);\n  const {\n    0: csvErrors,\n    1: setCSVErrors\n  } = useState([]);\n  const isClient = useClient();\n  const updateResults = useCallback(() => {\n    const options = {\n      query: filterQuery,\n      manual: filterType.value,\n      batchStart: (activePage - 1) * itemsPerPage,\n      batchSize: itemsPerPage === 'All' ? 999999999999 : itemsPerPage\n    };\n    if (hasAdvancedFiltering) {\n      options.start = createdAfter || '';\n      options.end = createdBefore || '';\n    } else {\n      options.datetime = createdBefore || '';\n    }\n    dispatch(getAliases(getBaseUrl(pathname), options));\n  }, [activePage, createdAfter, createdBefore, dispatch, filterQuery, filterType.value, hasAdvancedFiltering, itemsPerPage, pathname]);\n\n  // Update results after changing the page.\n  // (We intentionally leave updateResults out of the deps.)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => updateResults(), [activePage, itemsPerPage]);\n\n  // Calculate page count from results\n  const pages = useMemo(() => {\n    let pages = Math.ceil(aliases.items_total / itemsPerPage);\n    if (pages === 0 || isNaN(pages)) {\n      pages = '';\n    }\n    return pages;\n  }, [aliases.items_total, itemsPerPage]);\n\n  // Add new alias\n  const handleAdd = formData => {\n    const {\n      altUrlPath,\n      targetUrlPath\n    } = formData;\n    // Validate altUrlPath starts with a slash\n    if (!altUrlPath || altUrlPath.charAt(0) !== '/') {\n      setAddError(intl.formatMessage(messages.altUrlError));\n      return;\n    }\n    // Remove existing alias first if we're editing it.\n    const precondition = editingData ? dispatch(removeAliases('', {\n      items: [{\n        path: editingData.altUrlPath\n      }]\n    })) : Promise.resolve();\n    precondition.then(() => {\n      dispatch(addAliases('', {\n        items: [{\n          path: altUrlPath,\n          'redirect-to': targetUrlPath\n        }]\n      })).then(() => {\n        updateResults();\n        setAddModalOpen(false);\n        setEditingData(null);\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.successAdd),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }\n        }));\n      }).catch(error => {\n        var _error$response, _error$response$body;\n        setAddError((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$body = _error$response.body) === null || _error$response$body === void 0 ? void 0 : _error$response$body.message);\n      });\n    });\n  };\n\n  // Check/uncheck an alias\n  const handleCheckAlias = alias => {\n    if (aliasesToRemove.includes(alias)) {\n      setAliasesToRemove(aliasesToRemove.filter(x => x !== alias));\n    } else {\n      setAliasesToRemove([...aliasesToRemove, alias]);\n    }\n  };\n\n  // Remove selected aliases\n  const handleRemoveAliases = () => {\n    dispatch(removeAliases('', {\n      items: aliasesToRemove.map(a => ({\n        path: a\n      }))\n    })).then(() => {\n      updateResults();\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.successRemove),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      }));\n    });\n    setAliasesToRemove([]);\n  };\n\n  // Upload CSV\n  const handleBulkUpload = formData => {\n    fetch(`data:${formData.file['content-type']};base64,${formData.file.data}`).then(res => res.blob()).then(blob => {\n      dispatch(uploadAliases(blob)).then(() => {\n        updateResults();\n        setUploadError(null);\n        setCSVErrors([]);\n        setUploadModalOpen(false);\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.successUpload),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }\n        }));\n      }).catch(error => {\n        var _error$response2, _error$response2$body, _error$response$body$, _error$response3, _error$response3$body;\n        setUploadError((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$body = _error$response2.body) === null || _error$response2$body === void 0 ? void 0 : _error$response2$body.message);\n        setCSVErrors((_error$response$body$ = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$body = _error$response3.body) === null || _error$response3$body === void 0 ? void 0 : _error$response3$body.csv_errors) !== null && _error$response$body$ !== void 0 ? _error$response$body$ : []);\n      });\n    });\n  };\n  return __jsx(\"div\", {\n    id: \"page-aliases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.aliases),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }\n  }), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }\n  }, __jsx(\"article\", {\n    id: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }, __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 11\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"URL Management\",\n    defaultMessage: \"URL Management\",\n    values: {\n      title: __jsx(\"q\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 34\n        }\n      }, title)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 15\n    }\n  })), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    primary: true,\n    id: \"add-alt-url\",\n    onClick: () => setAddModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 15\n    }\n  }, intl.formatMessage(messages.AddUrl), \"\\u2026\"), addModalOpen && __jsx(ModalForm, {\n    open: true,\n    onSubmit: handleAdd,\n    onCancel: () => setAddModalOpen(false),\n    title: editingData ? intl.formatMessage(messages.EditUrl) : intl.formatMessage(messages.AddUrl),\n    submitError: addError,\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        fields: ['altUrlPath', 'targetUrlPath']\n      }],\n      properties: {\n        altUrlPath: {\n          title: intl.formatMessage(messages.altUrlPathTitle),\n          description: __jsx(FormattedMessage, {\n            id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring.\",\n            defaultMessage: \"Enter the absolute path where the alternative URL should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring.\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 27\n            }\n          }),\n          placeholder: intl.formatMessage(messages.examplePath)\n        },\n        targetUrlPath: {\n          title: intl.formatMessage(messages.targetUrlPathTitle),\n          description: __jsx(FormattedMessage, {\n            id: \"Enter the absolute path of the target. Target must exist or be an existing alternative url path to the target.\",\n            defaultMessage: \"Enter the absolute path of the target. Target must exist or be an existing alternative URL path to the target.\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 27\n            }\n          }),\n          placeholder: intl.formatMessage(messages.examplePath)\n        }\n      },\n      required: ['altUrlPath', 'targetUrlPath']\n    },\n    formData: editingData || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }), hasBulkUpload && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: () => setUploadModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.BulkUploadAltUrls), \"\\u2026\"), uploadModalOpen && __jsx(ModalForm, {\n    open: true,\n    onSubmit: handleBulkUpload,\n    onCancel: () => setUploadModalOpen(false),\n    title: intl.formatMessage(messages.BulkUploadAltUrls),\n    submitError: uploadError,\n    description: __jsx(React.Fragment, null, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"bulkUploadUrlsHelp\",\n      defaultMessage: \"Add many alternative URLs at once by uploading a CSV file. The first column should be the path to redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative, starting with a slash (/). An optional third column can contain a date and time. An optional fourth column can contain a boolean to mark as a manual redirect (default true).\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 29\n      }\n    })), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Example\",\n      defaultMessage: \"Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 29\n      }\n    }), \":\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 29\n      }\n    }), __jsx(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 29\n      }\n    }, \"/old-home-page.asp,/front-page,2019/01/27 10:42:59 GMT+1,true\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 31\n      }\n    }), \"/people/JoeT,/Users/joe-thurston,2018-12-31,false\")), csvErrors.length ? __jsx(\"div\", {\n      className: \"ui error message\",\n      style: {\n        'overflow-x': 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 29\n      }\n    }, __jsx(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 31\n      }\n    }, \"Errors:\", '\\n', csvErrors.map(err => `${err.line_number}: ${err.line} - ${err.message}\\n`))) : null),\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        fields: ['file']\n      }],\n      properties: {\n        file: {\n          title: intl.formatMessage(messages.CSVFile),\n          type: 'object',\n          factory: 'File Upload'\n        }\n      },\n      required: ['file']\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 21\n    }\n  }))), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 15\n    }\n  }, __jsx(Header, {\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"All existing alternative urls for this site\",\n    defaultMessage: \"Existing alternative URLs for this site\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 19\n    }\n  })), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 19\n    }\n  }, __jsx(FormFieldWrapper, {\n    id: \"filterQuery\",\n    title: intl.formatMessage(messages.filterByPrefix),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 21\n    }\n  }, __jsx(Input, {\n    name: \"filter\",\n    placeholder: intl.formatMessage(messages.examplePath),\n    value: filterQuery,\n    onChange: e => setFilterQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 23\n    }\n  }))), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 19\n    }\n  }, __jsx(FormFieldWrapper, {\n    id: \"filterType\",\n    title: intl.formatMessage(messages.manualOrAuto),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 21\n    }\n  }, __jsx(Form.Group, {\n    inline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 23\n    }\n  }, filterChoices.map((o, i) => __jsx(Form.Field, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 27\n    }\n  }, __jsx(Radio, {\n    label: intl.formatMessage({\n      id: o.label\n    }),\n    name: \"radioGroup\",\n    value: o.value,\n    checked: filterType === o,\n    onChange: () => setFilterType(o),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 29\n    }\n  })))))), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 19\n    }\n  }, __jsx(DatetimeWidget, {\n    id: \"created-before-date\",\n    title: intl.formatMessage(messages.createdBefore),\n    dateOnly: true,\n    value: createdBefore,\n    onChange: (id, value) => {\n      setCreatedBefore(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 21\n    }\n  })), hasAdvancedFiltering && __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 21\n    }\n  }, __jsx(DatetimeWidget, {\n    id: \"created-after-date\",\n    title: intl.formatMessage(messages.createdAfter),\n    dateOnly: true,\n    value: createdAfter,\n    onChange: (id, value) => {\n      setCreatedAfter(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 23\n    }\n  })), __jsx(Button, {\n    onClick: () => updateResults(),\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Filter\",\n    defaultMessage: \"Filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 21\n    }\n  }))))), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 13\n    }\n  }, __jsx(Header, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Alternative url path \\u2192 target url path (date and time of creation, manually created yes/no)\",\n    defaultMessage: \"Alternative URL path \\u2192 target URL path (date and time of creation, manually created yes/no)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 17\n    }\n  })), __jsx(Table, {\n    celled: true,\n    compact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 15\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 17\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 19\n    }\n  }, __jsx(Table.HeaderCell, {\n    width: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Select\",\n    defaultMessage: \"Select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 23\n    }\n  })), __jsx(Table.HeaderCell, {\n    width: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Alias\",\n    defaultMessage: \"Alias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 23\n    }\n  })), __jsx(Table.HeaderCell, {\n    width: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Date\",\n    defaultMessage: \"Date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 23\n    }\n  })), __jsx(Table.HeaderCell, {\n    width: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Manual\",\n    defaultMessage: \"Manual\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 23\n    }\n  })))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 17\n    }\n  }, aliases.get.loading && __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 21\n    }\n  }, __jsx(Table.Cell, {\n    colSpan: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 23\n    }\n  }, __jsx(Loader, {\n    active: true,\n    inline: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 25\n    }\n  }))), aliases.items.length > 0 && aliases.items.map((alias, i) => __jsx(Table.Row, {\n    key: i,\n    verticalAlign: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 23\n    }\n  }, __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 25\n    }\n  }, __jsx(Checkbox, {\n    onChange: (e, {\n      value\n    }) => handleCheckAlias(value),\n    checked: aliasesToRemove.includes(alias.path),\n    value: alias.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 27\n    }\n  })), __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 25\n    }\n  }, alias.path, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 27\n    }\n  }), \"\\xA0\\xA0\\u2192 \", alias['redirect-to'], ' ', __jsx(Button, {\n    basic: true,\n    style: {\n      verticalAlign: 'middle'\n    },\n    \"aria-label\": intl.formatMessage(messages.EditUrl),\n    onClick: () => {\n      setEditingData({\n        altUrlPath: alias.path,\n        targetUrlPath: alias['redirect-to']\n      });\n      setAddModalOpen(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 27\n    }\n  }, __jsx(Icon, {\n    name: editingSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 29\n    }\n  }))), __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedDate, {\n    date: alias.datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 27\n    }\n  })), __jsx(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 25\n    }\n  }, `${alias.manual}`))))), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 15\n    }\n  }, pages && __jsx(Pagination, {\n    boundaryRange: 0,\n    activePage: activePage,\n    ellipsisItem: null,\n    firstItem: null,\n    lastItem: null,\n    siblingRange: 1,\n    totalPages: pages,\n    onPageChange: (e, {\n      activePage\n    }) => setActivePage(activePage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 19\n    }\n  }), __jsx(Menu.Menu, {\n    position: \"right\",\n    style: {\n      display: 'flex',\n      marginLeft: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 17\n    }\n  }, __jsx(Menu.Item, {\n    style: {\n      color: 'grey'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Show\",\n    defaultMessage: \"Show\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 21\n    }\n  }), \":\"), map(itemsPerPageChoices, size => __jsx(Menu.Item, {\n    style: {\n      padding: '0 0.4em',\n      margin: '0em 0.357em',\n      cursor: 'pointer'\n    },\n    key: size,\n    value: size,\n    active: size === itemsPerPage,\n    onClick: (e, {\n      value\n    }) => {\n      setItemsPerPage(value);\n      setActivePage(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 21\n    }\n  }, size)))), __jsx(Button, {\n    id: \"remove-alt-urls\",\n    disabled: aliasesToRemove.length === 0,\n    onClick: handleRemoveAliases,\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Remove selected\",\n    defaultMessage: \"Remove selected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 17\n    }\n  })))))), isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(Link, {\n      className: \"item\",\n      to: \"#\",\n      onClick: () => history.push(getParentUrl(pathname)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 11\n    }\n  }), document.getElementById('toolbar')));\n};\n_s(Aliases, \"G54hK5MQa77f7AB7lqZOn2Qd2A4=\", false, function () {\n  return [useIntl, useDispatch, useLocation, useHistory, useSelector, useSelector, useClient];\n});\n_c = Aliases;\nexport default Aliases;\nvar _c;\n$RefreshReg$(_c, \"Aliases\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useDispatch","useSelector","Link","useHistory","useLocation","getBaseUrl","getParentUrl","Helmet","removeAliases","addAliases","getAliases","uploadAliases","createPortal","Button","Checkbox","Container","Form","Header","Input","Loader","Menu","Pagination","Radio","Segment","Table","FormattedMessage","defineMessages","useIntl","DatetimeWidget","FormFieldWrapper","ModalForm","Icon","Toolbar","Toast","FormattedDate","useClient","backSVG","editingSVG","map","toast","messages","back","aliases","AddUrl","EditUrl","success","successAdd","successUpload","successRemove","filterByPrefix","manualOrAuto","createdAfter","createdBefore","altUrlPathTitle","altUrlError","targetUrlPathTitle","BulkUploadAltUrls","CSVFile","Both","Automatically","Manually","examplePath","filterChoices","label","value","itemsPerPageChoices","Aliases","props","_s","title","intl","dispatch","pathname","history","hasAdvancedFiltering","state","_state$site$data","_state$site$data$feat","site","data","features","filter_aliases_by_date","hasBulkUpload","undefined","filterType","setFilterType","setCreatedBefore","setCreatedAfter","aliasesToRemove","setAliasesToRemove","filterQuery","setFilterQuery","activePage","setActivePage","itemsPerPage","setItemsPerPage","addModalOpen","setAddModalOpen","addError","setAddError","editingData","setEditingData","uploadModalOpen","setUploadModalOpen","uploadError","setUploadError","csvErrors","setCSVErrors","isClient","updateResults","options","query","manual","batchStart","batchSize","start","end","datetime","pages","Math","ceil","items_total","isNaN","handleAdd","formData","altUrlPath","targetUrlPath","charAt","formatMessage","precondition","items","path","Promise","resolve","then","__jsx","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","catch","error","_error$response","_error$response$body","response","body","message","handleCheckAlias","alias","includes","filter","x","handleRemoveAliases","a","handleBulkUpload","fetch","file","res","blob","_error$response2","_error$response2$body","_error$response$body$","_error$response3","_error$response3$body","csv_errors","id","Group","raised","className","defaultMessage","values","primary","onClick","open","onSubmit","onCancel","submitError","schema","fieldsets","fields","properties","description","placeholder","required","React","Fragment","length","style","err","line_number","line","type","factory","size","Field","name","onChange","e","target","inline","o","i","key","checked","dateOnly","celled","compact","Row","HeaderCell","width","Body","get","loading","Cell","colSpan","active","verticalAlign","basic","date","display","flexWrap","alignItems","marginBottom","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","onPageChange","position","marginLeft","Item","color","padding","margin","cursor","disabled","hideDefaultViewButtons","inner","to","push","document","getElementById","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Aliases.jsx"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { getBaseUrl, getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport {\n  removeAliases,\n  addAliases,\n  getAliases,\n  uploadAliases,\n} from '@plone/volto/actions/aliases/aliases';\nimport { createPortal } from 'react-dom';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Input,\n  Loader,\n  Menu,\n  Pagination,\n  Radio,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport DatetimeWidget from '@plone/volto/components/manage/Widgets/DatetimeWidget';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport FormattedDate from '@plone/volto/components/theme/FormattedDate/FormattedDate';\nimport { useClient } from '@plone/volto/hooks/client/useClient';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport map from 'lodash/map';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  AddUrl: {\n    id: 'Add Alternative URL',\n    defaultMessage: 'Add Alternative URL',\n  },\n  EditUrl: {\n    id: 'Edit Alternative URL',\n    defaultMessage: 'Edit Alternative URL',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n  successUpload: {\n    id: 'Aliases have been uploaded.',\n    defaultMessage: 'Aliases have been uploaded.',\n  },\n  successRemove: {\n    id: 'Aliases have been removed.',\n    defaultMessage: 'Aliases have been removed.',\n  },\n  filterByPrefix: {\n    id: 'Filter by prefix',\n    defaultMessage: 'Filter by path',\n  },\n  manualOrAuto: {\n    id: 'Manually or automatically added?',\n    defaultMessage: 'Manually or automatically added?',\n  },\n  createdAfter: {\n    id: 'Created after',\n    defaultMessage: 'Created after',\n  },\n  createdBefore: {\n    id: 'Created before',\n    defaultMessage: 'Created before',\n  },\n  altUrlPathTitle: {\n    id: 'Alternative url path (Required)',\n    defaultMessage: 'Alternative URL path (Required)',\n  },\n  altUrlError: {\n    id: 'Alternative url path must start with a slash.',\n    defaultMessage: 'Alternative URL path must start with a slash.',\n  },\n  targetUrlPathTitle: {\n    id: 'Target Path (Required)',\n    defaultMessage: 'Target Path (Required)',\n  },\n  BulkUploadAltUrls: {\n    id: 'BulkUploadAltUrls',\n    defaultMessage: 'Bulk upload CSV',\n  },\n  CSVFile: {\n    id: 'CSVFile',\n    defaultMessage: 'CSV file',\n  },\n  Both: {\n    id: 'Both',\n    defaultMessage: 'Both',\n  },\n  Automatically: {\n    id: 'Automatically',\n    defaultMessage: 'Automatically',\n  },\n  Manually: {\n    id: 'Manually',\n    defaultMessage: 'Manually',\n  },\n  examplePath: {\n    id: 'examplePath',\n    defaultMessage: '/example',\n  },\n});\n\nconst filterChoices = [\n  { label: 'Both', value: '' },\n  { label: 'Automatically', value: 'no' },\n  { label: 'Manually', value: 'yes' },\n];\n\nconst itemsPerPageChoices = [10, 25, 50, 'All'];\n\nconst Aliases = (props) => {\n  const title = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n  const history = useHistory();\n\n  const hasAdvancedFiltering = useSelector(\n    (state) => state.site.data?.features?.filter_aliases_by_date,\n  );\n  const hasBulkUpload = hasAdvancedFiltering !== undefined;\n  const aliases = useSelector((state) => state.aliases);\n  const [filterType, setFilterType] = useState(filterChoices[0]);\n  const [createdBefore, setCreatedBefore] = useState(null);\n  const [createdAfter, setCreatedAfter] = useState(null);\n  const [aliasesToRemove, setAliasesToRemove] = useState([]);\n  const [filterQuery, setFilterQuery] = useState('');\n  const [activePage, setActivePage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const [addError, setAddError] = useState(null);\n  const [editingData, setEditingData] = useState(null);\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const [uploadError, setUploadError] = useState(null);\n  const [csvErrors, setCSVErrors] = useState([]);\n  const isClient = useClient();\n\n  const updateResults = useCallback(() => {\n    const options = {\n      query: filterQuery,\n      manual: filterType.value,\n      batchStart: (activePage - 1) * itemsPerPage,\n      batchSize: itemsPerPage === 'All' ? 999999999999 : itemsPerPage,\n    };\n    if (hasAdvancedFiltering) {\n      options.start = createdAfter || '';\n      options.end = createdBefore || '';\n    } else {\n      options.datetime = createdBefore || '';\n    }\n    dispatch(getAliases(getBaseUrl(pathname), options));\n  }, [\n    activePage,\n    createdAfter,\n    createdBefore,\n    dispatch,\n    filterQuery,\n    filterType.value,\n    hasAdvancedFiltering,\n    itemsPerPage,\n    pathname,\n  ]);\n\n  // Update results after changing the page.\n  // (We intentionally leave updateResults out of the deps.)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => updateResults(), [activePage, itemsPerPage]);\n\n  // Calculate page count from results\n  const pages = useMemo(() => {\n    let pages = Math.ceil(aliases.items_total / itemsPerPage);\n    if (pages === 0 || isNaN(pages)) {\n      pages = '';\n    }\n    return pages;\n  }, [aliases.items_total, itemsPerPage]);\n\n  // Add new alias\n  const handleAdd = (formData) => {\n    const { altUrlPath, targetUrlPath } = formData;\n    // Validate altUrlPath starts with a slash\n    if (!altUrlPath || altUrlPath.charAt(0) !== '/') {\n      setAddError(intl.formatMessage(messages.altUrlError));\n      return;\n    }\n    // Remove existing alias first if we're editing it.\n    const precondition = editingData\n      ? dispatch(\n          removeAliases('', { items: [{ path: editingData.altUrlPath }] }),\n        )\n      : Promise.resolve();\n    precondition.then(() => {\n      dispatch(\n        addAliases('', {\n          items: [{ path: altUrlPath, 'redirect-to': targetUrlPath }],\n        }),\n      )\n        .then(() => {\n          updateResults();\n          setAddModalOpen(false);\n          setEditingData(null);\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.successAdd)}\n            />,\n          );\n        })\n        .catch((error) => {\n          setAddError(error.response?.body?.message);\n        });\n    });\n  };\n\n  // Check/uncheck an alias\n  const handleCheckAlias = (alias) => {\n    if (aliasesToRemove.includes(alias)) {\n      setAliasesToRemove(aliasesToRemove.filter((x) => x !== alias));\n    } else {\n      setAliasesToRemove([...aliasesToRemove, alias]);\n    }\n  };\n\n  // Remove selected aliases\n  const handleRemoveAliases = () => {\n    dispatch(\n      removeAliases('', {\n        items: aliasesToRemove.map((a) => ({ path: a })),\n      }),\n    ).then(() => {\n      updateResults();\n      toast.success(\n        <Toast\n          success\n          title={intl.formatMessage(messages.success)}\n          content={intl.formatMessage(messages.successRemove)}\n        />,\n      );\n    });\n    setAliasesToRemove([]);\n  };\n\n  // Upload CSV\n  const handleBulkUpload = (formData) => {\n    fetch(`data:${formData.file['content-type']};base64,${formData.file.data}`)\n      .then((res) => res.blob())\n      .then((blob) => {\n        dispatch(uploadAliases(blob))\n          .then(() => {\n            updateResults();\n            setUploadError(null);\n            setCSVErrors([]);\n            setUploadModalOpen(false);\n            toast.success(\n              <Toast\n                success\n                title={intl.formatMessage(messages.success)}\n                content={intl.formatMessage(messages.successUpload)}\n              />,\n            );\n          })\n          .catch((error) => {\n            setUploadError(error.response?.body?.message);\n            setCSVErrors(error.response?.body?.csv_errors ?? []);\n          });\n      });\n  };\n\n  return (\n    <div id=\"page-aliases\">\n      <Helmet title={intl.formatMessage(messages.aliases)} />\n      <Container>\n        <article id=\"content\">\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"URL Management\"\n                defaultMessage=\"URL Management\"\n                values={{ title: <q>{title}</q> }}\n              />\n            </Segment>\n            <Segment>\n              <Button\n                primary\n                id=\"add-alt-url\"\n                onClick={() => setAddModalOpen(true)}\n              >\n                {intl.formatMessage(messages.AddUrl)}&hellip;\n              </Button>\n              {addModalOpen && (\n                <ModalForm\n                  open={true}\n                  onSubmit={handleAdd}\n                  onCancel={() => setAddModalOpen(false)}\n                  title={\n                    editingData\n                      ? intl.formatMessage(messages.EditUrl)\n                      : intl.formatMessage(messages.AddUrl)\n                  }\n                  submitError={addError}\n                  schema={{\n                    fieldsets: [\n                      {\n                        id: 'default',\n                        fields: ['altUrlPath', 'targetUrlPath'],\n                      },\n                    ],\n                    properties: {\n                      altUrlPath: {\n                        title: intl.formatMessage(messages.altUrlPathTitle),\n                        description: (\n                          <FormattedMessage\n                            id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring.\"\n                            defaultMessage=\"Enter the absolute path where the alternative URL should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring.\"\n                          />\n                        ),\n                        placeholder: intl.formatMessage(messages.examplePath),\n                      },\n                      targetUrlPath: {\n                        title: intl.formatMessage(messages.targetUrlPathTitle),\n                        description: (\n                          <FormattedMessage\n                            id=\"Enter the absolute path of the target. Target must exist or be an existing alternative url path to the target.\"\n                            defaultMessage=\"Enter the absolute path of the target. Target must exist or be an existing alternative URL path to the target.\"\n                          />\n                        ),\n                        placeholder: intl.formatMessage(messages.examplePath),\n                      },\n                    },\n                    required: ['altUrlPath', 'targetUrlPath'],\n                  }}\n                  formData={editingData || {}}\n                />\n              )}\n              {hasBulkUpload && (\n                <>\n                  <Button onClick={() => setUploadModalOpen(true)}>\n                    {intl.formatMessage(messages.BulkUploadAltUrls)}&hellip;\n                  </Button>\n                  {uploadModalOpen && (\n                    <ModalForm\n                      open={true}\n                      onSubmit={handleBulkUpload}\n                      onCancel={() => setUploadModalOpen(false)}\n                      title={intl.formatMessage(messages.BulkUploadAltUrls)}\n                      submitError={uploadError}\n                      description={\n                        <>\n                          <p>\n                            <FormattedMessage\n                              id=\"bulkUploadUrlsHelp\"\n                              defaultMessage=\"Add many alternative URLs at once by uploading a CSV file. The first column should be the path to redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative, starting with a slash (/). An optional third column can contain a date and time. An optional fourth column can contain a boolean to mark as a manual redirect (default true).\"\n                            />\n                          </p>\n                          <p>\n                            <FormattedMessage\n                              id=\"Example\"\n                              defaultMessage=\"Example\"\n                            />\n                            :\n                            <br />\n                            <code>\n                              /old-home-page.asp,/front-page,2019/01/27 10:42:59\n                              GMT+1,true\n                              <br />\n                              /people/JoeT,/Users/joe-thurston,2018-12-31,false\n                            </code>\n                          </p>\n                          {csvErrors.length ? (\n                            <div\n                              className=\"ui error message\"\n                              style={{ 'overflow-x': 'auto' }}\n                            >\n                              <pre>\n                                Errors:{'\\n'}\n                                {csvErrors.map(\n                                  (err) =>\n                                    `${err.line_number}: ${err.line} - ${err.message}\\n`,\n                                )}\n                              </pre>\n                            </div>\n                          ) : null}\n                        </>\n                      }\n                      schema={{\n                        fieldsets: [\n                          {\n                            id: 'default',\n                            fields: ['file'],\n                          },\n                        ],\n                        properties: {\n                          file: {\n                            title: intl.formatMessage(messages.CSVFile),\n                            type: 'object',\n                            factory: 'File Upload',\n                          },\n                        },\n                        required: ['file'],\n                      }}\n                    />\n                  )}\n                </>\n              )}\n            </Segment>\n            <Segment>\n              <Form>\n                <Header size=\"medium\">\n                  <FormattedMessage\n                    id=\"All existing alternative urls for this site\"\n                    defaultMessage=\"Existing alternative URLs for this site\"\n                  />\n                </Header>\n                <Segment>\n                  <Form.Field>\n                    <FormFieldWrapper\n                      id=\"filterQuery\"\n                      title={intl.formatMessage(messages.filterByPrefix)}\n                    >\n                      <Input\n                        name=\"filter\"\n                        placeholder={intl.formatMessage(messages.examplePath)}\n                        value={filterQuery}\n                        onChange={(e) => setFilterQuery(e.target.value)}\n                      />\n                    </FormFieldWrapper>\n                  </Form.Field>\n                  <Form.Field>\n                    <FormFieldWrapper\n                      id=\"filterType\"\n                      title={intl.formatMessage(messages.manualOrAuto)}\n                    >\n                      <Form.Group inline>\n                        {filterChoices.map((o, i) => (\n                          <Form.Field key={i}>\n                            <Radio\n                              label={intl.formatMessage({ id: o.label })}\n                              name=\"radioGroup\"\n                              value={o.value}\n                              checked={filterType === o}\n                              onChange={() => setFilterType(o)}\n                            />\n                          </Form.Field>\n                        ))}\n                      </Form.Group>\n                    </FormFieldWrapper>\n                  </Form.Field>\n                  <Form.Field>\n                    <DatetimeWidget\n                      id=\"created-before-date\"\n                      title={intl.formatMessage(messages.createdBefore)}\n                      dateOnly={true}\n                      value={createdBefore}\n                      onChange={(id, value) => {\n                        setCreatedBefore(value);\n                      }}\n                    />\n                  </Form.Field>\n                  {hasAdvancedFiltering && (\n                    <Form.Field>\n                      <DatetimeWidget\n                        id=\"created-after-date\"\n                        title={intl.formatMessage(messages.createdAfter)}\n                        dateOnly={true}\n                        value={createdAfter}\n                        onChange={(id, value) => {\n                          setCreatedAfter(value);\n                        }}\n                      />\n                    </Form.Field>\n                  )}\n                  <Button onClick={() => updateResults()} primary>\n                    <FormattedMessage id=\"Filter\" defaultMessage=\"Filter\" />\n                  </Button>\n                </Segment>\n              </Form>\n            </Segment>\n            <Segment>\n              <Header size=\"small\">\n                <FormattedMessage\n                  id=\"Alternative url path → target url path (date and time of creation, manually created yes/no)\"\n                  defaultMessage=\"Alternative URL path → target URL path (date and time of creation, manually created yes/no)\"\n                />\n              </Header>\n\n              <Table celled compact>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width=\"1\">\n                      <FormattedMessage id=\"Select\" defaultMessage=\"Select\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width=\"10\">\n                      <FormattedMessage id=\"Alias\" defaultMessage=\"Alias\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width=\"1\">\n                      <FormattedMessage id=\"Date\" defaultMessage=\"Date\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width=\"1\">\n                      <FormattedMessage id=\"Manual\" defaultMessage=\"Manual\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {aliases.get.loading && (\n                    <Table.Row>\n                      <Table.Cell colSpan=\"4\">\n                        <Loader active inline=\"centered\" />\n                      </Table.Cell>\n                    </Table.Row>\n                  )}\n                  {aliases.items.length > 0 &&\n                    aliases.items.map((alias, i) => (\n                      <Table.Row key={i} verticalAlign=\"top\">\n                        <Table.Cell>\n                          <Checkbox\n                            onChange={(e, { value }) => handleCheckAlias(value)}\n                            checked={aliasesToRemove.includes(alias.path)}\n                            value={alias.path}\n                          />\n                        </Table.Cell>\n                        <Table.Cell>\n                          {alias.path}\n                          <br />\n                          &nbsp;&nbsp;&rarr; {alias['redirect-to']}{' '}\n                          <Button\n                            basic\n                            style={{ verticalAlign: 'middle' }}\n                            aria-label={intl.formatMessage(messages.EditUrl)}\n                            onClick={() => {\n                              setEditingData({\n                                altUrlPath: alias.path,\n                                targetUrlPath: alias['redirect-to'],\n                              });\n                              setAddModalOpen(true);\n                            }}\n                          >\n                            <Icon name={editingSVG} size=\"18px\" />\n                          </Button>\n                        </Table.Cell>\n                        <Table.Cell>\n                          <FormattedDate date={alias.datetime} />\n                        </Table.Cell>\n                        <Table.Cell>{`${alias.manual}`}</Table.Cell>\n                      </Table.Row>\n                    ))}\n                </Table.Body>\n              </Table>\n              <div\n                style={{\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  alignItems: 'center',\n                  marginBottom: '20px',\n                }}\n              >\n                {pages && (\n                  <Pagination\n                    boundaryRange={0}\n                    activePage={activePage}\n                    ellipsisItem={null}\n                    firstItem={null}\n                    lastItem={null}\n                    siblingRange={1}\n                    totalPages={pages}\n                    onPageChange={(e, { activePage }) =>\n                      setActivePage(activePage)\n                    }\n                  />\n                )}\n                <Menu.Menu\n                  position=\"right\"\n                  style={{ display: 'flex', marginLeft: 'auto' }}\n                >\n                  <Menu.Item style={{ color: 'grey' }}>\n                    <FormattedMessage id=\"Show\" defaultMessage=\"Show\" />:\n                  </Menu.Item>\n                  {map(itemsPerPageChoices, (size) => (\n                    <Menu.Item\n                      style={{\n                        padding: '0 0.4em',\n                        margin: '0em 0.357em',\n                        cursor: 'pointer',\n                      }}\n                      key={size}\n                      value={size}\n                      active={size === itemsPerPage}\n                      onClick={(e, { value }) => {\n                        setItemsPerPage(value);\n                        setActivePage(1);\n                      }}\n                    >\n                      {size}\n                    </Menu.Item>\n                  ))}\n                </Menu.Menu>\n              </div>\n              <Button\n                id=\"remove-alt-urls\"\n                disabled={aliasesToRemove.length === 0}\n                onClick={handleRemoveAliases}\n                primary\n              >\n                <FormattedMessage\n                  id=\"Remove selected\"\n                  defaultMessage=\"Remove selected\"\n                />\n              </Button>\n            </Segment>\n          </Segment.Group>\n        </article>\n      </Container>\n      {isClient &&\n        createPortal(\n          <Toolbar\n            pathname={pathname}\n            hideDefaultViewButtons\n            inner={\n              <Link\n                className=\"item\"\n                to=\"#\"\n                onClick={() => history.push(getParentUrl(pathname))}\n              >\n                <Icon\n                  name={backSVG}\n                  className=\"contents circled\"\n                  size=\"30px\"\n                  title={intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />,\n          document.getElementById('toolbar'),\n        )}\n    </div>\n  );\n};\n\nexport default Aliases;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Add Alternative URL","defaultMessage":"Add Alternative URL"},{"id":"Edit Alternative URL","defaultMessage":"Edit Alternative URL"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"Aliases have been uploaded.","defaultMessage":"Aliases have been uploaded."},{"id":"Aliases have been removed.","defaultMessage":"Aliases have been removed."},{"id":"Filter by prefix","defaultMessage":"Filter by path"},{"id":"Manually or automatically added?","defaultMessage":"Manually or automatically added?"},{"id":"Created after","defaultMessage":"Created after"},{"id":"Created before","defaultMessage":"Created before"},{"id":"Alternative url path (Required)","defaultMessage":"Alternative URL path (Required)"},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative URL path must start with a slash."},{"id":"Target Path (Required)","defaultMessage":"Target Path (Required)"},{"id":"BulkUploadAltUrls","defaultMessage":"Bulk upload CSV"},{"id":"CSVFile","defaultMessage":"CSV file"},{"id":"Both","defaultMessage":"Both"},{"id":"Automatically","defaultMessage":"Automatically"},{"id":"Manually","defaultMessage":"Manually"},{"id":"examplePath","defaultMessage":"/example"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative URL should exist. The path must start with '/'. Only URLs that result in a 404 not found page will result in a redirect occurring."},{"id":"Enter the absolute path of the target. Target must exist or be an existing alternative url path to the target.","defaultMessage":"Enter the absolute path of the target. Target must exist or be an existing alternative URL path to the target."},{"id":"bulkUploadUrlsHelp","defaultMessage":"Add many alternative URLs at once by uploading a CSV file. The first column should be the path to redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative, starting with a slash (/). An optional third column can contain a date and time. An optional fourth column can contain a boolean to mark as a manual redirect (default true)."},{"id":"Example","defaultMessage":"Example"},{"id":"All existing alternative urls for this site","defaultMessage":"Existing alternative URLs for this site"},{"id":"Filter","defaultMessage":"Filter"},{"id":"Alternative url path → target url path (date and time of creation, manually created yes/no)","defaultMessage":"Alternative URL path → target URL path (date and time of creation, manually created yes/no)"},{"id":"Select","defaultMessage":"Select"},{"id":"Alias","defaultMessage":"Alias"},{"id":"Date","defaultMessage":"Date"},{"id":"Manual","defaultMessage":"Manual"},{"id":"Show","defaultMessage":"Show"},{"id":"Remove selected","defaultMessage":"Remove selected"}]}},"sourceType":"module","externalDependencies":[]}