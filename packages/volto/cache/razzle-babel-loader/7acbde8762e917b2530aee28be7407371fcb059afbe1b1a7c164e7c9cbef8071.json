{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/PasswordReset/PasswordReset.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { setInitialPassword } from '@plone/volto/actions/users/users';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Set your password\",\n    \"defaultMessage\": \"Set your password\"\n  },\n  description: {\n    \"id\": \"Please fill out the form below to set your password.\",\n    \"defaultMessage\": \"Please fill out the form below to set your password.\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  usernameTitle: {\n    \"id\": \"My username is\",\n    \"defaultMessage\": \"My user name is\"\n  },\n  emailTitle: {\n    \"id\": \"My email is\",\n    \"defaultMessage\": \"My email is\"\n  },\n  usernameDescription: {\n    \"id\": \"Enter your username for verification.\",\n    \"defaultMessage\": \"Enter your username for verification.\"\n  },\n  emailDescription: {\n    \"id\": \"Enter your email for verification.\",\n    \"defaultMessage\": \"Enter your email for verification.\"\n  },\n  passwordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  passwordDescription: {\n    \"id\": \"Enter your new password. Minimum 8 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 8 characters.\"\n  },\n  passwordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  passwordsDoNotMatch: {\n    \"id\": \"Passwords do not match.\",\n    \"defaultMessage\": \"Passwords do not match.\"\n  },\n  mailDoNotMatch: {\n    \"id\": \"E-mail addresses do not match.\",\n    \"defaultMessage\": \"E-mail addresses do not match.\"\n  },\n  passwordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  setMyPassword: {\n    \"id\": \"Set my password\",\n    \"defaultMessage\": \"Set my password\"\n  },\n  successRedirectToLoginTitle: {\n    \"id\": \"Account activation completed\",\n    \"defaultMessage\": \"Account activation completed\"\n  },\n  successRedirectToLoginBody: {\n    \"id\": \"Your password has been set successfully. You may now {link} with your new password.\",\n    \"defaultMessage\": \"Your password has been set successfully. You may now {link} with your new password.\"\n  },\n  passwordReset: {\n    \"id\": \"Password reset\",\n    \"defaultMessage\": \"Password reset\"\n  }\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nclass PasswordReset extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false\n    };\n    this.identifierField = config.settings.useEmailAsLogin ? 'email' : 'username';\n    this.identifierTitle = this.identifierField === 'email' ? this.props.intl.formatMessage(messages.emailTitle) : this.props.intl.formatMessage(messages.usernameTitle);\n    this.identifierDescription = this.identifierField === 'email' ? this.props.intl.formatMessage(messages.emailDescription) : this.props.intl.formatMessage(messages.usernameDescription);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({\n        isSuccessful: true\n      });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(data[this.identifierField], this.props.token, data.password);\n      this.setState({\n        error: null\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch)\n        }\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }\n      }, __jsx(\"h1\", {\n        className: \"documentFirstHeading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Account activation completed\",\n        defaultMessage: \"Account activation completed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      })), __jsx(\"p\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Your password has been set successfully. You may now {link} with your new password.\",\n        defaultMessage: \"Your password has been set successfully. You may now {link} with your new password.\",\n        values: {\n          link: __jsx(Link, {\n            to: \"/login\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }\n          }, this.props.intl.formatMessage({\n            id: 'Log In'\n          }))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      })));\n    }\n    if (this.props.token) {\n      const errmsg = this.props.error ? this.props.error.response.body.error : null;\n      return __jsx(\"div\", {\n        id: \"page-password-reset\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.passwordReset),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        title: this.props.intl.formatMessage(messages.title),\n        description: this.props.intl.formatMessage(messages.description),\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        error: this.state.error || errmsg,\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages.default),\n            fields: [this.identifierField, 'password', 'passwordRepeat']\n          }],\n          properties: {\n            [this.identifierField]: {\n              type: 'string',\n              title: this.identifierTitle,\n              description: this.identifierDescription\n            },\n            password: {\n              description: this.props.intl.formatMessage(messages.passwordDescription),\n              title: this.props.intl.formatMessage(messages.passwordTitle),\n              type: 'string',\n              widget: 'password'\n            },\n            passwordRepeat: {\n              description: this.props.intl.formatMessage(messages.passwordRepeatDescription),\n              title: this.props.intl.formatMessage(messages.passwordRepeatTitle),\n              type: 'string',\n              widget: 'password'\n            }\n          },\n          submitLabel: this.props.intl.formatMessage(messages.setMyPassword),\n          required: [this.identifierField, 'password', 'passwordRepeat']\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      })));\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 12\n      }\n    });\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(PasswordReset, \"propTypes\", {\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  token: PropTypes.string.isRequired,\n  setInitialPassword: PropTypes.func.isRequired\n});\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(PasswordReset, \"defaultProps\", {\n  error: null\n});\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  loading: state.users.initial.loading,\n  loaded: state.users.initial.loaded,\n  error: state.users.initial.error,\n  token: props.match.params.token\n}), {\n  setInitialPassword\n}))(PasswordReset);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","withRouter","Helmet","Container","FormattedMessage","defineMessages","injectIntl","Form","setInitialPassword","config","messages","title","description","default","usernameTitle","emailTitle","usernameDescription","emailDescription","passwordTitle","passwordDescription","passwordRepeatTitle","passwordsDoNotMatch","mailDoNotMatch","passwordRepeatDescription","setMyPassword","successRedirectToLoginTitle","successRedirectToLoginBody","passwordReset","PasswordReset","constructor","props","onCancel","bind","onSubmit","state","error","isSuccessful","identifierField","settings","useEmailAsLogin","identifierTitle","intl","formatMessage","identifierDescription","UNSAFE_componentWillReceiveProps","nextProps","loading","loaded","setState","data","password","passwordRepeat","token","message","history","goBack","render","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","id","defaultMessage","values","link","to","errmsg","response","body","schema","fieldsets","fields","properties","type","widget","submitLabel","required","_defineProperty","bool","isRequired","string","func","users","initial","match","params"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/PasswordReset/PasswordReset.jsx"],"sourcesContent":["/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { setInitialPassword } from '@plone/volto/actions/users/users';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Set your password',\n    defaultMessage: 'Set your password',\n  },\n  description: {\n    id: 'Please fill out the form below to set your password.',\n    defaultMessage: 'Please fill out the form below to set your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  usernameTitle: {\n    id: 'My username is',\n    defaultMessage: 'My user name is',\n  },\n  emailTitle: {\n    id: 'My email is',\n    defaultMessage: 'My email is',\n  },\n  usernameDescription: {\n    id: 'Enter your username for verification.',\n    defaultMessage: 'Enter your username for verification.',\n  },\n  emailDescription: {\n    id: 'Enter your email for verification.',\n    defaultMessage: 'Enter your email for verification.',\n  },\n  passwordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  passwordDescription: {\n    id: 'Enter your new password. Minimum 8 characters.',\n    defaultMessage: 'Enter your new password. Minimum 8 characters.',\n  },\n  passwordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  passwordsDoNotMatch: {\n    id: 'Passwords do not match.',\n    defaultMessage: 'Passwords do not match.',\n  },\n  mailDoNotMatch: {\n    id: 'E-mail addresses do not match.',\n    defaultMessage: 'E-mail addresses do not match.',\n  },\n  passwordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  setMyPassword: {\n    id: 'Set my password',\n    defaultMessage: 'Set my password',\n  },\n  successRedirectToLoginTitle: {\n    id: 'Account activation completed',\n    defaultMessage: 'Account activation completed',\n  },\n  successRedirectToLoginBody: {\n    id: 'Your password has been set successfully. You may now {link} with your new password.',\n    defaultMessage:\n      'Your password has been set successfully. You may now {link} with your new password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nclass PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    token: PropTypes.string.isRequired,\n    setInitialPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n\n    this.identifierField = config.settings.useEmailAsLogin\n      ? 'email'\n      : 'username';\n\n    this.identifierTitle =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailTitle)\n        : this.props.intl.formatMessage(messages.usernameTitle);\n\n    this.identifierDescription =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailDescription)\n        : this.props.intl.formatMessage(messages.usernameDescription);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(\n        data[this.identifierField],\n        this.props.token,\n        data.password,\n      );\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"Account activation completed\"\n              defaultMessage=\"Account activation completed\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"Your password has been set successfully. You may now {link} with your new password.\"\n              defaultMessage=\"Your password has been set successfully. You may now {link} with your new password.\"\n              values={{\n                link: (\n                  <Link to=\"/login\">\n                    {this.props.intl.formatMessage({ id: 'Log In' })}\n                  </Link>\n                ),\n              }}\n            />\n          </p>\n        </Container>\n      );\n    }\n    if (this.props.token) {\n      const errmsg = this.props.error\n        ? this.props.error.response.body.error\n        : null;\n      return (\n        <div id=\"page-password-reset\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.passwordReset)}\n          />\n          <Container>\n            <Form\n              title={this.props.intl.formatMessage(messages.title)}\n              description={this.props.intl.formatMessage(messages.description)}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              error={this.state.error || errmsg}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: this.props.intl.formatMessage(messages.default),\n                    fields: [\n                      this.identifierField,\n                      'password',\n                      'passwordRepeat',\n                    ],\n                  },\n                ],\n                properties: {\n                  [this.identifierField]: {\n                    type: 'string',\n                    title: this.identifierTitle,\n                    description: this.identifierDescription,\n                  },\n                  password: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                  passwordRepeat: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordRepeatDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordRepeatTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                },\n                submitLabel: this.props.intl.formatMessage(\n                  messages.setMyPassword,\n                ),\n                required: [this.identifierField, 'password', 'passwordRepeat'],\n              }}\n            />\n          </Container>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      loading: state.users.initial.loading,\n      loaded: state.users.initial.loaded,\n      error: state.users.initial.error,\n      token: props.match.params.token,\n    }),\n    { setInitialPassword },\n  ),\n)(PasswordReset);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Set your password","defaultMessage":"Set your password"},{"id":"Please fill out the form below to set your password.","defaultMessage":"Please fill out the form below to set your password."},{"id":"Default","defaultMessage":"Default"},{"id":"My username is","defaultMessage":"My user name is"},{"id":"My email is","defaultMessage":"My email is"},{"id":"Enter your username for verification.","defaultMessage":"Enter your username for verification."},{"id":"Enter your email for verification.","defaultMessage":"Enter your email for verification."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 8 characters.","defaultMessage":"Enter your new password. Minimum 8 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Passwords do not match.","defaultMessage":"Passwords do not match."},{"id":"E-mail addresses do not match.","defaultMessage":"E-mail addresses do not match."},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Set my password","defaultMessage":"Set my password"},{"id":"Account activation completed","defaultMessage":"Account activation completed"},{"id":"Your password has been set successfully. You may now {link} with your new password.","defaultMessage":"Your password has been set successfully. You may now {link} with your new password."},{"id":"Password reset","defaultMessage":"Password reset"}]}},"sourceType":"module","externalDependencies":[]}