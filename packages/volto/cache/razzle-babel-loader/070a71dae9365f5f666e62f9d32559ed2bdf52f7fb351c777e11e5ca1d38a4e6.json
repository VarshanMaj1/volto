{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Navigation/Navigation.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Menu } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { hasApiExpander } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nimport { getNavigation } from '@plone/volto/actions/navigation/navigation';\nimport { CSSTransition } from 'react-transition-group';\nimport NavItems from '@plone/volto/components/theme/Navigation/NavItems';\nconst messages = defineMessages({\n  closeMobileMenu: {\n    \"id\": \"Close menu\",\n    \"defaultMessage\": \"Close menu\"\n  },\n  openMobileMenu: {\n    \"id\": \"Open menu\",\n    \"defaultMessage\": \"Open menu\"\n  }\n});\nconst Navigation = props => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    pathname,\n    type\n  } = props;\n  const {\n    0: isMobileMenuOpen,\n    1: setisMobileMenuOpen\n  } = useState(false);\n  const token = useSelector(state => state.userSession.token, shallowEqual);\n  const items = useSelector(state => state.navigation.items, shallowEqual);\n  const lang = useSelector(state => state.intl.locale);\n  useEffect(() => {\n    const {\n      settings\n    } = config;\n    if (!hasApiExpander('navigation', getBaseUrl(pathname))) {\n      dispatch(getNavigation(getBaseUrl(pathname), settings.navDepth));\n    }\n  }, [pathname, token, dispatch]);\n  const toggleMobileMenu = () => {\n    setisMobileMenuOpen(!isMobileMenuOpen);\n  };\n  const closeMobileMenu = () => {\n    if (!isMobileMenuOpen) {\n      return;\n    }\n    setisMobileMenuOpen(false);\n  };\n  return __jsx(\"nav\", {\n    className: \"navigation\",\n    id: \"navigation\",\n    \"aria-label\": \"Site\",\n    tabIndex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, items !== null && items !== void 0 && items.length ? __jsx(\"div\", {\n    className: \"hamburger-wrapper mobile tablet only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: cx('hamburger hamburger--spin', {\n      'is-active': isMobileMenuOpen\n    }),\n    \"aria-label\": isMobileMenuOpen ? intl.formatMessage(messages.closeMobileMenu, {\n      type: type\n    }) : intl.formatMessage(messages.openMobileMenu, {\n      type: type\n    }),\n    title: isMobileMenuOpen ? intl.formatMessage(messages.closeMobileMenu, {\n      type: type\n    }) : intl.formatMessage(messages.openMobileMenu, {\n      type: type\n    }),\n    type: \"button\",\n    onClick: toggleMobileMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"hamburger-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    className: \"hamburger-inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  })))) : null, __jsx(Menu, {\n    stackable: true,\n    pointing: true,\n    secondary: true,\n    className: \"computer large screen widescreen only\",\n    onClick: closeMobileMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(NavItems, {\n    items: items,\n    lang: lang,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), __jsx(CSSTransition, {\n    in: isMobileMenuOpen,\n    timeout: 500,\n    classNames: \"mobile-menu\",\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    key: \"mobile-menu-key\",\n    className: \"mobile-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(BodyClass, {\n    className: \"has-mobile-menu-open\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"mobile-menu-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, __jsx(Menu, {\n    stackable: true,\n    pointing: true,\n    secondary: true,\n    onClick: closeMobileMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, __jsx(NavItems, {\n    items: items,\n    lang: lang,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }))))));\n};\nNavigation.propTypes = {\n  pathname: PropTypes.string.isRequired\n};\nexport default Navigation;","map":{"version":3,"names":["useEffect","useState","PropTypes","useDispatch","useSelector","shallowEqual","defineMessages","useIntl","Menu","cx","BodyClass","getBaseUrl","hasApiExpander","config","getNavigation","CSSTransition","NavItems","messages","closeMobileMenu","openMobileMenu","Navigation","props","intl","dispatch","pathname","type","isMobileMenuOpen","setisMobileMenuOpen","token","state","userSession","items","navigation","lang","locale","settings","navDepth","toggleMobileMenu","__jsx","className","id","tabIndex","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","formatMessage","title","onClick","stackable","pointing","secondary","in","timeout","classNames","unmountOnExit","key","propTypes","string","isRequired"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Navigation/Navigation.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Menu } from 'semantic-ui-react';\n\nimport cx from 'classnames';\nimport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport { hasApiExpander } from '@plone/volto/helpers/Utils/Utils';\nimport config from '@plone/volto/registry';\nimport { getNavigation } from '@plone/volto/actions/navigation/navigation';\nimport { CSSTransition } from 'react-transition-group';\nimport NavItems from '@plone/volto/components/theme/Navigation/NavItems';\n\nconst messages = defineMessages({\n  closeMobileMenu: {\n    id: 'Close menu',\n    defaultMessage: 'Close menu',\n  },\n  openMobileMenu: {\n    id: 'Open menu',\n    defaultMessage: 'Open menu',\n  },\n});\n\nconst Navigation = (props) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { pathname, type } = props;\n  const [isMobileMenuOpen, setisMobileMenuOpen] = useState(false);\n  const token = useSelector((state) => state.userSession.token, shallowEqual);\n  const items = useSelector((state) => state.navigation.items, shallowEqual);\n  const lang = useSelector((state) => state.intl.locale);\n\n  useEffect(() => {\n    const { settings } = config;\n    if (!hasApiExpander('navigation', getBaseUrl(pathname))) {\n      dispatch(getNavigation(getBaseUrl(pathname), settings.navDepth));\n    }\n  }, [pathname, token, dispatch]);\n\n  const toggleMobileMenu = () => {\n    setisMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    if (!isMobileMenuOpen) {\n      return;\n    }\n    setisMobileMenuOpen(false);\n  };\n  return (\n    <nav className=\"navigation\" id=\"navigation\" aria-label=\"Site\" tabIndex=\"-1\">\n      {items?.length ? (\n        <div className=\"hamburger-wrapper mobile tablet only\">\n          <button\n            className={cx('hamburger hamburger--spin', {\n              'is-active': isMobileMenuOpen,\n            })}\n            aria-label={\n              isMobileMenuOpen\n                ? intl.formatMessage(messages.closeMobileMenu, {\n                    type: type,\n                  })\n                : intl.formatMessage(messages.openMobileMenu, {\n                    type: type,\n                  })\n            }\n            title={\n              isMobileMenuOpen\n                ? intl.formatMessage(messages.closeMobileMenu, {\n                    type: type,\n                  })\n                : intl.formatMessage(messages.openMobileMenu, {\n                    type: type,\n                  })\n            }\n            type=\"button\"\n            onClick={toggleMobileMenu}\n          >\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\" />\n            </span>\n          </button>\n        </div>\n      ) : null}\n\n      <Menu\n        stackable\n        pointing\n        secondary\n        className=\"computer large screen widescreen only\"\n        onClick={closeMobileMenu}\n      >\n        <NavItems items={items} lang={lang} />\n      </Menu>\n      <CSSTransition\n        in={isMobileMenuOpen}\n        timeout={500}\n        classNames=\"mobile-menu\"\n        unmountOnExit\n      >\n        <div key=\"mobile-menu-key\" className=\"mobile-menu\">\n          <BodyClass className=\"has-mobile-menu-open\" />\n          <div className=\"mobile-menu-nav\">\n            <Menu stackable pointing secondary onClick={closeMobileMenu}>\n              <NavItems items={items} lang={lang} />\n            </Menu>\n          </div>\n        </div>\n      </CSSTransition>\n    </nav>\n  );\n};\n\nNavigation.propTypes = {\n  pathname: PropTypes.string.isRequired,\n};\n\nexport default Navigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Close menu","defaultMessage":"Close menu"},{"id":"Open menu","defaultMessage":"Open menu"}]}},"sourceType":"module","externalDependencies":[]}