{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"connectDropTarget\", \"connectDragSource\", \"connectDragPreview\"];\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/Field.jsx\";\nvar __jsx = React.createElement;\n/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst MODE_HIDDEN = 'hidden'; //hidden mode. If mode is hidden, field is not rendered\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => config.widgets.default;\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = id => config.widgets.id[id] || null;\n\n/**\n * Get widget by factory attribute\n * @method getWidgetByFactory\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFactory = factory => {\n  var _config$widgets$facto;\n  return ((_config$widgets$facto = config.widgets.factory) === null || _config$widgets$facto === void 0 ? void 0 : _config$widgets$facto[factory]) || null;\n};\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = widget => typeof widget === 'string' ? config.widgets.widget[widget] || getWidgetDefault() : null;\n\n/**\n * Get widget by tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    'fieldname',\n    frontendOptions={\n        \"widget\": 'specialwidget',\n        \"version\": 'extra'\n    })\n\n */\nconst getWidgetFromTaggedValues = widgetOptions => {\n  var _widgetOptions$fronte;\n  return typeof (widgetOptions === null || widgetOptions === void 0 ? void 0 : (_widgetOptions$fronte = widgetOptions.frontendOptions) === null || _widgetOptions$fronte === void 0 ? void 0 : _widgetOptions$fronte.widget) === 'string' ? config.widgets.widget[widgetOptions.frontendOptions.widget] : null;\n};\n\n/**\n * Get widget props from tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    \"fieldname\",\n    frontendOptions={\n        \"widget\": \"specialwidget\",\n        \"widgetProps\": {\"prop1\": \"specialprop\"}\n    })\n\n */\nconst getWidgetPropsFromTaggedValues = widgetOptions => {\n  var _widgetOptions$fronte2;\n  return typeof (widgetOptions === null || widgetOptions === void 0 ? void 0 : (_widgetOptions$fronte2 = widgetOptions.frontendOptions) === null || _widgetOptions$fronte2 === void 0 ? void 0 : _widgetOptions$fronte2.widgetProps) === 'object' ? widgetOptions.frontendOptions.widgetProps : null;\n};\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = vocabulary => vocabulary && vocabulary['@id'] ? config.widgets.vocabulary[vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')] : null;\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabularyFromHint = props => props.widgetOptions && props.widgetOptions.vocabulary ? config.widgets.vocabulary[props.widgetOptions.vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')] : null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = props => {\n  if (props.choices) {\n    return config.widgets.choices;\n  }\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.choices;\n  }\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = type => config.widgets.type[type] || null;\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nconst UnconnectedField = (props, {\n  intl\n}) => {\n  const Widget = getWidgetByFieldId(props.id) || getWidgetFromTaggedValues(props.widgetOptions) || getWidgetByName(props.widget) || getWidgetByChoices(props) || getWidgetByVocabulary(props.vocabulary) || getWidgetByVocabularyFromHint(props) || getWidgetByFactory(props.factory) || getWidgetByType(props.type) || getWidgetDefault();\n  if (props.mode === MODE_HIDDEN) {\n    return null;\n  }\n\n  // Adding the widget props from tagged values (if any)\n  const widgetProps = _objectSpread(_objectSpread({}, props), getWidgetPropsFromTaggedValues(props.widgetOptions));\n  if (props.onOrder) {\n    const {\n      DropTarget,\n      DragSource\n    } = props.reactDnd;\n    const WrappedWidget = DropTarget('field', {\n      hover(properties, monitor) {\n        const dragOrder = monitor.getItem().order;\n        const hoverOrder = properties.order;\n        if (dragOrder === hoverOrder) {\n          return;\n        }\n        properties.onOrder(dragOrder, hoverOrder - dragOrder);\n        monitor.getItem().order = hoverOrder;\n      }\n    }, connect => ({\n      connectDropTarget: connect.dropTarget()\n    }))(DragSource('field', {\n      beginDrag(properties) {\n        return {\n          id: properties.label,\n          order: properties.order\n        };\n      }\n    }, (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      connectDragPreview: connect.dragPreview(),\n      isDragging: monitor.isDragging()\n    }))(_ref => {\n      let {\n          connectDropTarget,\n          connectDragSource,\n          connectDragPreview\n        } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n      return connectDropTarget(connectDragSource(connectDragPreview(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }\n      }, __jsx(Widget, _extends({}, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 19\n        }\n      }))))));\n    }));\n    return __jsx(WrappedWidget, _extends({}, widgetProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 12\n      }\n    }));\n  }\n  return __jsx(Widget, _extends({}, widgetProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 10\n    }\n  }));\n};\n_c = UnconnectedField;\nconst DndConnectedField = injectLazyLibs(['reactDnd'])(UnconnectedField);\n_c2 = DndConnectedField;\nconst Field = props => props.onOrder ? __jsx(DndConnectedField, _extends({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }\n})) : __jsx(UnconnectedField, _extends({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }\n}));\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c3 = Field;\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.shape({\n    '@id': PropTypes.string\n  }),\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  focus: PropTypes.bool,\n  onOrder: PropTypes.func\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  focus: false,\n  onOrder: null\n};\nexport default _c4 = injectIntl(Field);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"UnconnectedField\");\n$RefreshReg$(_c2, \"DndConnectedField\");\n$RefreshReg$(_c3, \"Field\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["React","PropTypes","injectIntl","config","injectLazyLibs","MODE_HIDDEN","getWidgetDefault","widgets","default","getWidgetByFieldId","id","getWidgetByFactory","factory","_config$widgets$facto","getWidgetByName","widget","getWidgetFromTaggedValues","widgetOptions","_widgetOptions$fronte","frontendOptions","getWidgetPropsFromTaggedValues","_widgetOptions$fronte2","widgetProps","getWidgetByVocabulary","vocabulary","replace","getWidgetByVocabularyFromHint","props","getWidgetByChoices","choices","getWidgetByType","type","UnconnectedField","intl","Widget","mode","_objectSpread","onOrder","DropTarget","DragSource","reactDnd","WrappedWidget","hover","properties","monitor","dragOrder","getItem","order","hoverOrder","connect","connectDropTarget","dropTarget","beginDrag","label","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","_ref","rest","_objectWithoutProperties","_excluded","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","_c","DndConnectedField","_c2","Field","_c3","propTypes","string","shape","arrayOf","isRequired","focus","bool","func","defaultProps","_c4","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Form/Field.jsx"],"sourcesContent":["/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst MODE_HIDDEN = 'hidden'; //hidden mode. If mode is hidden, field is not rendered\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => config.widgets.default;\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = (id) => config.widgets.id[id] || null;\n\n/**\n * Get widget by factory attribute\n * @method getWidgetByFactory\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFactory = (factory) =>\n  config.widgets.factory?.[factory] || null;\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = (widget) =>\n  typeof widget === 'string'\n    ? config.widgets.widget[widget] || getWidgetDefault()\n    : null;\n\n/**\n * Get widget by tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    'fieldname',\n    frontendOptions={\n        \"widget\": 'specialwidget',\n        \"version\": 'extra'\n    })\n\n */\nconst getWidgetFromTaggedValues = (widgetOptions) =>\n  typeof widgetOptions?.frontendOptions?.widget === 'string'\n    ? config.widgets.widget[widgetOptions.frontendOptions.widget]\n    : null;\n\n/**\n * Get widget props from tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    \"fieldname\",\n    frontendOptions={\n        \"widget\": \"specialwidget\",\n        \"widgetProps\": {\"prop1\": \"specialprop\"}\n    })\n\n */\nconst getWidgetPropsFromTaggedValues = (widgetOptions) =>\n  typeof widgetOptions?.frontendOptions?.widgetProps === 'object'\n    ? widgetOptions.frontendOptions.widgetProps\n    : null;\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = (vocabulary) =>\n  vocabulary && vocabulary['@id']\n    ? config.widgets.vocabulary[\n        vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')\n      ]\n    : null;\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabularyFromHint = (props) =>\n  props.widgetOptions && props.widgetOptions.vocabulary\n    ? config.widgets.vocabulary[\n        props.widgetOptions.vocabulary['@id'].replace(\n          /^.*\\/@vocabularies\\//,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = (props) => {\n  if (props.choices) {\n    return config.widgets.choices;\n  }\n\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.choices;\n  }\n\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = (type) => config.widgets.type[type] || null;\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nconst UnconnectedField = (props, { intl }) => {\n  const Widget =\n    getWidgetByFieldId(props.id) ||\n    getWidgetFromTaggedValues(props.widgetOptions) ||\n    getWidgetByName(props.widget) ||\n    getWidgetByChoices(props) ||\n    getWidgetByVocabulary(props.vocabulary) ||\n    getWidgetByVocabularyFromHint(props) ||\n    getWidgetByFactory(props.factory) ||\n    getWidgetByType(props.type) ||\n    getWidgetDefault();\n\n  if (props.mode === MODE_HIDDEN) {\n    return null;\n  }\n\n  // Adding the widget props from tagged values (if any)\n  const widgetProps = {\n    ...props,\n    ...getWidgetPropsFromTaggedValues(props.widgetOptions),\n  };\n\n  if (props.onOrder) {\n    const { DropTarget, DragSource } = props.reactDnd;\n    const WrappedWidget = DropTarget(\n      'field',\n      {\n        hover(properties, monitor) {\n          const dragOrder = monitor.getItem().order;\n          const hoverOrder = properties.order;\n\n          if (dragOrder === hoverOrder) {\n            return;\n          }\n          properties.onOrder(dragOrder, hoverOrder - dragOrder);\n\n          monitor.getItem().order = hoverOrder;\n        },\n      },\n      (connect) => ({\n        connectDropTarget: connect.dropTarget(),\n      }),\n    )(\n      DragSource(\n        'field',\n        {\n          beginDrag(properties) {\n            return {\n              id: properties.label,\n              order: properties.order,\n            };\n          },\n        },\n        (connect, monitor) => ({\n          connectDragSource: connect.dragSource(),\n          connectDragPreview: connect.dragPreview(),\n          isDragging: monitor.isDragging(),\n        }),\n      )(\n        ({\n          connectDropTarget,\n          connectDragSource,\n          connectDragPreview,\n          ...rest\n        }) =>\n          connectDropTarget(\n            connectDragSource(\n              connectDragPreview(\n                <div>\n                  <Widget {...rest} />\n                </div>,\n              ),\n            ),\n          ),\n      ),\n    );\n    return <WrappedWidget {...widgetProps} />;\n  }\n  return <Widget {...widgetProps} />;\n};\n\nconst DndConnectedField = injectLazyLibs(['reactDnd'])(UnconnectedField);\n\nconst Field = (props) =>\n  props.onOrder ? (\n    <DndConnectedField {...props} />\n  ) : (\n    <UnconnectedField {...props} />\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.shape({ '@id': PropTypes.string }),\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  focus: PropTypes.bool,\n  onOrder: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  focus: false,\n  onOrder: null,\n};\n\nexport default injectIntl(Field);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}