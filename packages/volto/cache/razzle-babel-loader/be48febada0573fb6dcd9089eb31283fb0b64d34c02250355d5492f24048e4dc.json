{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nimport config from '@plone/volto/registry';\nconst DEBUG = false;\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nexport const DetachedTextBlockEditor = props => {\n  _s();\n  var _data$instructions;\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription\n  } = props;\n  const {\n    value\n  } = data;\n  const intl = useIntl();\n  const {\n    textblockExtensions\n  } = config.settings.slate;\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  const withBlockProperties = React.useCallback(editor => {\n    editor.getBlockProps = () => props;\n    return editor;\n  }, [props]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner detached-slate-editor\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(SlateEditor, {\n    index: index,\n    readOnly: !inView,\n    properties: properties,\n    extensions: textblockExtensions,\n    renderExtensions: [withBlockProperties],\n    value: value,\n    block: block /* is this needed? */,\n    debug: DEBUG,\n    slateSettings: props.slateSettings,\n    onFocus: () => {\n      if (!selected) {\n        onSelectBlock(block);\n      }\n    },\n    onChange: (value, selection, editor) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n    },\n    selected: selected,\n    placeholder: placeholder,\n    onKeyDown: handleKeyDetached,\n    editableProps: {\n      'aria-multiline': 'true'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n_s(DetachedTextBlockEditor, \"E2SdNvqp3eEf74smlLdszzKv89Y=\", false, function () {\n  return [useIntl, useInView];\n});\n_c = DetachedTextBlockEditor;\nexport default DetachedTextBlockEditor;\nvar _c;\n$RefreshReg$(_c, \"DetachedTextBlockEditor\");","map":{"version":3,"names":["React","defineMessages","useIntl","useInView","SlateEditor","serializeNodesToText","handleKeyDetached","config","DEBUG","messages","text","DetachedTextBlockEditor","props","_s","_data$instructions","data","index","properties","onSelectBlock","onChangeBlock","block","selected","formTitle","formDescription","value","intl","textblockExtensions","settings","slate","placeholder","formatMessage","instructions","ref","inView","threshold","rootMargin","withBlockProperties","useCallback","editor","getBlockProps","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","readOnly","extensions","renderExtensions","debug","slateSettings","onFocus","onChange","selection","_objectSpread","plaintext","onKeyDown","editableProps","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nimport config from '@plone/volto/registry';\n\nconst DEBUG = false;\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nexport const DetachedTextBlockEditor = (props) => {\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription,\n  } = props;\n  const { value } = data;\n\n  const intl = useIntl();\n  const { textblockExtensions } = config.settings.slate;\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  return (\n    <div className=\"text-slate-editor-inner detached-slate-editor\" ref={ref}>\n      <SlateEditor\n        index={index}\n        readOnly={!inView}\n        properties={properties}\n        extensions={textblockExtensions}\n        renderExtensions={[withBlockProperties]}\n        value={value}\n        block={block /* is this needed? */}\n        debug={DEBUG}\n        slateSettings={props.slateSettings}\n        onFocus={() => {\n          if (!selected) {\n            onSelectBlock(block);\n          }\n        }}\n        onChange={(value, selection, editor) => {\n          onChangeBlock(block, {\n            ...data,\n            value,\n            plaintext: serializeNodesToText(value || []),\n            // TODO: also add html serialized value\n          });\n        }}\n        selected={selected}\n        placeholder={placeholder}\n        onKeyDown={handleKeyDetached}\n        editableProps={{ 'aria-multiline': 'true' }}\n      />\n    </div>\n  );\n};\n\nexport default DetachedTextBlockEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}