{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Register/Register.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { createUser } from '@plone/volto/actions/users/users';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Registration form\",\n    \"defaultMessage\": \"Registration form\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  fullnameTitle: {\n    \"id\": \"Full Name\",\n    \"defaultMessage\": \"Full Name\"\n  },\n  fullnameDescription: {\n    \"id\": \"Enter full name, e.g. John Smith.\",\n    \"defaultMessage\": \"Enter full name, e.g. John Smith.\"\n  },\n  emailTitle: {\n    \"id\": \"E-mail\",\n    \"defaultMessage\": \"E-mail\"\n  },\n  emailDescription: {\n    \"id\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\",\n    \"defaultMessage\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\"\n  },\n  successRegisterCompletedTitle: {\n    \"id\": \"Account Registration Completed\",\n    \"defaultMessage\": \"Account Registration Completed\"\n  },\n  successRegisterCompletedBody: {\n    \"id\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\",\n    \"defaultMessage\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\"\n  },\n  register: {\n    \"id\": \"Register\",\n    \"defaultMessage\": \"Register\"\n  }\n});\nconst useUsers = () => {\n  const error = useSelector(state => state.users.create.error);\n  const loading = useSelector(state => state.users.create.loading);\n  const loaded = useSelector(state => state.users.create.loaded);\n  return {\n    error,\n    loaded,\n    loading\n  };\n};\nconst Register = () => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const history = useHistory();\n  const {\n    0: errors,\n    1: setError\n  } = useState(null);\n  const {\n    loaded,\n    loading,\n    error\n  } = useUsers();\n  const prevloading = usePrevious(loading);\n  useEffect(() => {\n    if (prevloading && loaded) {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.successRegisterCompletedTitle),\n        content: intl.formatMessage(messages.successRegisterCompletedBody),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }));\n      history.push('/login');\n    }\n  }, [intl, history, loaded, prevloading]);\n  const onSubmit = data => {\n    const {\n      fullname,\n      email\n    } = data;\n    dispatch(createUser({\n      fullname: fullname,\n      email: email,\n      sendPasswordReset: true\n    }));\n    setError(null);\n  };\n  return __jsx(\"div\", {\n    id: \"page-register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.register),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), __jsx(Form, {\n    onSubmit: onSubmit,\n    title: intl.formatMessage(messages.title),\n    error: errors || error,\n    loading: loading,\n    submitLabel: intl.formatMessage(messages.register),\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['fullname', 'email']\n      }],\n      properties: {\n        fullname: {\n          type: 'string',\n          title: intl.formatMessage(messages.fullnameTitle),\n          description: intl.formatMessage(messages.fullnameDescription)\n        },\n        email: {\n          type: 'string',\n          title: intl.formatMessage(messages.emailTitle),\n          description: intl.formatMessage(messages.emailDescription)\n        }\n      },\n      required: ['fullname', 'email']\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Register;","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","defineMessages","useIntl","useHistory","toast","Helmet","usePrevious","Toast","Form","createUser","messages","title","default","fullnameTitle","fullnameDescription","emailTitle","emailDescription","successRegisterCompletedTitle","successRegisterCompletedBody","register","useUsers","error","state","users","create","loading","loaded","Register","dispatch","intl","history","errors","setError","prevloading","success","__jsx","formatMessage","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","push","onSubmit","data","fullname","email","sendPasswordReset","id","submitLabel","schema","fieldsets","fields","properties","type","description","required"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/Register/Register.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { createUser } from '@plone/volto/actions/users/users';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Registration form',\n    defaultMessage: 'Registration form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id: 'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n    defaultMessage:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n  },\n  successRegisterCompletedTitle: {\n    id: 'Account Registration Completed',\n    defaultMessage: 'Account Registration Completed',\n  },\n  successRegisterCompletedBody: {\n    id: 'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n    defaultMessage:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n  },\n  register: {\n    id: 'Register',\n    defaultMessage: 'Register',\n  },\n});\nconst useUsers = () => {\n  const error = useSelector((state) => state.users.create.error);\n  const loading = useSelector((state) => state.users.create.loading);\n  const loaded = useSelector((state) => state.users.create.loaded);\n\n  return { error, loaded, loading };\n};\nconst Register = () => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const history = useHistory();\n  const [errors, setError] = useState(null);\n  const { loaded, loading, error } = useUsers();\n\n  const prevloading = usePrevious(loading);\n\n  useEffect(() => {\n    if (prevloading && loaded) {\n      toast.success(\n        <Toast\n          success\n          title={intl.formatMessage(messages.successRegisterCompletedTitle)}\n          content={intl.formatMessage(messages.successRegisterCompletedBody)}\n        />,\n      );\n      history.push('/login');\n    }\n  }, [intl, history, loaded, prevloading]);\n\n  const onSubmit = (data) => {\n    const { fullname, email } = data;\n    dispatch(\n      createUser({\n        fullname: fullname,\n        email: email,\n        sendPasswordReset: true,\n      }),\n    );\n    setError(null);\n  };\n\n  return (\n    <div id=\"page-register\">\n      <Helmet title={intl.formatMessage(messages.register)} />\n      <Form\n        onSubmit={onSubmit}\n        title={intl.formatMessage(messages.title)}\n        error={errors || error}\n        loading={loading}\n        submitLabel={intl.formatMessage(messages.register)}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: intl.formatMessage(messages.default),\n              fields: ['fullname', 'email'],\n            },\n          ],\n          properties: {\n            fullname: {\n              type: 'string',\n              title: intl.formatMessage(messages.fullnameTitle),\n              description: intl.formatMessage(messages.fullnameDescription),\n            },\n            email: {\n              type: 'string',\n              title: intl.formatMessage(messages.emailTitle),\n              description: intl.formatMessage(messages.emailDescription),\n            },\n          },\n          required: ['fullname', 'email'],\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Registration form","defaultMessage":"Registration form"},{"id":"Default","defaultMessage":"Default"},{"id":"Full Name","defaultMessage":"Full Name"},{"id":"Enter full name, e.g. John Smith.","defaultMessage":"Enter full name, e.g. John Smith."},{"id":"E-mail","defaultMessage":"E-mail"},{"id":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.","defaultMessage":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere."},{"id":"Account Registration Completed","defaultMessage":"Account Registration Completed"},{"id":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.","defaultMessage":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account."},{"id":"Register","defaultMessage":"Register"}]}},"sourceType":"module","externalDependencies":[]}