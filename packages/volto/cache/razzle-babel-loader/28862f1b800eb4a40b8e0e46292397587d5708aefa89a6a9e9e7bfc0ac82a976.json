{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Messages reducer.\n * @module reducers/messages/messages\n */\nimport map from 'lodash/map';\nimport concat from 'lodash/concat';\nimport filter from 'lodash/filter';\nimport { ADD_MESSAGE, REMOVE_MESSAGE, PURGE_MESSAGES } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  messages: []\n};\n\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: concat([{\n          id: action.id,\n          title: action.title,\n          body: action.body,\n          level: action.level,\n          show: action.show\n        }], state.messages)\n      };\n    case REMOVE_MESSAGE:\n      return {\n        messages: filter(state.messages, (message, index) => action.index === -1 ? index !== state.messages.length - 1 : index !== action.index)\n      };\n    case PURGE_MESSAGES:\n      return {\n        messages: map(filter(state.messages, message => message.show), message => _objectSpread(_objectSpread({}, message), {}, {\n          show: false\n        }))\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["map","concat","filter","ADD_MESSAGE","REMOVE_MESSAGE","PURGE_MESSAGES","initialState","messages","state","action","type","id","title","body","level","show","message","index","length","_objectSpread"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/reducers/messages/messages.js"],"sourcesContent":["/**\n * Messages reducer.\n * @module reducers/messages/messages\n */\nimport map from 'lodash/map';\nimport concat from 'lodash/concat';\nimport filter from 'lodash/filter';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  messages: [],\n};\n\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: concat(\n          [\n            {\n              id: action.id,\n              title: action.title,\n              body: action.body,\n              level: action.level,\n              show: action.show,\n            },\n          ],\n          state.messages,\n        ),\n      };\n    case REMOVE_MESSAGE:\n      return {\n        messages: filter(state.messages, (message, index) =>\n          action.index === -1\n            ? index !== state.messages.length - 1\n            : index !== action.index,\n        ),\n      };\n    case PURGE_MESSAGES:\n      return {\n        messages: map(\n          filter(state.messages, (message) => message.show),\n          (message) => ({\n            ...message,\n            show: false,\n          }),\n        ),\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,MAAM,MAAM,eAAe;AAElC,SACEC,WAAW,EACXC,cAAc,EACdC,cAAc,QACT,oCAAoC;AAE3C,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,QAAQA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,GAAG,CAAC,CAAC,EAAE;EAClE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKP,WAAW;MACd,OAAO;QACLI,QAAQ,EAAEN,MAAM,CACd,CACE;UACEU,EAAE,EAAEF,MAAM,CAACE,EAAE;UACbC,KAAK,EAAEH,MAAM,CAACG,KAAK;UACnBC,IAAI,EAAEJ,MAAM,CAACI,IAAI;UACjBC,KAAK,EAAEL,MAAM,CAACK,KAAK;UACnBC,IAAI,EAAEN,MAAM,CAACM;QACf,CAAC,CACF,EACDP,KAAK,CAACD,QACR;MACF,CAAC;IACH,KAAKH,cAAc;MACjB,OAAO;QACLG,QAAQ,EAAEL,MAAM,CAACM,KAAK,CAACD,QAAQ,EAAE,CAACS,OAAO,EAAEC,KAAK,KAC9CR,MAAM,CAACQ,KAAK,KAAK,CAAC,CAAC,GACfA,KAAK,KAAKT,KAAK,CAACD,QAAQ,CAACW,MAAM,GAAG,CAAC,GACnCD,KAAK,KAAKR,MAAM,CAACQ,KACvB;MACF,CAAC;IACH,KAAKZ,cAAc;MACjB,OAAO;QACLE,QAAQ,EAAEP,GAAG,CACXE,MAAM,CAACM,KAAK,CAACD,QAAQ,EAAGS,OAAO,IAAKA,OAAO,CAACD,IAAI,CAAC,EAChDC,OAAO,IAAAG,aAAA,CAAAA,aAAA,KACHH,OAAO;UACVD,IAAI,EAAE;QAAK,EAEf;MACF,CAAC;IACH;MACE,OAAOP,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}