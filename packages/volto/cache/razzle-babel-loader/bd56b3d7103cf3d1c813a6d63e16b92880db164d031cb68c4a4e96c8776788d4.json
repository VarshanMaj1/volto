{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport concat from 'lodash/concat';\nimport filter from 'lodash/filter';\nimport last from 'lodash/last';\nimport map from 'lodash/map';\nimport uniqBy from 'lodash/uniqBy';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions/workflow/workflow';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  stateTitle: {\n    \"id\": \"Change State\",\n    \"defaultMessage\": \"Change State\"\n  },\n  includeChildrenTitle: {\n    \"id\": \"Change workflow state recursively\",\n    \"defaultMessage\": \"Change workflow state recursively\"\n  },\n  stateDescription: {\n    \"id\": \"Select the transition to be used for modifying the items state.\",\n    \"defaultMessage\": \"Select the transition to be used for modifying the items state.\"\n  },\n  loadingMessage: {\n    \"id\": \"Workflow Change Loading Message\",\n    \"defaultMessage\": \"Updating workflow states...\"\n  }\n});\nconst ContentsWorkflowModal = props => {\n  _s();\n  const {\n    onOk,\n    items,\n    open,\n    onCancel\n  } = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const request = useSelector(state => state.workflow.transition);\n  const workflows = useSelector(state => state.workflow.multiple, shallowEqual);\n  const prevrequestloading = usePrevious(request.loading);\n  useEffect(() => {\n    dispatch(getWorkflow(items));\n  }, [dispatch, items]);\n  useEffect(() => {\n    if (prevrequestloading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevrequestloading, request.loaded]);\n  const onSubmit = useCallback(({\n    state,\n    include_children\n  }) => {\n    if (!state) {\n      return;\n    }\n    dispatch(transitionWorkflow(filter(map(concat(...map(workflows, workflow => workflow.transitions)), item => item['@id']), x => last(x.split('/')) === state), include_children));\n  }, [dispatch, workflows]);\n  return open && workflows.length > 0 && __jsx(ModalForm, {\n    open: open,\n    loading: request.loading,\n    loadingMessage: intl.formatMessage(messages.loadingMessage),\n    onSubmit: onSubmit,\n    onCancel: onCancel,\n    title: intl.formatMessage(messages.stateTitle),\n    schema: {\n      fieldsets: [{\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['state', 'include_children']\n      }],\n      properties: {\n        state: {\n          description: intl.formatMessage(messages.stateDescription),\n          title: intl.formatMessage(messages.stateTitle),\n          type: 'string',\n          choices: map(uniqBy(concat(...map(workflows, workflow => workflow.transitions)), x => x.title), y => [last(y['@id'].split('/')), y.title])\n        },\n        include_children: {\n          title: intl.formatMessage(messages.includeChildrenTitle),\n          type: 'boolean'\n        }\n      },\n      required: []\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  });\n};\n_s(ContentsWorkflowModal, \"TKuXgkchlC9nOLQQypIV1/uzjfg=\", false, function () {\n  return [useIntl, useDispatch, useSelector, useSelector, usePrevious];\n});\n_c = ContentsWorkflowModal;\nContentsWorkflowModal.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};\nexport default ContentsWorkflowModal;\nvar _c;\n$RefreshReg$(_c, \"ContentsWorkflowModal\");","map":{"version":3,"names":["React","useCallback","useEffect","PropTypes","shallowEqual","useDispatch","useSelector","concat","filter","last","map","uniqBy","defineMessages","useIntl","usePrevious","getWorkflow","transitionWorkflow","ModalForm","messages","default","stateTitle","includeChildrenTitle","stateDescription","loadingMessage","ContentsWorkflowModal","props","_s","onOk","items","open","onCancel","intl","dispatch","request","state","workflow","transition","workflows","multiple","prevrequestloading","loading","loaded","onSubmit","include_children","transitions","item","x","split","length","__jsx","formatMessage","title","schema","fieldsets","id","fields","properties","description","type","choices","y","required","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","arrayOf","string","isRequired","bool","func","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport concat from 'lodash/concat';\nimport filter from 'lodash/filter';\nimport last from 'lodash/last';\nimport map from 'lodash/map';\nimport uniqBy from 'lodash/uniqBy';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { usePrevious } from '@plone/volto/helpers/Utils/usePrevious';\nimport {\n  getWorkflow,\n  transitionWorkflow,\n} from '@plone/volto/actions/workflow/workflow';\nimport { ModalForm } from '@plone/volto/components/manage/Form';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  includeChildrenTitle: {\n    id: 'Change workflow state recursively',\n    defaultMessage: 'Change workflow state recursively',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n  loadingMessage: {\n    id: 'Workflow Change Loading Message',\n    defaultMessage: 'Updating workflow states...',\n  },\n});\n\nconst ContentsWorkflowModal = (props) => {\n  const { onOk, items, open, onCancel } = props;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const request = useSelector((state) => state.workflow.transition);\n  const workflows = useSelector(\n    (state) => state.workflow.multiple,\n    shallowEqual,\n  );\n  const prevrequestloading = usePrevious(request.loading);\n\n  useEffect(() => {\n    dispatch(getWorkflow(items));\n  }, [dispatch, items]);\n\n  useEffect(() => {\n    if (prevrequestloading && request.loaded) {\n      onOk();\n    }\n  }, [onOk, prevrequestloading, request.loaded]);\n\n  const onSubmit = useCallback(\n    ({ state, include_children }) => {\n      if (!state) {\n        return;\n      }\n      dispatch(\n        transitionWorkflow(\n          filter(\n            map(\n              concat(...map(workflows, (workflow) => workflow.transitions)),\n              (item) => item['@id'],\n            ),\n            (x) => last(x.split('/')) === state,\n          ),\n          include_children,\n        ),\n      );\n    },\n    [dispatch, workflows],\n  );\n\n  return (\n    open &&\n    workflows.length > 0 && (\n      <ModalForm\n        open={open}\n        loading={request.loading}\n        loadingMessage={intl.formatMessage(messages.loadingMessage)}\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        title={intl.formatMessage(messages.stateTitle)}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: intl.formatMessage(messages.default),\n              fields: ['state', 'include_children'],\n            },\n          ],\n          properties: {\n            state: {\n              description: intl.formatMessage(messages.stateDescription),\n              title: intl.formatMessage(messages.stateTitle),\n              type: 'string',\n              choices: map(\n                uniqBy(\n                  concat(...map(workflows, (workflow) => workflow.transitions)),\n                  (x) => x.title,\n                ),\n                (y) => [last(y['@id'].split('/')), y.title],\n              ),\n            },\n            include_children: {\n              title: intl.formatMessage(messages.includeChildrenTitle),\n              type: 'boolean',\n            },\n          },\n          required: [],\n        }}\n      />\n    )\n  );\n};\n\nContentsWorkflowModal.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ContentsWorkflowModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Change State","defaultMessage":"Change State"},{"id":"Change workflow state recursively","defaultMessage":"Change workflow state recursively"},{"id":"Select the transition to be used for modifying the items state.","defaultMessage":"Select the transition to be used for modifying the items state."},{"id":"Workflow Change Loading Message","defaultMessage":"Updating workflow states..."}]}},"sourceType":"module","externalDependencies":[]}