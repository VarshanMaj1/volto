{"ast":null,"code":"import _objectWithoutProperties from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"block\", \"schema\", \"value\", \"onChange\", \"errors\", \"id\"];\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/ObjectWidget.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\nimport { Field } from '@plone/volto/components/manage/Form';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id\n}) => {\n  return data.fields.map((field, idx) => {\n    var _schema$required;\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: `${field}-${idx}-${id}`,\n      fieldSet: data.title.toLowerCase(),\n      block: block,\n      value: value === null || value === void 0 ? void 0 : value[field],\n      objectvalue: value,\n      required: ((_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.indexOf(field)) !== -1,\n      onChange: (field2, fieldvalue) => {\n        return onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n          [field]: fieldvalue\n        }));\n      },\n      key: field,\n      error: errors === null || errors === void 0 ? void 0 : errors[field],\n      title: schema.properties[field].title,\n      onChangeBlock: onChangeBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }));\n  });\n};\n\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\n_c = FieldSet;\nconst ObjectWidget = _ref => {\n  _s();\n  let {\n      block,\n      schema,\n      value,\n      // not checked to not contain unknown fields\n      onChange,\n      errors = {},\n      id\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const createTab = React.useCallback((fieldset, index) => {\n    return {\n      menuItem: fieldset.title,\n      render: () => __jsx(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, __jsx(FieldSet, {\n        block: block,\n        data: fieldset,\n        index: index,\n        schema: schema,\n        errors: errors,\n        value: value,\n        onChange: onChange,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }))\n    };\n  }, [block, errors, id, onChange, schema, value]);\n  return schema.fieldsets.length === 1 ? __jsx(React.Fragment, null, __jsx(FieldSet, {\n    block: block,\n    data: schema.fieldsets[0],\n    index: 0,\n    schema: schema,\n    errors: errors,\n    value: value,\n    onChange: onChange,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  })) : __jsx(Tab, {\n    panes: schema.fieldsets.map(createTab),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }) // lazy loading\n  ;\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(ObjectWidget, \"YwBXciesr8LRaG9DbTEpezhG9yo=\");\n_c2 = ObjectWidget;\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null\n};\nexport default ObjectWidget;\nvar _c, _c2;\n$RefreshReg$(_c, \"FieldSet\");\n$RefreshReg$(_c2, \"ObjectWidget\");","map":{"version":3,"names":["React","PropTypes","Tab","Field","FieldSet","block","data","index","schema","value","errors","onChange","onChangeBlock","id","fields","map","field","idx","_schema$required","__jsx","_extends","properties","fieldSet","title","toLowerCase","objectvalue","required","indexOf","field2","fieldvalue","_objectSpread","key","error","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","ObjectWidget","_ref","_s","props","_objectWithoutProperties","_excluded","createTab","useCallback","fieldset","menuItem","render","Pane","fieldsets","length","Fragment","panes","_c2","propTypes","string","isRequired","object","func","defaultProps","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/ObjectWidget.jsx"],"sourcesContent":["/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\nimport { Field } from '@plone/volto/components/manage/Form';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id,\n}) => {\n  return data.fields.map((field, idx) => {\n    return (\n      <Field\n        {...schema.properties[field]}\n        id={`${field}-${idx}-${id}`}\n        fieldSet={data.title.toLowerCase()}\n        block={block}\n        value={value?.[field]}\n        objectvalue={value}\n        required={schema.required?.indexOf(field) !== -1}\n        onChange={(field2, fieldvalue) => {\n          return onChange(id, { ...value, [field]: fieldvalue });\n        }}\n        key={field}\n        error={errors?.[field]}\n        title={schema.properties[field].title}\n        onChangeBlock={onChangeBlock}\n      />\n    );\n  });\n};\n\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\nconst ObjectWidget = ({\n  block,\n  schema,\n  value, // not checked to not contain unknown fields\n  onChange,\n  errors = {},\n  id,\n  ...props\n}) => {\n  const createTab = React.useCallback(\n    (fieldset, index) => {\n      return {\n        menuItem: fieldset.title,\n        render: () => (\n          <Tab.Pane>\n            <FieldSet\n              block={block}\n              data={fieldset}\n              index={index}\n              schema={schema}\n              errors={errors}\n              value={value}\n              onChange={onChange}\n              id={id}\n            />\n          </Tab.Pane>\n        ),\n      };\n    },\n    [block, errors, id, onChange, schema, value],\n  );\n\n  return schema.fieldsets.length === 1 ? (\n    <>\n      <FieldSet\n        block={block}\n        data={schema.fieldsets[0]}\n        index={0}\n        schema={schema}\n        errors={errors}\n        value={value}\n        onChange={onChange}\n        id={id}\n      />\n    </>\n  ) : (\n    <Tab panes={schema.fieldsets.map(createTab)} /> // lazy loading\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null,\n};\n\nexport default ObjectWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}