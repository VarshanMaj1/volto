{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/SelectWidget.jsx\";\nvar __jsx = React.createElement;\n/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport map from 'lodash/map';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions/vocabularies/vocabularies';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\nimport { customSelectStyles, DropdownIndicator, ClearIndicator, Option, selectTheme, MenuList, MultiValueContainer } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  close: {\n    \"id\": \"Close\",\n    \"defaultMessage\": \"Close\"\n  },\n  choices: {\n    \"id\": \"Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$choices;\n    if ((!this.props.choices || ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) === 0) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  componentDidUpdate(prevProps) {\n    var _this$props$choices2;\n    if (this.props.vocabBaseUrl !== prevProps.vocabBaseUrl && (!this.props.choices || ((_this$props$choices2 = this.props.choices) === null || _this$props$choices2 === void 0 ? void 0 : _this$props$choices2.length) === 0)) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$placehold;\n    const {\n      id,\n      choices,\n      value,\n      intl,\n      onChange\n    } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n    let options = this.props.vocabBaseUrl ? this.props.choices : [...map(choices, option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    })),\n    // Only set \"no-value\" option if there's no default in the field\n    // TODO: also if this.props.defaultValue?\n    ...(this.props.noValueOption && (this.props.default === undefined || this.props.default === null) ? [{\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value'\n    }] : [])];\n    const isMulti = this.props.isMulti ? this.props.isMulti : id === 'roles' || id === 'groups' || this.props.type === 'array';\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }), __jsx(Select, {\n      id: `field-${id}`,\n      key: choices,\n      name: id,\n      \"aria-labelledby\": `fieldset-${this.props.fieldSet}-field-label-${id}`,\n      menuShouldScrollIntoView: false,\n      isDisabled: disabled,\n      isSearchable: true,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      isMulti: isMulti,\n      options: options,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n        MenuList\n      }), {}, {\n        MultiValueContainer,\n        DropdownIndicator,\n        ClearIndicator,\n        Option: this.props.customOptionStyling || Option\n      }),\n      value: normalizedValue,\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: selectedOption => {\n        if (isMulti) {\n          return onChange(id, selectedOption.map(el => el.value));\n        }\n        return onChange(id, selectedOption && selectedOption.value !== 'no-value' ? selectedOption.value : undefined);\n      },\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(SelectWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  getVocabularyTokenTitle: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool, PropTypes.func, PropTypes.array]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  noValueOption: PropTypes.bool,\n  customOptionStyling: PropTypes.any,\n  isMulti: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n/**\n * Default properties\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(SelectWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null,\n  noValueOption: true,\n  customOptionStyling: null\n});\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\n_c = SelectWidgetComponent;\nexport default compose(injectLazyLibs(['reactSelect']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n  const vocabBaseUrl = !props.choices ? getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props) : '';\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if (props.choices) {\n    return {\n      choices: props.choices,\n      lang: state.intl.locale\n    };\n  } else if (vocabState) {\n    var _vocabState$items;\n    return {\n      vocabBaseUrl,\n      choices: (_vocabState$items = vocabState === null || vocabState === void 0 ? void 0 : vocabState.items) !== null && _vocabState$items !== void 0 ? _vocabState$items : [],\n      lang: state.intl.locale\n    };\n    // There is a moment that vocabState is not there yet, so we need to pass the\n    // vocabBaseUrl to the component.\n  } else if (vocabBaseUrl) {\n    return {\n      vocabBaseUrl,\n      lang: state.intl.locale\n    };\n  }\n  return {\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary,\n  getVocabularyTokenTitle\n}))(SelectWidgetComponent);\nvar _c;\n$RefreshReg$(_c, \"SelectWidgetComponent\");","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","map","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","FormFieldWrapper","getVocabulary","getVocabularyTokenTitle","normalizeValue","customSelectStyles","DropdownIndicator","ClearIndicator","Option","selectTheme","MenuList","MultiValueContainer","injectLazyLibs","messages","default","idTitle","idDescription","title","description","close","choices","required","select","no_value","no_options","SelectWidget","componentDidMount","_this$props$choices","props","length","vocabBaseUrl","vocabNameOrURL","size","subrequest","lang","componentDidUpdate","prevProps","_this$props$choices2","render","_this$props$placehold","id","value","intl","onChange","normalizedValue","disabled","isDisabled","Select","reactSelect","options","option","label","noValueOption","undefined","formatMessage","isMulti","type","__jsx","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","name","fieldSet","menuShouldScrollIntoView","isSearchable","className","classNamePrefix","styles","theme","components","_objectSpread","customOptionStyling","placeholder","selectedOption","el","isClearable","_defineProperty","string","isRequired","bool","error","arrayOf","func","oneOfType","object","array","items","shape","vocabulary","widgetOptions","onBlur","onClick","onEdit","onDelete","wrapped","any","SelectWidgetComponent","_c","state","_state$vocabularies","_state$vocabularies$v","_state$vocabularies$v2","vocabState","vocabularies","subrequests","locale","_vocabState$items","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/SelectWidget.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport map from 'lodash/map';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport {\n  getVocabulary,\n  getVocabularyTokenTitle,\n} from '@plone/volto/actions/vocabularies/vocabularies';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\n\nimport {\n  customSelectStyles,\n  DropdownIndicator,\n  ClearIndicator,\n  Option,\n  selectTheme,\n  MenuList,\n  MultiValueContainer,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.array,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n    customOptionStyling: PropTypes.any,\n    isMulti: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n    customOptionStyling: null,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      (!this.props.choices || this.props.choices?.length === 0) &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.vocabBaseUrl !== prevProps.vocabBaseUrl &&\n      (!this.props.choices || this.props.choices?.length === 0)\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, value, intl, onChange } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n\n    let options = this.props.vocabBaseUrl\n      ? this.props.choices\n      : [\n          ...map(choices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption &&\n          (this.props.default === undefined || this.props.default === null)\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : id === 'roles' || id === 'groups' || this.props.type === 'array';\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          key={choices}\n          name={id}\n          aria-labelledby={`fieldset-${this.props.fieldSet}-field-label-${id}`}\n          menuShouldScrollIntoView={false}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={options}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            MultiValueContainer,\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={normalizedValue}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={(selectedOption) => {\n            if (isMulti) {\n              return onChange(\n                id,\n                selectedOption.map((el) => el.value),\n              );\n            }\n            return onChange(\n              id,\n              selectedOption && selectedOption.value !== 'no-value'\n                ? selectedOption.value\n                : undefined,\n            );\n          }}\n          isClearable\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\n\nexport default compose(\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n          lang: state.intl.locale,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          choices: vocabState?.items ?? [],\n          lang: state.intl.locale,\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n          lang: state.intl.locale,\n        };\n      }\n      return { lang: state.intl.locale };\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectWidgetComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Close","defaultMessage":"Close"},{"id":"Choices","defaultMessage":"Choices"},{"id":"Required","defaultMessage":"Required"},{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}