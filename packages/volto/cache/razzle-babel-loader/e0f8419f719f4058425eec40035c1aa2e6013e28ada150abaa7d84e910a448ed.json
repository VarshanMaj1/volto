{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/View/ListingView.jsx\";\nvar __jsx = React.createElement;\n/**\n * Document view component.\n * @module components/theme/View/ListingView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Container as SemanticContainer } from 'semantic-ui-react';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport config from '@plone/volto/registry';\n\n/**\n * List view component class.\n * @function ListingView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ListingView = ({\n  content\n}) => {\n  const Container = config.getComponent({\n    name: 'Container'\n  }).component || SemanticContainer;\n  const PreviewImage = config.getComponent({\n    name: 'PreviewImage'\n  }).component;\n  return __jsx(Container, {\n    id: \"page-home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    id: \"content-core\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, content.items.map(item => __jsx(Segment, {\n    key: item.url,\n    className: \"listing-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, __jsx(UniversalLink, {\n    item: item,\n    title: item['@type'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, item.title)), item.description && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 36\n    }\n  }, item.description)), item.image_field && __jsx(PreviewImage, {\n    item: item,\n    alt: item.image_caption,\n    className: \"ui image\",\n    responsive: true,\n    loading: \"lazy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  })))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = ListingView;\nListingView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      '@id': PropTypes.string,\n      '@type': PropTypes.string,\n      description: PropTypes.string,\n      review_state: PropTypes.string,\n      title: PropTypes.string,\n      url: PropTypes.string\n    }))\n  }).isRequired\n};\nexport default ListingView;\nvar _c;\n$RefreshReg$(_c, \"ListingView\");","map":{"version":3,"names":["React","PropTypes","Segment","Container","SemanticContainer","UniversalLink","config","ListingView","content","getComponent","name","component","PreviewImage","__jsx","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","items","map","item","key","url","className","title","description","image_field","alt","image_caption","responsive","loading","_c","propTypes","shape","string","arrayOf","review_state","isRequired","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/theme/View/ListingView.jsx"],"sourcesContent":["/**\n * Document view component.\n * @module components/theme/View/ListingView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Container as SemanticContainer } from 'semantic-ui-react';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nimport config from '@plone/volto/registry';\n\n/**\n * List view component class.\n * @function ListingView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ListingView = ({ content }) => {\n  const Container =\n    config.getComponent({ name: 'Container' }).component || SemanticContainer;\n  const PreviewImage = config.getComponent({ name: 'PreviewImage' }).component;\n\n  return (\n    <Container id=\"page-home\">\n      <section id=\"content-core\">\n        {content.items.map((item) => (\n          <Segment key={item.url} className=\"listing-item\">\n            <Container>\n              <h2>\n                <UniversalLink item={item} title={item['@type']}>\n                  {item.title}\n                </UniversalLink>\n              </h2>\n              {item.description && <p>{item.description}</p>}\n            </Container>\n            {item.image_field && (\n              <PreviewImage\n                item={item}\n                alt={item.image_caption}\n                className=\"ui image\"\n                responsive={true}\n                loading=\"lazy\"\n              />\n            )}\n          </Segment>\n        ))}\n      </section>\n    </Container>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nListingView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        description: PropTypes.string,\n        review_state: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default ListingView;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}