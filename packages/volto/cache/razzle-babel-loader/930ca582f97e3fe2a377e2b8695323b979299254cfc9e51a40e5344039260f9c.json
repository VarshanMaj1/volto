{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx\";\nvar __jsx = React.createElement;\n/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions/schema/schema';\nimport { getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport nth from 'lodash/nth';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"{id} Schema\",\n    \"defaultMessage\": \"{id} Schema\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  typeCreated: {\n    \"id\": \"Schema updates\",\n    \"defaultMessage\": \"Schema updates\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  }\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"makeSchemaList\", schema => {\n      const result = {\n        title: 'Schema',\n        type: 'object',\n        fieldsets: [{\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default'\n        }],\n        properties: {\n          schema: {\n            description: 'Form schema',\n            title: 'Form schema',\n            type: 'schema',\n            id: 'schema',\n            widget: 'schema'\n          }\n        },\n        required: [],\n        layouts: null\n      };\n      result.layouts = schema.layouts.slice();\n      return result;\n    });\n    _defineProperty(this, \"isEditable\", field => !field.behavior || field.behavior.includes('generated'));\n    _defineProperty(this, \"makeSchemaData\", (schema, contentType) => {\n      const fieldsets = schema.fieldsets.map(fieldset => {\n        const readOnlyFields = fieldset.fields.filter(fieldId => !this.isEditable(schema.properties[fieldId]) && fieldId !== 'changeNote');\n        const userCreatedFields = fieldset.fields.filter(fieldId => this.isEditable(schema.properties[fieldId]));\n        const changeNote = fieldset.fields.filter(fieldId => fieldId === 'changeNote');\n        return _objectSpread(_objectSpread({}, fieldset), {}, {\n          fields: [...readOnlyFields, ...userCreatedFields, ...changeNote]\n        });\n      });\n      const result = _objectSpread(_objectSpread({}, schema), {}, {\n        fieldsets,\n        contentType\n      });\n      return {\n        schema: JSON.stringify(result)\n      };\n    });\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = /*#__PURE__*/React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n      let properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n      this.setState({\n        schema: nextProps.schema,\n        content: content\n      });\n    }\n\n    // Schema updated\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.loaded) {\n      // this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    // Schema update error\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.error) {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: JSON.stringify(nextProps.schemaRequest.put.error.response.body || nextProps.schemaRequest.put.error.response.text),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 14\n        }\n      });\n    }\n    if (this.state.schema) {\n      var _this$props, _this$props$schema;\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n      return __jsx(\"div\", {\n        id: \"page-controlpanel-schema\",\n        className: \"ui container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }\n      }, __jsx(Header, {\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }\n      }, this.props.intl.formatMessage(messages.title, {\n        id: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$schema = _this$props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.title) || this.props.id\n      })), __jsx(Form, {\n        ref: this.form,\n        schema: contentTypeSchema,\n        formData: schemaData,\n        pathname: this.props.pathname,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        hideActions: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }\n      }), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          disabled: this.props.schemaRequest.put.loading,\n          loading: this.props.schemaRequest.put.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 23\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }\n      }), document.getElementById('toolbar')));\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 12\n      }\n    });\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(ContentTypeSchema, \"propTypes\", {\n  getSchema: PropTypes.func.isRequired,\n  putSchema: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n});\n/**\n * Default properties\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(ContentTypeSchema, \"defaultProps\", {});\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  pathname: props.location.pathname,\n  id: nth(props.location.pathname.split('/'), -2)\n}), {\n  getSchema,\n  putSchema\n}))(ContentTypeSchema);","map":{"version":3,"names":["getSchema","putSchema","getParentUrl","nth","Error","Icon","Toast","Toolbar","Form","clearSVG","saveSVG","PropTypes","React","Component","defineMessages","injectIntl","createPortal","connect","toast","compose","Button","Header","messages","title","success","save","cancel","error","typeCreated","info","changesSaved","ContentTypeSchema","constructor","props","_defineProperty","createRef","schema","result","type","fieldsets","fields","id","properties","description","widget","required","layouts","slice","field","behavior","includes","contentType","map","fieldset","readOnlyFields","filter","fieldId","isEditable","userCreatedFields","changeNote","_objectSpread","JSON","stringify","state","content","isClient","onCancel","bind","onSubmit","form","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","schemaRequest","loading","loaded","_nextProps$schema","value","key","default","put","__jsx","intl","formatMessage","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","response","body","text","data","url","pathname","history","push","render","_this$props","_this$props$schema","contentTypeSchema","makeSchemaList","schemaData","makeSchemaData","className","disabled","ref","formData","hideActions","hideDefaultViewButtons","inner","Fragment","onClick","current","name","size","document","getElementById","func","isRequired","string","location","split"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx"],"sourcesContent":["/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions/schema/schema';\nimport { getParentUrl } from '@plone/volto/helpers/Url/Url';\nimport nth from 'lodash/nth';\nimport Error from '@plone/volto/components/theme/Error/Error';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { createPortal } from 'react-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Schema',\n    defaultMessage: '{id} Schema',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  typeCreated: {\n    id: 'Schema updates',\n    defaultMessage: 'Schema updates',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    putSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {};\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.loaded\n    ) {\n      // this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Schema update error\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.error\n    ) {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={JSON.stringify(\n            nextProps.schemaRequest.put.error.response.body ||\n              nextProps.schemaRequest.put.error.response.text,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  form = React.createRef();\n\n  makeSchemaList = (schema) => {\n    const result = {\n      title: 'Schema',\n      type: 'object',\n      fieldsets: [\n        {\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default',\n        },\n      ],\n      properties: {\n        schema: {\n          description: 'Form schema',\n          title: 'Form schema',\n          type: 'schema',\n          id: 'schema',\n          widget: 'schema',\n        },\n      },\n      required: [],\n      layouts: null,\n    };\n    result.layouts = schema.layouts.slice();\n\n    return result;\n  };\n\n  isEditable = (field) =>\n    !field.behavior || field.behavior.includes('generated');\n\n  makeSchemaData = (schema, contentType) => {\n    const fieldsets = schema.fieldsets.map((fieldset) => {\n      const readOnlyFields = fieldset.fields.filter(\n        (fieldId) =>\n          !this.isEditable(schema.properties[fieldId]) &&\n          fieldId !== 'changeNote',\n      );\n      const userCreatedFields = fieldset.fields.filter((fieldId) =>\n        this.isEditable(schema.properties[fieldId]),\n      );\n      const changeNote = fieldset.fields.filter(\n        (fieldId) => fieldId === 'changeNote',\n      );\n      return {\n        ...fieldset,\n        fields: [...readOnlyFields, ...userCreatedFields, ...changeNote],\n      };\n    });\n    const result = {\n      ...schema,\n      fieldsets,\n      contentType,\n    };\n\n    return { schema: JSON.stringify(result) };\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.state.schema) {\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n\n      return (\n        <div id=\"page-controlpanel-schema\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: this.props?.schema?.title || this.props.id,\n            })}\n          </Header>\n          <Form\n            ref={this.form}\n            schema={contentTypeSchema}\n            formData={schemaData}\n            pathname={this.props.pathname}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            hideActions\n          />\n          {this.state.isClient &&\n            createPortal(\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.schemaRequest.put.loading}\n                      loading={this.props.schemaRequest.put.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />,\n              document.getElementById('toolbar'),\n            )}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n    }),\n    {\n      getSchema,\n      putSchema,\n    },\n  ),\n)(ContentTypeSchema);\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,SAAS,QAAQ,oCAAoC;AACzE,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,KAAK,MAAM,2CAA2C;AAC7D,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,KAAK,MAAM,4CAA4C;AAC9D,OAAOC,OAAO,MAAM,gDAAgD;AACpE,SAASC,IAAI,QAAQ,qCAAqC;AAC1D,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,SAASC,YAAY,QAAQ,WAAW;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,MAAM,EAAEC,MAAM,QAAQ,mBAAmB;AAElD,MAAMC,QAAQ,GAAGR,cAAc,CAAC;EAC9BS,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASlB,SAAS,CAAC;EAoBxC;AACF;AACA;AACA;AACA;AACA;EACEmB,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAACC,eAAA,4BA4GRtB,KAAK,CAACuB,SAAS,CAAC,CAAC;IAAAD,eAAA,yBAENE,MAAM,IAAK;MAC3B,MAAMC,MAAM,GAAG;QACbd,KAAK,EAAE,QAAQ;QACfe,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,CACT;UACEC,MAAM,EAAE,CAAC,QAAQ,CAAC;UAClBC,EAAE,EAAE,SAAS;UACblB,KAAK,EAAE;QACT,CAAC,CACF;QACDmB,UAAU,EAAE;UACVN,MAAM,EAAE;YACNO,WAAW,EAAE,aAAa;YAC1BpB,KAAK,EAAE,aAAa;YACpBe,IAAI,EAAE,QAAQ;YACdG,EAAE,EAAE,QAAQ;YACZG,MAAM,EAAE;UACV;QACF,CAAC;QACDC,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAE;MACX,CAAC;MACDT,MAAM,CAACS,OAAO,GAAGV,MAAM,CAACU,OAAO,CAACC,KAAK,CAAC,CAAC;MAEvC,OAAOV,MAAM;IACf,CAAC;IAAAH,eAAA,qBAEac,KAAK,IACjB,CAACA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAAC,WAAW,CAAC;IAAAhB,eAAA,yBAExC,CAACE,MAAM,EAAEe,WAAW,KAAK;MACxC,MAAMZ,SAAS,GAAGH,MAAM,CAACG,SAAS,CAACa,GAAG,CAAEC,QAAQ,IAAK;QACnD,MAAMC,cAAc,GAAGD,QAAQ,CAACb,MAAM,CAACe,MAAM,CAC1CC,OAAO,IACN,CAAC,IAAI,CAACC,UAAU,CAACrB,MAAM,CAACM,UAAU,CAACc,OAAO,CAAC,CAAC,IAC5CA,OAAO,KAAK,YAChB,CAAC;QACD,MAAME,iBAAiB,GAAGL,QAAQ,CAACb,MAAM,CAACe,MAAM,CAAEC,OAAO,IACvD,IAAI,CAACC,UAAU,CAACrB,MAAM,CAACM,UAAU,CAACc,OAAO,CAAC,CAC5C,CAAC;QACD,MAAMG,UAAU,GAAGN,QAAQ,CAACb,MAAM,CAACe,MAAM,CACtCC,OAAO,IAAKA,OAAO,KAAK,YAC3B,CAAC;QACD,OAAAI,aAAA,CAAAA,aAAA,KACKP,QAAQ;UACXb,MAAM,EAAE,CAAC,GAAGc,cAAc,EAAE,GAAGI,iBAAiB,EAAE,GAAGC,UAAU;QAAC;MAEpE,CAAC,CAAC;MACF,MAAMtB,MAAM,GAAAuB,aAAA,CAAAA,aAAA,KACPxB,MAAM;QACTG,SAAS;QACTY;MAAW,EACZ;MAED,OAAO;QAAEf,MAAM,EAAEyB,IAAI,CAACC,SAAS,CAACzB,MAAM;MAAE,CAAC;IAC3C,CAAC;IArKC,IAAI,CAAC0B,KAAK,GAAG;MACXpC,KAAK,EAAE,IAAI;MACXS,MAAM,EAAE,IAAI;MACZ4B,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE;IACZ,CAAC;IAED,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACE,IAAI,gBAAGzD,KAAK,CAACuB,SAAS,CAAC,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACEmC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACrC,KAAK,CAACjC,SAAS,CAAC,IAAI,CAACiC,KAAK,CAACQ,EAAE,CAAC;IACnC,IAAI,CAAC8B,QAAQ,CAAC;MAAEN,QAAQ,EAAE;IAAK,CAAC,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEO,gCAAgCA,CAACC,SAAS,EAAE;IAC1C;IACA,IAAI,IAAI,CAACxC,KAAK,CAACyC,aAAa,CAACC,OAAO,IAAIF,SAAS,CAACC,aAAa,CAAC/C,KAAK,EAAE;MACrE,IAAI,CAAC4C,QAAQ,CAAC;QACZ5C,KAAK,EAAE8C,SAAS,CAACC,aAAa,CAAC/C;MACjC,CAAC,CAAC;IACJ;;IAEA;IACA,IAAI,IAAI,CAACM,KAAK,CAACyC,aAAa,CAACC,OAAO,IAAIF,SAAS,CAACC,aAAa,CAACE,MAAM,EAAE;MAAA,IAAAC,iBAAA;MACtE,IAAInC,UAAU,GAAG,EAAAmC,iBAAA,GAAAJ,SAAS,CAACrC,MAAM,cAAAyC,iBAAA,uBAAhBA,iBAAA,CAAkBnC,UAAU,KAAI,CAAC,CAAC;MACnD,IAAIsB,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIc,KAAK,EAAEC,GAAG;MACd,KAAKA,GAAG,IAAIrC,UAAU,EAAE;QACtBoC,KAAK,GAAGpC,UAAU,CAACqC,GAAG,CAAC,CAACC,OAAO;QAC/B,IAAIF,KAAK,EAAE;UACTd,OAAO,CAACe,GAAG,CAAC,GAAGD,KAAK;QACtB;MACF;MAEA,IAAI,CAACP,QAAQ,CAAC;QACZnC,MAAM,EAAEqC,SAAS,CAACrC,MAAM;QACxB4B,OAAO,EAAEA;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,IACE,IAAI,CAAC/B,KAAK,CAACyC,aAAa,CAACO,GAAG,CAACN,OAAO,IACpCF,SAAS,CAACC,aAAa,CAACO,GAAG,CAACL,MAAM,EAClC;MACA;MACA1D,KAAK,CAACW,IAAI,CACRqD,KAAA,CAAC5E,KAAK;QACJuB,IAAI;QACJN,KAAK,EAAE,IAAI,CAACU,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACO,IAAI,CAAE;QACpDmC,OAAO,EAAE,IAAI,CAAC/B,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACQ,YAAY,CAAE;QAAAuD,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CAC/D,CACH,CAAC;IACH;;IAEA;IACA,IACE,IAAI,CAACzD,KAAK,CAACyC,aAAa,CAACO,GAAG,CAACN,OAAO,IACpCF,SAAS,CAACC,aAAa,CAACO,GAAG,CAACtD,KAAK,EACjC;MACAT,KAAK,CAACS,KAAK,CACTuD,KAAA,CAAC5E,KAAK;QACJqB,KAAK;QACLJ,KAAK,EAAE,IAAI,CAACU,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACK,KAAK,CAAE;QACrDqC,OAAO,EAAEH,IAAI,CAACC,SAAS,CACrBW,SAAS,CAACC,aAAa,CAACO,GAAG,CAACtD,KAAK,CAACgE,QAAQ,CAACC,IAAI,IAC7CnB,SAAS,CAACC,aAAa,CAACO,GAAG,CAACtD,KAAK,CAACgE,QAAQ,CAACE,IAC/C,CAAE;QAAAR,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACH,CACH,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEtB,QAAQA,CAAC0B,IAAI,EAAE;IACb,IAAI,CAAC7D,KAAK,CAAChC,SAAS,CAAC,IAAI,CAACgC,KAAK,CAACQ,EAAE,EAAEqD,IAAI,CAAC1D,MAAM,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;EACE8B,QAAQA,CAAA,EAAG;IACT,IAAI6B,GAAG,GAAG7F,YAAY,CAAC,IAAI,CAAC+B,KAAK,CAAC+D,QAAQ,CAAC;IAC3C,IAAI,CAAC/D,KAAK,CAACgE,OAAO,CAACC,IAAI,CAAChG,YAAY,CAAC6F,GAAG,CAAC,CAAC;EAC5C;EA8DA;AACF;AACA;AACA;AACA;EACEI,MAAMA,CAAA,EAAG;IACP;IACA,IAAI,IAAI,CAACpC,KAAK,CAACpC,KAAK,EAAE;MACpB,OAAOuD,KAAA,CAAC9E,KAAK;QAACuB,KAAK,EAAE,IAAI,CAACoC,KAAK,CAACpC,KAAM;QAAA0D,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CAAE,CAAC;IAC3C;IAEA,IAAI,IAAI,CAAC3B,KAAK,CAAC3B,MAAM,EAAE;MAAA,IAAAgE,WAAA,EAAAC,kBAAA;MACrB,MAAMC,iBAAiB,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAACxC,KAAK,CAAC3B,MAAM,CAAC;MAChE,MAAMoE,UAAU,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC1C,KAAK,CAAC3B,MAAM,EAAE,IAAI,CAACH,KAAK,CAACQ,EAAE,CAAC;MAExE,OACEyC,KAAA;QAAKzC,EAAE,EAAC,0BAA0B;QAACiE,SAAS,EAAC,cAAc;QAAArB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GACzDR,KAAA,CAAC7D,MAAM;QAACsF,QAAQ;QAAAtB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GACb,IAAI,CAACzD,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACC,KAAK,EAAE;QAC7CkB,EAAE,EAAE,EAAA2D,WAAA,OAAI,CAACnE,KAAK,cAAAmE,WAAA,wBAAAC,kBAAA,GAAVD,WAAA,CAAYhE,MAAM,cAAAiE,kBAAA,uBAAlBA,kBAAA,CAAoB9E,KAAK,KAAI,IAAI,CAACU,KAAK,CAACQ;MAC9C,CAAC,CACK,CAAC,EACTyC,KAAA,CAAC1E,IAAI;QACHoG,GAAG,EAAE,IAAI,CAACvC,IAAK;QACfjC,MAAM,EAAEkE,iBAAkB;QAC1BO,QAAQ,EAAEL,UAAW;QACrBR,QAAQ,EAAE,IAAI,CAAC/D,KAAK,CAAC+D,QAAS;QAC9B5B,QAAQ,EAAE,IAAI,CAACA,QAAS;QACxBF,QAAQ,EAAE,IAAI,CAACA,QAAS;QACxB4C,WAAW;QAAAzB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACZ,CAAC,EACD,IAAI,CAAC3B,KAAK,CAACE,QAAQ,iBAClBjD,YAAY,CACVkE,KAAA,CAAC3E,OAAO;QACNyF,QAAQ,EAAE,IAAI,CAAC/D,KAAK,CAAC+D,QAAS;QAC9Be,sBAAsB;QACtBC,KAAK,EACH9B,KAAA,CAAAtE,KAAA,CAAAqG,QAAA,QACE/B,KAAA,CAAC9D,MAAM;UACLqB,EAAE,EAAC,cAAc;UACjBiE,SAAS,EAAC,MAAM;UAChB,cAAY,IAAI,CAACzE,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACG,IAAI,CAAE;UACzDyF,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC7C,IAAI,CAAC8C,OAAO,CAAC/C,QAAQ,CAAC,CAAE;UAC5CuC,QAAQ,EAAE,IAAI,CAAC1E,KAAK,CAACyC,aAAa,CAACO,GAAG,CAACN,OAAQ;UAC/CA,OAAO,EAAE,IAAI,CAAC1C,KAAK,CAACyC,aAAa,CAACO,GAAG,CAACN,OAAQ;UAAAU,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAE9CR,KAAA,CAAC7E,IAAI;UACH+G,IAAI,EAAE1G,OAAQ;UACdgG,SAAS,EAAC,SAAS;UACnBW,IAAI,EAAC,MAAM;UACX9F,KAAK,EAAE,IAAI,CAACU,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACG,IAAI,CAAE;UAAA4D,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACrD,CACK,CAAC,EACTR,KAAA,CAAC9D,MAAM;UACLsF,SAAS,EAAC,QAAQ;UAClB,cAAY,IAAI,CAACzE,KAAK,CAACkD,IAAI,CAACC,aAAa,CACvC9D,QAAQ,CAACI,MACX,CAAE;UACFwF,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAChD,QAAQ,CAAC,CAAE;UAAAmB,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAE/BR,KAAA,CAAC7E,IAAI;UACH+G,IAAI,EAAE3G,QAAS;UACfiG,SAAS,EAAC,SAAS;UACnBW,IAAI,EAAC,MAAM;UACX9F,KAAK,EAAE,IAAI,CAACU,KAAK,CAACkD,IAAI,CAACC,aAAa,CAAC9D,QAAQ,CAACI,MAAM,CAAE;UAAA2D,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACvD,CACK,CACR,CACH;QAAAL,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACF,CAAC,EACF4B,QAAQ,CAACC,cAAc,CAAC,SAAS,CACnC,CACC,CAAC;IAEV;IAEA,OAAOrC,KAAA;MAAAG,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAM,CAAC;EAChB;AACF;AAhRE;AACF;AACA;AACA;AACA;AAJExD,eAAA,CADIH,iBAAiB,eAMF;EACjB/B,SAAS,EAAEW,SAAS,CAAC6G,IAAI,CAACC,UAAU;EACpCxH,SAAS,EAAEU,SAAS,CAAC6G,IAAI,CAACC,UAAU;EACpCzB,QAAQ,EAAErF,SAAS,CAAC+G,MAAM,CAACD,UAAU;EACrChF,EAAE,EAAE9B,SAAS,CAAC+G,MAAM,CAACD;AACvB,CAAC;AAED;AACF;AACA;AACA;AACA;AAJEvF,eAAA,CAbIH,iBAAiB,kBAkBC,CAAC,CAAC;AAiQ1B,eAAeZ,OAAO,CACpBJ,UAAU,EACVE,OAAO,CACL,CAAC8C,KAAK,EAAE9B,KAAK,MAAM;EACjBG,MAAM,EAAE2B,KAAK,CAAC3B,MAAM,CAACA,MAAM;EAC3BsC,aAAa,EAAEX,KAAK,CAAC3B,MAAM;EAC3B4D,QAAQ,EAAE/D,KAAK,CAAC0F,QAAQ,CAAC3B,QAAQ;EACjCvD,EAAE,EAAEtC,GAAG,CAAC8B,KAAK,CAAC0F,QAAQ,CAAC3B,QAAQ,CAAC4B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChD,CAAC,CAAC,EACF;EACE5H,SAAS;EACTC;AACF,CACF,CACF,CAAC,CAAC8B,iBAAiB,CAAC","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"{id} Schema","defaultMessage":"{id} Schema"},{"id":"Success","defaultMessage":"Success"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Error","defaultMessage":"Error"},{"id":"Schema updates","defaultMessage":"Schema updates"},{"id":"Info","defaultMessage":"Info"},{"id":"Changes saved.","defaultMessage":"Changes saved."}]}},"sourceType":"module","externalDependencies":[]}