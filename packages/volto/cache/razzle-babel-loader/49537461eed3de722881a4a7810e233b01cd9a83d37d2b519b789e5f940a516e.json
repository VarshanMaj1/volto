{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { Editor, Range, Transforms, Text, Node } from 'slate';\nimport { getMaxRange, selectAll, getSelectionNodesArrayByType } from '@plone/volto-slate/utils/selection';\nimport { P, LI, UL, OL } from '@plone/volto-slate/constants';\nexport function unwrapNodesByType(editor, types, options = {}) {\n  Transforms.unwrapNodes(editor, _objectSpread({\n    match: n => types.includes(n.type)\n  }, options));\n}\nexport function unwrapList(editor, willWrapAgain, {\n  typeUl = UL,\n  typeOl = OL,\n  typeLi = LI,\n  unwrapFromList = false\n} = {}) {\n  // TODO: toggling from one list type to another should keep the structure untouched\n  if (editor.selection && Range.isExpanded(editor.selection) && unwrapFromList) {\n    if (unwrapFromList) {\n      // unwrapNodesByType(editor, [typeLi]);\n      // unwrapNodesByType(editor, [typeUl, typeOl], {\n      //   split: true,\n      // });\n      // else ...\n    }\n  } else {\n    unwrapNodesByType(editor, [typeLi], {\n      at: getMaxRange(editor)\n    });\n    unwrapNodesByType(editor, [typeUl, typeOl], {\n      at: getMaxRange(editor)\n    });\n  }\n  if (!willWrapAgain) {\n    convertAllToParagraph(editor);\n  }\n}\nexport function convertAllToParagraph(editor) {\n  // let count = Array.from(Node.children(editor, [])).length;\n  let result = recursive(editor);\n  compactAndNormalize(result);\n  Editor.withoutNormalizing(editor, () => {\n    Transforms.removeNodes(editor, {\n      at: [0 /* , i */]\n    });\n    Transforms.insertNodes(editor, {\n      type: P,\n      children: [{\n        text: ''\n      }]\n    }, {\n      at: [0]\n    });\n    Transforms.insertFragment(editor, [...result], {\n      at: [0]\n    });\n  });\n}\nexport function recursive(myNode) {\n  if (Text.isText(myNode)) return [_objectSpread({}, myNode)];\n  let output = [];\n  let children = Node.children(myNode, []);\n  for (const [node] of children) {\n    if (Text.isText(node)) {\n      output.push(_objectSpread({}, node));\n    } else {\n      let count = Array.from(node.children).length;\n      for (let i = 0; i < count; ++i) {\n        let o = recursive(node.children[i]);\n        for (let j = 0; j < o.length; ++j) {\n          output.push(o[j]);\n        }\n      }\n    }\n  }\n  return output;\n}\n\n// TODO: make this add a space between any two Text instances\nexport function compactAndNormalize(result) {\n  for (let i = 0; i < result.length - 1; ++i) {\n    let a = result[i];\n    let b = result[i + 1];\n    let m = textsMatch(a, b);\n    if (m) {\n      result[i].text += b.text;\n      result.splice(i + 1, 1);\n    }\n  }\n  if (result.length === 0) {\n    result.push({\n      text: ''\n    });\n  }\n  return;\n}\n\n// TODO: optimize this:\nexport function textsMatch(a, b) {\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (let x in a) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n  for (let x in b) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @summary Toggles list type.\n * @todo need to redo this\n * @todo should preserve structure of list if going from a list type to another\n * @todo allow nested lists, currently the Markdown plugin uses this function but crashes when making a UL in an OL's LI\n * @param {Editor} editor\n * @param {object} options\n */\nexport function toggleList(editor, {\n  typeList,\n  typeUl = UL,\n  typeOl = OL,\n  typeLi = LI,\n  typeP = P,\n  isBulletedActive = false,\n  isNumberedActive = false\n}) {\n  // TODO: set previous selection (not this 'select all' command) after toggling list (in all three cases: toggling to numbered, bulleted or none)\n  selectAll(editor);\n\n  // const isActive = isNodeInSelection(editor, [typeList]);\n\n  // if (the list type/s are unset) {\n\n  const B = typeList === UL;\n  const N = typeList === OL;\n  if (N && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (N && !isBulletedActive && isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  } else if (N && isBulletedActive && !isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  }\n  selectAll(editor);\n  const willWrapAgain = !isBulletedActive;\n  unwrapList(editor, willWrapAgain, {\n    unwrapFromList: isBulletedActive\n  });\n\n  // a new list is created and everything in the editor is put in it;\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const list = {\n    type: typeList\n  };\n  Transforms.wrapNodes(editor, list);\n\n  // get all the selected paragraphs\n  const nodes = getSelectionNodesArrayByType(editor, typeP);\n\n  // for each paragraph\n  for (const [, path] of nodes) {\n    // convert the paragraph to a list item\n    Transforms.setNodes(editor, {\n      type: LI\n    }, {\n      at: path\n    });\n  }\n}","map":{"version":3,"names":["Editor","Range","Transforms","Text","Node","getMaxRange","selectAll","getSelectionNodesArrayByType","P","LI","UL","OL","unwrapNodesByType","editor","types","options","unwrapNodes","_objectSpread","match","n","includes","type","unwrapList","willWrapAgain","typeUl","typeOl","typeLi","unwrapFromList","selection","isExpanded","at","convertAllToParagraph","result","recursive","compactAndNormalize","withoutNormalizing","removeNodes","insertNodes","children","text","insertFragment","myNode","isText","output","node","push","count","Array","from","length","i","o","j","a","b","m","textsMatch","splice","aKeys","Object","keys","bKeys","x","toggleList","typeList","typeP","isBulletedActive","isNumberedActive","B","N","list","wrapNodes","nodes","path","setNodes"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/plugins/Markdown/utils.js"],"sourcesContent":["import { Editor, Range, Transforms, Text, Node } from 'slate';\nimport {\n  getMaxRange,\n  selectAll,\n  getSelectionNodesArrayByType,\n} from '@plone/volto-slate/utils/selection';\nimport { P, LI, UL, OL } from '@plone/volto-slate/constants';\n\nexport function unwrapNodesByType(editor, types, options = {}) {\n  Transforms.unwrapNodes(editor, {\n    match: (n) => types.includes(n.type),\n    ...options,\n  });\n}\n\nexport function unwrapList(\n  editor,\n  willWrapAgain,\n  { typeUl = UL, typeOl = OL, typeLi = LI, unwrapFromList = false } = {},\n) {\n  // TODO: toggling from one list type to another should keep the structure untouched\n  if (\n    editor.selection &&\n    Range.isExpanded(editor.selection) &&\n    unwrapFromList\n  ) {\n    if (unwrapFromList) {\n      // unwrapNodesByType(editor, [typeLi]);\n      // unwrapNodesByType(editor, [typeUl, typeOl], {\n      //   split: true,\n      // });\n      // else ...\n    }\n  } else {\n    unwrapNodesByType(editor, [typeLi], { at: getMaxRange(editor) });\n    unwrapNodesByType(editor, [typeUl, typeOl], {\n      at: getMaxRange(editor),\n    });\n  }\n\n  if (!willWrapAgain) {\n    convertAllToParagraph(editor);\n  }\n}\n\nexport function convertAllToParagraph(editor) {\n  // let count = Array.from(Node.children(editor, [])).length;\n  let result = recursive(editor);\n  compactAndNormalize(result);\n\n  Editor.withoutNormalizing(editor, () => {\n    Transforms.removeNodes(editor, { at: [0 /* , i */] });\n    Transforms.insertNodes(\n      editor,\n      { type: P, children: [{ text: '' }] },\n      { at: [0] },\n    );\n    Transforms.insertFragment(editor, [...result], { at: [0] });\n  });\n}\n\nexport function recursive(myNode) {\n  if (Text.isText(myNode)) return [{ ...myNode }];\n\n  let output = [];\n  let children = Node.children(myNode, []);\n\n  for (const [node] of children) {\n    if (Text.isText(node)) {\n      output.push({ ...node });\n    } else {\n      let count = Array.from(node.children).length;\n      for (let i = 0; i < count; ++i) {\n        let o = recursive(node.children[i]);\n        for (let j = 0; j < o.length; ++j) {\n          output.push(o[j]);\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\n// TODO: make this add a space between any two Text instances\nexport function compactAndNormalize(result) {\n  for (let i = 0; i < result.length - 1; ++i) {\n    let a = result[i];\n    let b = result[i + 1];\n\n    let m = textsMatch(a, b);\n    if (m) {\n      result[i].text += b.text;\n      result.splice(i + 1, 1);\n    }\n  }\n\n  if (result.length === 0) {\n    result.push({ text: '' });\n  }\n\n  return;\n}\n\n// TODO: optimize this:\nexport function textsMatch(a, b) {\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  for (let x in a) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n\n  for (let x in b) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * @summary Toggles list type.\n * @todo need to redo this\n * @todo should preserve structure of list if going from a list type to another\n * @todo allow nested lists, currently the Markdown plugin uses this function but crashes when making a UL in an OL's LI\n * @param {Editor} editor\n * @param {object} options\n */\nexport function toggleList(\n  editor,\n  {\n    typeList,\n    typeUl = UL,\n    typeOl = OL,\n    typeLi = LI,\n    typeP = P,\n    isBulletedActive = false,\n    isNumberedActive = false,\n  },\n) {\n  // TODO: set previous selection (not this 'select all' command) after toggling list (in all three cases: toggling to numbered, bulleted or none)\n  selectAll(editor);\n\n  // const isActive = isNodeInSelection(editor, [typeList]);\n\n  // if (the list type/s are unset) {\n\n  const B = typeList === UL;\n  const N = typeList === OL;\n\n  if (N && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (N && !isBulletedActive && isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  } else if (N && isBulletedActive && !isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  }\n\n  selectAll(editor);\n\n  const willWrapAgain = !isBulletedActive;\n  unwrapList(editor, willWrapAgain, { unwrapFromList: isBulletedActive });\n\n  // a new list is created and everything in the editor is put in it;\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const list = { type: typeList };\n  Transforms.wrapNodes(editor, list);\n\n  // get all the selected paragraphs\n  const nodes = getSelectionNodesArrayByType(editor, typeP);\n\n  // for each paragraph\n  for (const [, path] of nodes) {\n    // convert the paragraph to a list item\n    Transforms.setNodes(editor, { type: LI }, { at: path });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}