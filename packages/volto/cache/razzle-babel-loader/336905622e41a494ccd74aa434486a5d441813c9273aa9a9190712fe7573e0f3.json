{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/UpgradeControlPanel.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Upgrade controlpanel container.\n * @module components/manage/Controlpanels/Upgrade\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { Button, Container, Form, Message, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport map from 'lodash/map';\nimport { getSystemInformation } from '@plone/volto/actions/controlpanels/controlpanels';\nimport { getUpgradeInformation, runUpgrade } from '@plone/volto/actions/upgrade/upgrade';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { VersionOverview } from '@plone/volto/components/manage/Controlpanels';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  upgradeInformation: {\n    \"id\": \"Upgrade Plone Site\",\n    \"defaultMessage\": \"Upgrade Plone Site\"\n  },\n  upgrade: {\n    \"id\": \"Upgrade Plone Site\",\n    \"defaultMessage\": \"Upgrade Plone Site\"\n  },\n  upgradeSuccess: {\n    \"id\": \"Your site is up to date.\",\n    \"defaultMessage\": \"Your site is up to date.\"\n  },\n  dryRunSuccess: {\n    \"id\": \"Dry run selected, transaction aborted.\",\n    \"defaultMessage\": \"Dry run selected, transaction aborted.\"\n  },\n  upgradeError: {\n    \"id\": \"There was an error with the upgrade.\",\n    \"defaultMessage\": \"There was an error with the upgrade.\"\n  }\n});\nconst UpgradeStep = ({\n  title,\n  steps\n}) => {\n  const stepTitles = steps.map(step => {\n    return step.title;\n  });\n  return __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, __jsx(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, title), __jsx(Message.List, {\n    items: stepTitles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n};\n\n/**\n * UpgradeControlPanel class.\n * @class UpgradeControlPanel\n * @extends Component\n */\nclass UpgradeControlPanel extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.runUpgrade = this.runUpgrade.bind(this);\n    this.state = {\n      isClient: false,\n      dryRun: false\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getUpgradeInformation();\n    this.props.getSystemInformation();\n    this.setState({\n      isClient: true,\n      dryRun: false\n    });\n  }\n\n  /**\n   * Run Upgrade handler\n   * @method runUpgrade\n   * @param {boolean} dryRun Id of package to install.\n   * @returns {undefined}\n   */\n  runUpgrade(dryRun) {\n    this.props.runUpgrade(dryRun).then(() => {\n      if (!dryRun) {\n        // Upgrade completed\n        this.props.getUpgradeInformation();\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.upgrade),\n          content: this.props.intl.formatMessage(messages.upgradeSuccess),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }\n        }));\n      } else {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.upgrade),\n          content: this.props.intl.formatMessage(messages.dryRunSuccess),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }\n        }));\n      }\n    }).catch(() => {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.upgrade),\n        content: this.props.intl.formatMessage(messages.upgradeError),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }));\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const upgradeInformation = this.props.upgradeInformation;\n    const upgradeSteps = upgradeInformation ? Object.entries(upgradeInformation.upgrade_steps) : null;\n    return upgradeInformation ? __jsx(Container, {\n      id: \"upgrade-page\",\n      className: \"controlpanel-upgrade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.upgradeInformation),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Plone Site\",\n      defaultMessage: \"Upgrade Plone Site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      className: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\",\n      defaultMessage: \"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    })), __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Configuration Versions\",\n      defaultMessage: \"Configuration Versions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }, upgradeInformation.versions.fs === upgradeInformation.versions.instance ? __jsx(Message, {\n      attached: true,\n      success: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Your site is up to date.\",\n      defaultMessage: \"Your site is up to date.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    })) : __jsx(Message, {\n      attached: true,\n      warning: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The site configuration is outdated and needs to be upgraded.\",\n      defaultMessage: \"The site configuration is outdated and needs to be upgraded.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    })), __jsx(Table, {\n      celled: true,\n      padded: true,\n      columns: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Current active configuration\",\n      defaultMessage: \"Current active configuration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, upgradeInformation.versions.instance)), __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Latest available configuration\",\n      defaultMessage: \"Latest available configuration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }\n    }, upgradeInformation.versions.fs))))), upgradeSteps.length > 0 && __jsx(React.Fragment, null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Steps\",\n      defaultMessage: \"Upgrade Steps\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    })), __jsx(Message.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\",\n      defaultMessage: \"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 19\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }, map(upgradeSteps, upgradeGroup => [__jsx(UpgradeStep, {\n      key: upgradeGroup[0],\n      title: upgradeGroup[0],\n      steps: upgradeGroup[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }\n    })])), __jsx(Message, {\n      negative: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Please ensure you have a backup of your site before performing the upgrade.\",\n      defaultMessage: \"Please ensure you have a backup of your site before performing the upgrade.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 19\n      }\n    })), __jsx(Form.Checkbox, {\n      onChange: (e, data) => this.setState({\n        dryRun: data.checked\n      }),\n      checked: this.state.dryRun,\n      label: \"Dry run mode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      \"aria-label\": this.props.intl.formatMessage({\n        id: 'Upgrade',\n        defaultMessage: 'Upgrade'\n      }),\n      onClick: () => this.runUpgrade(this.state.dryRun),\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade\",\n      defaultMessage: \"Upgrade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 19\n      }\n    })))), this.props.upgradeReport ? __jsx(React.Fragment, null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 15\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Report\",\n      defaultMessage: \"Upgrade Report\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 19\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }, __jsx(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }\n    }, this.props.upgradeReport.report))) : null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Version Overview\",\n      defaultMessage: \"Version Overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 15\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }\n    }, this.props.systemInformation ? __jsx(VersionOverview, _extends({}, this.props.systemInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }\n    })) : null)), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        \"aria-label\": this.props.intl.formatMessage(messages.back),\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }\n    }), document.getElementById('toolbar'))) : null;\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(UpgradeControlPanel, \"propTypes\", {\n  getUpgradeInformation: PropTypes.func.isRequired,\n  getSystemInformation: PropTypes.func.isRequired,\n  runUpgrade: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  upgradeInformation: state.upgrade.upgradeinformation,\n  pathname: props.location.pathname,\n  systemInformation: state.controlpanels.systeminformation,\n  upgradeReport: state.upgrade.upgradereport\n}), {\n  getUpgradeInformation,\n  getSystemInformation,\n  runUpgrade\n}))(UpgradeControlPanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","createPortal","Button","Container","Form","Message","Segment","Table","FormattedMessage","defineMessages","injectIntl","map","getSystemInformation","getUpgradeInformation","runUpgrade","Helmet","Icon","Toast","Toolbar","VersionOverview","backSVG","toast","messages","back","upgradeInformation","upgrade","upgradeSuccess","dryRunSuccess","upgradeError","UpgradeStep","title","steps","stepTitles","step","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Header","List","items","UpgradeControlPanel","constructor","props","bind","state","isClient","dryRun","componentDidMount","setState","then","success","intl","formatMessage","content","catch","error","render","upgradeSteps","Object","entries","upgrade_steps","id","className","Group","raised","defaultMessage","attached","versions","fs","instance","warning","celled","padded","columns","Body","Row","Cell","length","Fragment","Content","upgradeGroup","key","negative","Checkbox","onChange","e","data","checked","label","onClick","primary","upgradeReport","report","systemInformation","_extends","pathname","hideDefaultViewButtons","inner","to","name","size","document","getElementById","_defineProperty","func","isRequired","upgradeinformation","location","controlpanels","systeminformation","upgradereport"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/UpgradeControlPanel.jsx"],"sourcesContent":["/**\n * Upgrade controlpanel container.\n * @module components/manage/Controlpanels/Upgrade\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport {\n  Button,\n  Container,\n  Form,\n  Message,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport map from 'lodash/map';\n\nimport { getSystemInformation } from '@plone/volto/actions/controlpanels/controlpanels';\nimport {\n  getUpgradeInformation,\n  runUpgrade,\n} from '@plone/volto/actions/upgrade/upgrade';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport { VersionOverview } from '@plone/volto/components/manage/Controlpanels';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  upgradeInformation: {\n    id: 'Upgrade Plone Site',\n    defaultMessage: 'Upgrade Plone Site',\n  },\n  upgrade: {\n    id: 'Upgrade Plone Site',\n    defaultMessage: 'Upgrade Plone Site',\n  },\n  upgradeSuccess: {\n    id: 'Your site is up to date.',\n    defaultMessage: 'Your site is up to date.',\n  },\n  dryRunSuccess: {\n    id: 'Dry run selected, transaction aborted.',\n    defaultMessage: 'Dry run selected, transaction aborted.',\n  },\n  upgradeError: {\n    id: 'There was an error with the upgrade.',\n    defaultMessage: 'There was an error with the upgrade.',\n  },\n});\n\nconst UpgradeStep = ({ title, steps }) => {\n  const stepTitles = steps.map((step) => {\n    return step.title;\n  });\n  return (\n    <Message>\n      <Message.Header>{title}</Message.Header>\n      <Message.List items={stepTitles} />\n    </Message>\n  );\n};\n\n/**\n * UpgradeControlPanel class.\n * @class UpgradeControlPanel\n * @extends Component\n */\nclass UpgradeControlPanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getUpgradeInformation: PropTypes.func.isRequired,\n    getSystemInformation: PropTypes.func.isRequired,\n    runUpgrade: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.runUpgrade = this.runUpgrade.bind(this);\n    this.state = {\n      isClient: false,\n      dryRun: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getUpgradeInformation();\n    this.props.getSystemInformation();\n    this.setState({ isClient: true, dryRun: false });\n  }\n\n  /**\n   * Run Upgrade handler\n   * @method runUpgrade\n   * @param {boolean} dryRun Id of package to install.\n   * @returns {undefined}\n   */\n  runUpgrade(dryRun) {\n    this.props\n      .runUpgrade(dryRun)\n      .then(() => {\n        if (!dryRun) {\n          // Upgrade completed\n          this.props.getUpgradeInformation();\n          toast.success(\n            <Toast\n              success\n              title={this.props.intl.formatMessage(messages.upgrade)}\n              content={this.props.intl.formatMessage(messages.upgradeSuccess)}\n            />,\n          );\n        } else {\n          toast.success(\n            <Toast\n              success\n              title={this.props.intl.formatMessage(messages.upgrade)}\n              content={this.props.intl.formatMessage(messages.dryRunSuccess)}\n            />,\n          );\n        }\n      })\n      .catch(() => {\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(messages.upgrade)}\n            content={this.props.intl.formatMessage(messages.upgradeError)}\n          />,\n        );\n      });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const upgradeInformation = this.props.upgradeInformation;\n    const upgradeSteps = upgradeInformation\n      ? Object.entries(upgradeInformation.upgrade_steps)\n      : null;\n    return upgradeInformation ? (\n      <Container id=\"upgrade-page\" className=\"controlpanel-upgrade\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.upgradeInformation)}\n        />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Upgrade Plone Site\"\n              defaultMessage=\"Upgrade Plone Site\"\n            />\n          </Segment>\n          <Segment className=\"secondary\">\n            <FormattedMessage\n              id=\"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\"\n              defaultMessage=\"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\"\n            />\n          </Segment>\n          <Message attached>\n            <Message.Header>\n              <FormattedMessage\n                id=\"Configuration Versions\"\n                defaultMessage=\"Configuration Versions\"\n              />\n            </Message.Header>\n          </Message>\n          <Segment>\n            {upgradeInformation.versions.fs ===\n            upgradeInformation.versions.instance ? (\n              <Message attached success>\n                <FormattedMessage\n                  id=\"Your site is up to date.\"\n                  defaultMessage=\"Your site is up to date.\"\n                />\n              </Message>\n            ) : (\n              <Message attached warning>\n                <FormattedMessage\n                  id=\"The site configuration is outdated and needs to be upgraded.\"\n                  defaultMessage=\"The site configuration is outdated and needs to be upgraded.\"\n                />\n              </Message>\n            )}\n            <Table celled padded columns=\"2\">\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Current active configuration\"\n                      defaultMessage=\"Current active configuration\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {upgradeInformation.versions.instance}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Latest available configuration\"\n                      defaultMessage=\"Latest available configuration\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>{upgradeInformation.versions.fs}</Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Segment>\n          {upgradeSteps.length > 0 && (\n            <>\n              <Message attached>\n                <Message.Header>\n                  <FormattedMessage\n                    id=\"Upgrade Steps\"\n                    defaultMessage=\"Upgrade Steps\"\n                  />\n                </Message.Header>\n                <Message.Content>\n                  <FormattedMessage\n                    id=\"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\"\n                    defaultMessage=\"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\"\n                  />\n                </Message.Content>\n              </Message>\n              <Segment>\n                <Container>\n                  {map(upgradeSteps, (upgradeGroup) => [\n                    <UpgradeStep\n                      key={upgradeGroup[0]}\n                      title={upgradeGroup[0]}\n                      steps={upgradeGroup[1]}\n                    />,\n                  ])}\n                </Container>\n                <Message negative>\n                  <FormattedMessage\n                    id=\"Please ensure you have a backup of your site before performing the upgrade.\"\n                    defaultMessage=\"Please ensure you have a backup of your site before performing the upgrade.\"\n                  />\n                </Message>\n                <Form.Checkbox\n                  onChange={(e, data) =>\n                    this.setState({ dryRun: data.checked })\n                  }\n                  checked={this.state.dryRun}\n                  label=\"Dry run mode\"\n                />\n                <br />\n                <Button\n                  aria-label={this.props.intl.formatMessage({\n                    id: 'Upgrade',\n                    defaultMessage: 'Upgrade',\n                  })}\n                  onClick={() => this.runUpgrade(this.state.dryRun)}\n                  primary\n                >\n                  <FormattedMessage id=\"Upgrade\" defaultMessage=\"Upgrade\" />\n                </Button>\n              </Segment>\n            </>\n          )}\n          {this.props.upgradeReport ? (\n            <>\n              <Message attached>\n                <Message.Header>\n                  <FormattedMessage\n                    id=\"Upgrade Report\"\n                    defaultMessage=\"Upgrade Report\"\n                  />\n                </Message.Header>\n              </Message>\n              <Segment>\n                <pre>{this.props.upgradeReport.report}</pre>\n              </Segment>\n            </>\n          ) : null}\n          <Message attached>\n            <Message.Header>\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Message.Header>\n          </Message>\n          <Segment>\n            {this.props.systemInformation ? (\n              <VersionOverview {...this.props.systemInformation} />\n            ) : null}\n          </Segment>\n        </Segment.Group>\n        {this.state.isClient &&\n          createPortal(\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </Container>\n    ) : null;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      upgradeInformation: state.upgrade.upgradeinformation,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n      upgradeReport: state.upgrade.upgradereport,\n    }),\n    { getUpgradeInformation, getSystemInformation, runUpgrade },\n  ),\n)(UpgradeControlPanel);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,YAAY,QAAQ,WAAW;AACxC,SACEC,MAAM,EACNC,SAAS,EACTC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,KAAK,QACA,mBAAmB;AAC1B,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACzE,OAAOC,GAAG,MAAM,YAAY;AAE5B,SAASC,oBAAoB,QAAQ,kDAAkD;AACvF,SACEC,qBAAqB,EACrBC,UAAU,QACL,sCAAsC;AAC7C,OAAOC,MAAM,MAAM,oCAAoC;AACvD,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,KAAK,MAAM,4CAA4C;AAC9D,OAAOC,OAAO,MAAM,gDAAgD;AACpE,SAASC,eAAe,QAAQ,8CAA8C;AAC9E,OAAOC,OAAO,MAAM,6BAA6B;AACjD,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,QAAQ,GAAGb,cAAc,CAAC;EAC9Bc,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,kBAAkB;IAAA;IAAA;EAAA,CAGjB;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,cAAc;IAAA;IAAA;EAAA,CAGb;EACDC,aAAa;IAAA;IAAA;EAAA,CAGZ;EACDC,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EACxC,MAAMC,UAAU,GAAGD,KAAK,CAACpB,GAAG,CAAEsB,IAAI,IAAK;IACrC,OAAOA,IAAI,CAACH,KAAK;EACnB,CAAC,CAAC;EACF,OACEI,KAAA,CAAC7B,OAAO;IAAA8B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACNN,KAAA,CAAC7B,OAAO,CAACoC,MAAM;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEV,KAAsB,CAAC,EACxCI,KAAA,CAAC7B,OAAO,CAACqC,IAAI;IAACC,KAAK,EAAEX,UAAW;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAC3B,CAAC;AAEd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,mBAAmB,SAAShD,SAAS,CAAC;EAY1C;AACF;AACA;AACA;AACA;AACA;EACEiD,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAAChC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACiC,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACC,KAAK,GAAG;MACXC,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE;IACV,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACL,KAAK,CAACjC,qBAAqB,CAAC,CAAC;IAClC,IAAI,CAACiC,KAAK,CAAClC,oBAAoB,CAAC,CAAC;IACjC,IAAI,CAACwC,QAAQ,CAAC;MAAEH,QAAQ,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEpC,UAAUA,CAACoC,MAAM,EAAE;IACjB,IAAI,CAACJ,KAAK,CACPhC,UAAU,CAACoC,MAAM,CAAC,CAClBG,IAAI,CAAC,MAAM;MACV,IAAI,CAACH,MAAM,EAAE;QACX;QACA,IAAI,CAACJ,KAAK,CAACjC,qBAAqB,CAAC,CAAC;QAClCQ,KAAK,CAACiC,OAAO,CACXpB,KAAA,CAACjB,KAAK;UACJqC,OAAO;UACPxB,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACG,OAAO,CAAE;UACvDgC,OAAO,EAAE,IAAI,CAACX,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACI,cAAc,CAAE;UAAAS,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACjE,CACH,CAAC;MACH,CAAC,MAAM;QACLnB,KAAK,CAACiC,OAAO,CACXpB,KAAA,CAACjB,KAAK;UACJqC,OAAO;UACPxB,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACG,OAAO,CAAE;UACvDgC,OAAO,EAAE,IAAI,CAACX,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACK,aAAa,CAAE;UAAAQ,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CAChE,CACH,CAAC;MACH;IACF,CAAC,CAAC,CACDkB,KAAK,CAAC,MAAM;MACXrC,KAAK,CAACsC,KAAK,CACTzB,KAAA,CAACjB,KAAK;QACJ0C,KAAK;QACL7B,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACG,OAAO,CAAE;QACvDgC,OAAO,EAAE,IAAI,CAACX,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACM,YAAY,CAAE;QAAAO,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CAC/D,CACH,CAAC;IACH,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACEoB,MAAMA,CAAA,EAAG;IACP,MAAMpC,kBAAkB,GAAG,IAAI,CAACsB,KAAK,CAACtB,kBAAkB;IACxD,MAAMqC,YAAY,GAAGrC,kBAAkB,GACnCsC,MAAM,CAACC,OAAO,CAACvC,kBAAkB,CAACwC,aAAa,CAAC,GAChD,IAAI;IACR,OAAOxC,kBAAkB,GACvBU,KAAA,CAAC/B,SAAS;MAAC8D,EAAE,EAAC,cAAc;MAACC,SAAS,EAAC,sBAAsB;MAAA/B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC3DN,KAAA,CAACnB,MAAM;MACLe,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACE,kBAAkB,CAAE;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACnE,CAAC,EACFN,KAAA,CAAC5B,OAAO,CAAC6D,KAAK;MAACC,MAAM;MAAAjC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACnBN,KAAA,CAAC5B,OAAO;MAAC4D,SAAS,EAAC,SAAS;MAAA/B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC1BN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,oBAAoB;MACvBI,cAAc,EAAC,oBAAoB;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACpC,CACM,CAAC,EACVN,KAAA,CAAC5B,OAAO;MAAC4D,SAAS,EAAC,WAAW;MAAA/B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC5BN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,2HAA2H;MAC9HI,cAAc,EAAC,2HAA2H;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC3I,CACM,CAAC,EACVN,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAAAnC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACfN,KAAA,CAAC7B,OAAO,CAACoC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACbN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,wBAAwB;MAC3BI,cAAc,EAAC,wBAAwB;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACxC,CACa,CACT,CAAC,EACVN,KAAA,CAAC5B,OAAO;MAAA6B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACLhB,kBAAkB,CAAC+C,QAAQ,CAACC,EAAE,KAC/BhD,kBAAkB,CAAC+C,QAAQ,CAACE,QAAQ,GAClCvC,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAAChB,OAAO;MAAAnB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACvBN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,0BAA0B;MAC7BI,cAAc,EAAC,0BAA0B;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC1C,CACM,CAAC,GAEVN,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAACI,OAAO;MAAAvC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACvBN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,8DAA8D;MACjEI,cAAc,EAAC,8DAA8D;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC9E,CACM,CACV,EACDN,KAAA,CAAC3B,KAAK;MAACoE,MAAM;MAACC,MAAM;MAACC,OAAO,EAAC,GAAG;MAAA1C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC9BN,KAAA,CAAC3B,KAAK,CAACuE,IAAI;MAAA3C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACTN,KAAA,CAAC3B,KAAK,CAACwE,GAAG;MAAA5C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACRN,KAAA,CAAC3B,KAAK,CAACyE,IAAI;MAAA7C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACTN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,8BAA8B;MACjCI,cAAc,EAAC,8BAA8B;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC9C,CACS,CAAC,EACbN,KAAA,CAAC3B,KAAK,CAACyE,IAAI;MAAA7C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACRhB,kBAAkB,CAAC+C,QAAQ,CAACE,QACnB,CACH,CAAC,EACZvC,KAAA,CAAC3B,KAAK,CAACwE,GAAG;MAAA5C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACRN,KAAA,CAAC3B,KAAK,CAACyE,IAAI;MAAA7C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACTN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,gCAAgC;MACnCI,cAAc,EAAC,gCAAgC;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAChD,CACS,CAAC,EACbN,KAAA,CAAC3B,KAAK,CAACyE,IAAI;MAAA7C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEhB,kBAAkB,CAAC+C,QAAQ,CAACC,EAAe,CAC/C,CACD,CACP,CACA,CAAC,EACTX,YAAY,CAACoB,MAAM,GAAG,CAAC,IACtB/C,KAAA,CAAAvC,KAAA,CAAAuF,QAAA,QACEhD,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAAAnC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACfN,KAAA,CAAC7B,OAAO,CAACoC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACbN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,eAAe;MAClBI,cAAc,EAAC,eAAe;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC/B,CACa,CAAC,EACjBN,KAAA,CAAC7B,OAAO,CAAC8E,OAAO;MAAAhD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACdN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,kLAAkL;MACrLI,cAAc,EAAC,kLAAkL;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAClM,CACc,CACV,CAAC,EACVN,KAAA,CAAC5B,OAAO;MAAA6B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACNN,KAAA,CAAC/B,SAAS;MAAAgC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACP7B,GAAG,CAACkD,YAAY,EAAGuB,YAAY,IAAK,CACnClD,KAAA,CAACL,WAAW;MACVwD,GAAG,EAAED,YAAY,CAAC,CAAC,CAAE;MACrBtD,KAAK,EAAEsD,YAAY,CAAC,CAAC,CAAE;MACvBrD,KAAK,EAAEqD,YAAY,CAAC,CAAC,CAAE;MAAAjD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACxB,CAAC,CACH,CACQ,CAAC,EACZN,KAAA,CAAC7B,OAAO;MAACiF,QAAQ;MAAAnD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACfN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,6EAA6E;MAChFI,cAAc,EAAC,6EAA6E;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC7F,CACM,CAAC,EACVN,KAAA,CAAC9B,IAAI,CAACmF,QAAQ;MACZC,QAAQ,EAAEA,CAACC,CAAC,EAAEC,IAAI,KAChB,IAAI,CAACtC,QAAQ,CAAC;QAAEF,MAAM,EAAEwC,IAAI,CAACC;MAAQ,CAAC,CACvC;MACDA,OAAO,EAAE,IAAI,CAAC3C,KAAK,CAACE,MAAO;MAC3B0C,KAAK,EAAC,cAAc;MAAAzD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACrB,CAAC,EACFN,KAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAK,CAAC,EACNN,KAAA,CAAChC,MAAM;MACL,cAAY,IAAI,CAAC4C,KAAK,CAACS,IAAI,CAACC,aAAa,CAAC;QACxCS,EAAE,EAAE,SAAS;QACbI,cAAc,EAAE;MAClB,CAAC,CAAE;MACHwB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC/E,UAAU,CAAC,IAAI,CAACkC,KAAK,CAACE,MAAM,CAAE;MAClD4C,OAAO;MAAA3D,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEPN,KAAA,CAAC1B,gBAAgB;MAACyD,EAAE,EAAC,SAAS;MAACI,cAAc,EAAC,SAAS;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACnD,CACD,CACT,CACH,EACA,IAAI,CAACM,KAAK,CAACiD,aAAa,GACvB7D,KAAA,CAAAvC,KAAA,CAAAuF,QAAA,QACEhD,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAAAnC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACfN,KAAA,CAAC7B,OAAO,CAACoC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACbN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,gBAAgB;MACnBI,cAAc,EAAC,gBAAgB;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAChC,CACa,CACT,CAAC,EACVN,KAAA,CAAC5B,OAAO;MAAA6B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACNN,KAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAM,IAAI,CAACM,KAAK,CAACiD,aAAa,CAACC,MAAY,CACpC,CACT,CAAC,GACD,IAAI,EACR9D,KAAA,CAAC7B,OAAO;MAACiE,QAAQ;MAAAnC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACfN,KAAA,CAAC7B,OAAO,CAACoC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACbN,KAAA,CAAC1B,gBAAgB;MACfyD,EAAE,EAAC,kBAAkB;MACrBI,cAAc,EAAC,kBAAkB;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAClC,CACa,CACT,CAAC,EACVN,KAAA,CAAC5B,OAAO;MAAA6B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACL,IAAI,CAACM,KAAK,CAACmD,iBAAiB,GAC3B/D,KAAA,CAACf,eAAe,EAAA+E,QAAA,KAAK,IAAI,CAACpD,KAAK,CAACmD,iBAAiB;MAAA9D,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAAC,GACnD,IACG,CACI,CAAC,EACf,IAAI,CAACQ,KAAK,CAACC,QAAQ,iBAClBhD,YAAY,CACViC,KAAA,CAAChB,OAAO;MACNiF,QAAQ,EAAE,IAAI,CAACrD,KAAK,CAACqD,QAAS;MAC9BC,sBAAsB;MACtBC,KAAK,EACHnE,KAAA,CAAAvC,KAAA,CAAAuF,QAAA,QACEhD,KAAA,CAAClC,IAAI;QAACsG,EAAE,EAAC,eAAe;QAACpC,SAAS,EAAC,MAAM;QAAA/B,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GACvCN,KAAA,CAAClB,IAAI;QACHuF,IAAI,EAAEnF,OAAQ;QACd,cAAY,IAAI,CAAC0B,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACC,IAAI,CAAE;QACzD2C,SAAS,EAAC,kBAAkB;QAC5BsC,IAAI,EAAC,MAAM;QACX1E,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACS,IAAI,CAACC,aAAa,CAAClC,QAAQ,CAACC,IAAI,CAAE;QAAAY,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACrD,CACG,CACN,CACH;MAAAL,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACF,CAAC,EACFiE,QAAQ,CAACC,cAAc,CAAC,SAAS,CACnC,CACO,CAAC,GACV,IAAI;EACV;AACF;AAtQE;AACF;AACA;AACA;AACA;AAJEC,eAAA,CADI/D,mBAAmB,eAMJ;EACjB/B,qBAAqB,EAAEhB,SAAS,CAAC+G,IAAI,CAACC,UAAU;EAChDjG,oBAAoB,EAAEf,SAAS,CAAC+G,IAAI,CAACC,UAAU;EAC/C/F,UAAU,EAAEjB,SAAS,CAAC+G,IAAI,CAACC;AAC7B,CAAC;AA+PH,eAAe9G,OAAO,CACpBW,UAAU,EACVZ,OAAO,CACL,CAACkD,KAAK,EAAEF,KAAK,MAAM;EACjBtB,kBAAkB,EAAEwB,KAAK,CAACvB,OAAO,CAACqF,kBAAkB;EACpDX,QAAQ,EAAErD,KAAK,CAACiE,QAAQ,CAACZ,QAAQ;EACjCF,iBAAiB,EAAEjD,KAAK,CAACgE,aAAa,CAACC,iBAAiB;EACxDlB,aAAa,EAAE/C,KAAK,CAACvB,OAAO,CAACyF;AAC/B,CAAC,CAAC,EACF;EAAErG,qBAAqB;EAAED,oBAAoB;EAAEE;AAAW,CAC5D,CACF,CAAC,CAAC8B,mBAAmB,CAAC","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"Upgrade Plone Site","defaultMessage":"Upgrade Plone Site"},{"id":"Your site is up to date.","defaultMessage":"Your site is up to date."},{"id":"Dry run selected, transaction aborted.","defaultMessage":"Dry run selected, transaction aborted."},{"id":"There was an error with the upgrade.","defaultMessage":"There was an error with the upgrade."},{"id":"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.","defaultMessage":"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide."},{"id":"Configuration Versions","defaultMessage":"Configuration Versions"},{"id":"The site configuration is outdated and needs to be upgraded.","defaultMessage":"The site configuration is outdated and needs to be upgraded."},{"id":"Current active configuration","defaultMessage":"Current active configuration"},{"id":"Latest available configuration","defaultMessage":"Latest available configuration"},{"id":"Upgrade Steps","defaultMessage":"Upgrade Steps"},{"id":"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.","defaultMessage":"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient."},{"id":"Please ensure you have a backup of your site before performing the upgrade.","defaultMessage":"Please ensure you have a backup of your site before performing the upgrade."},{"id":"Upgrade","defaultMessage":"Upgrade"},{"id":"Upgrade Report","defaultMessage":"Upgrade Report"},{"id":"Version Overview","defaultMessage":"Version Overview"}]}},"sourceType":"module","externalDependencies":[]}