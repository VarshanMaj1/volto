{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Block/DefaultView.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Container, Segment, Grid, Label } from 'semantic-ui-react';\nimport ErrorBoundary from '@plone/volto/components/theme/Error/ErrorBoundary';\nimport { getWidget } from '@plone/volto/helpers/Widget/utils';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  },\n  invalidBlock: {\n    \"id\": \"Invalid Block\",\n    \"defaultMessage\": \"Invalid block - Will be removed on saving\"\n  }\n});\nconst DefaultBlockView = props => {\n  _s();\n  var _blocksConfig$data$T;\n  const {\n    data,\n    block\n  } = props;\n  const intl = useIntl();\n  const {\n    views\n  } = config.widgets;\n  const {\n    blocksConfig = config.blocks.blocksConfig\n  } = props;\n  if (!data) return __jsx(\"div\", {\n    key: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }\n  }, intl.formatMessage(messages.invalidBlock));\n  // Compatibility with RenderBlocks non-view\n\n  const blockSchema = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$data$T = blocksConfig[data['@type']]) === null || _blocksConfig$data$T === void 0 ? void 0 : _blocksConfig$data$T.blockSchema;\n  const schema = typeof blockSchema === 'function' ? blockSchema(_objectSpread(_objectSpread({}, props), {}, {\n    intl\n  })) : blockSchema;\n  const fieldsets = (schema === null || schema === void 0 ? void 0 : schema.fieldsets) || [];\n  return schema ? __jsx(Container, {\n    className: \"page-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, fieldsets === null || fieldsets === void 0 ? void 0 : fieldsets.map(fs => {\n    var _fs$fields;\n    return __jsx(\"div\", {\n      className: \"fieldset\",\n      key: fs.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, fs.id !== 'default' && __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 37\n      }\n    }, fs.title), (_fs$fields = fs.fields) === null || _fs$fields === void 0 ? void 0 : _fs$fields.map((f, key) => {\n      let field = _objectSpread(_objectSpread({}, schema === null || schema === void 0 ? void 0 : schema.properties[f]), {}, {\n        id: f,\n        widget: getWidget(f, schema === null || schema === void 0 ? void 0 : schema.properties[f])\n      });\n      let Widget = views === null || views === void 0 ? void 0 : views.getWidget(field);\n      return f !== 'title' ? __jsx(Grid, {\n        celled: \"internally\",\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, __jsx(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }\n      }, __jsx(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, field.title, \":\")), __jsx(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }\n      }, __jsx(Segment, {\n        basic: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }, __jsx(ErrorBoundary, {\n        name: f,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 23\n        }\n      }, __jsx(Widget, {\n        value: data[f],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }\n      }))))) : __jsx(Widget, {\n        key: key,\n        value: data[f],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      });\n    }));\n  })) : __jsx(\"div\", {\n    key: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, intl.formatMessage(messages.unknownBlock, {\n    block: data['@type']\n  }));\n};\n_s(DefaultBlockView, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n_c = DefaultBlockView;\nexport default DefaultBlockView;\nvar _c;\n$RefreshReg$(_c, \"DefaultBlockView\");","map":{"version":3,"names":["React","defineMessages","useIntl","Container","Segment","Grid","Label","ErrorBoundary","getWidget","config","messages","unknownBlock","invalidBlock","DefaultBlockView","props","_s","_blocksConfig$data$T","data","block","intl","views","widgets","blocksConfig","blocks","__jsx","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMessage","blockSchema","schema","_objectSpread","fieldsets","className","map","fs","_fs$fields","id","title","fields","f","field","properties","widget","Widget","celled","Row","basic","name","value","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Block/DefaultView.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Container, Segment, Grid, Label } from 'semantic-ui-react';\nimport ErrorBoundary from '@plone/volto/components/theme/Error/ErrorBoundary';\nimport { getWidget } from '@plone/volto/helpers/Widget/utils';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n  invalidBlock: {\n    id: 'Invalid Block',\n    defaultMessage: 'Invalid block - Will be removed on saving',\n  },\n});\n\nconst DefaultBlockView = (props) => {\n  const { data, block } = props;\n  const intl = useIntl();\n  const { views } = config.widgets;\n  const { blocksConfig = config.blocks.blocksConfig } = props;\n  if (!data)\n    return <div key={block}>{intl.formatMessage(messages.invalidBlock)}</div>;\n  // Compatibility with RenderBlocks non-view\n\n  const blockSchema = blocksConfig?.[data['@type']]?.blockSchema;\n  const schema =\n    typeof blockSchema === 'function'\n      ? blockSchema({ ...props, intl })\n      : blockSchema;\n  const fieldsets = schema?.fieldsets || [];\n\n  return schema ? (\n    <Container className=\"page-block\">\n      {fieldsets?.map((fs) => {\n        return (\n          <div className=\"fieldset\" key={fs.id}>\n            {fs.id !== 'default' && <h2>{fs.title}</h2>}\n            {fs.fields?.map((f, key) => {\n              let field = {\n                ...schema?.properties[f],\n                id: f,\n                widget: getWidget(f, schema?.properties[f]),\n              };\n              let Widget = views?.getWidget(field);\n              return f !== 'title' ? (\n                <Grid celled=\"internally\" key={key}>\n                  <Grid.Row>\n                    <Label>{field.title}:</Label>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Segment basic>\n                      <ErrorBoundary name={f}>\n                        <Widget value={data[f]} />\n                      </ErrorBoundary>\n                    </Segment>\n                  </Grid.Row>\n                </Grid>\n              ) : (\n                <Widget key={key} value={data[f]} />\n              );\n            })}\n          </div>\n        );\n      })}\n    </Container>\n  ) : (\n    <div key={block}>\n      {intl.formatMessage(messages.unknownBlock, {\n        block: data['@type'],\n      })}\n    </div>\n  );\n};\n\nexport default DefaultBlockView;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"},{"id":"Invalid Block","defaultMessage":"Invalid block - Will be removed on saving"}]}},"sourceType":"module","externalDependencies":[]}