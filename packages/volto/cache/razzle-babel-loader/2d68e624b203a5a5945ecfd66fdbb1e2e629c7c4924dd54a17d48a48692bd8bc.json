{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Controlpanel.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { tryParseJSON, extractInvariantErrors } from '@plone/volto/helpers/FormValidation/FormValidation';\nimport { createPortal } from 'react-dom';\nimport { Button, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport { updateControlpanel, getControlpanel } from '@plone/volto/actions/controlpanels/controlpanels';\nimport config from '@plone/volto/registry';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  }\n});\n\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nclass Controlpanel extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      isClient: false,\n      error: null\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.error) {\n      var _nextProps$updateRequ, _nextProps$updateRequ2, _nextProps$updateRequ3, _nextProps$updateRequ4, _nextProps$updateRequ5, _nextProps$updateRequ6, _nextProps$updateRequ7, _nextProps$updateRequ8, _nextProps$updateRequ9, _DOMParser$parseFromS, _DOMParser$parseFromS2, _DOMParser$parseFromS3;\n      const message = ((_nextProps$updateRequ = nextProps.updateRequest.error) === null || _nextProps$updateRequ === void 0 ? void 0 : (_nextProps$updateRequ2 = _nextProps$updateRequ.response) === null || _nextProps$updateRequ2 === void 0 ? void 0 : (_nextProps$updateRequ3 = _nextProps$updateRequ2.body) === null || _nextProps$updateRequ3 === void 0 ? void 0 : (_nextProps$updateRequ4 = _nextProps$updateRequ3.error) === null || _nextProps$updateRequ4 === void 0 ? void 0 : _nextProps$updateRequ4.message) || ((_nextProps$updateRequ5 = nextProps.updateRequest.error) === null || _nextProps$updateRequ5 === void 0 ? void 0 : (_nextProps$updateRequ6 = _nextProps$updateRequ5.response) === null || _nextProps$updateRequ6 === void 0 ? void 0 : (_nextProps$updateRequ7 = _nextProps$updateRequ6.body) === null || _nextProps$updateRequ7 === void 0 ? void 0 : _nextProps$updateRequ7.message) || ((_nextProps$updateRequ8 = nextProps.updateRequest.error) === null || _nextProps$updateRequ8 === void 0 ? void 0 : (_nextProps$updateRequ9 = _nextProps$updateRequ8.response) === null || _nextProps$updateRequ9 === void 0 ? void 0 : _nextProps$updateRequ9.text) || '';\n      const error = ((_DOMParser$parseFromS = new DOMParser().parseFromString(message, 'text/html')) === null || _DOMParser$parseFromS === void 0 ? void 0 : (_DOMParser$parseFromS2 = _DOMParser$parseFromS.all) === null || _DOMParser$parseFromS2 === void 0 ? void 0 : (_DOMParser$parseFromS3 = _DOMParser$parseFromS2[0]) === null || _DOMParser$parseFromS3 === void 0 ? void 0 : _DOMParser$parseFromS3.textContent) || message;\n      const errorsList = tryParseJSON(error);\n      let invariantErrors = [];\n      if (Array.isArray(errorsList)) {\n        invariantErrors = extractInvariantErrors(errorsList);\n      }\n      this.setState({\n        error: error\n      });\n      if (invariantErrors.length > 0) {\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.error),\n          content: invariantErrors.join(' - '),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      filterControlPanelsSchema\n    } = config.settings;\n    if (this.props.controlpanel) {\n      return __jsx(\"div\", {\n        id: \"page-controlpanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }\n      }, __jsx(Helmet, {\n        title: this.props.controlpanel.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        ref: this.form,\n        title: this.props.controlpanel.title,\n        schema: filterControlPanelsSchema(this.props.controlpanel),\n        formData: this.props.controlpanel.data,\n        requestError: this.state.error,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        hideActions: true,\n        loading: this.props.updateRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      })), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          disabled: this.props.updateRequest.loading,\n          loading: this.props.updateRequest.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 23\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }\n      }), document.getElementById('toolbar')));\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 12\n      }\n    });\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(Controlpanel, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  updateRequest: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  }),\n  pathname: PropTypes.string.isRequired\n});\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n_defineProperty(Controlpanel, \"defaultProps\", {\n  controlpanel: null\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  controlpanel: state.controlpanels.controlpanel,\n  updateRequest: state.controlpanels.update,\n  id: props.match.params.id,\n  pathname: props.location.pathname\n}), {\n  updateControlpanel,\n  getControlpanel\n}), withRouter)(Controlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","withRouter","Helmet","tryParseJSON","extractInvariantErrors","createPortal","Button","Container","defineMessages","injectIntl","toast","Icon","Toolbar","Toast","Form","updateControlpanel","getControlpanel","config","saveSVG","clearSVG","messages","changesSaved","back","save","cancel","info","error","Controlpanel","constructor","props","_defineProperty","createRef","onCancel","bind","onSubmit","state","isClient","componentDidMount","id","setState","UNSAFE_componentWillReceiveProps","nextProps","updateRequest","loading","_nextProps$updateRequ","_nextProps$updateRequ2","_nextProps$updateRequ3","_nextProps$updateRequ4","_nextProps$updateRequ5","_nextProps$updateRequ6","_nextProps$updateRequ7","_nextProps$updateRequ8","_nextProps$updateRequ9","_DOMParser$parseFromS","_DOMParser$parseFromS2","_DOMParser$parseFromS3","message","response","body","text","DOMParser","parseFromString","all","textContent","errorsList","invariantErrors","Array","isArray","length","__jsx","title","intl","formatMessage","content","join","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","loaded","data","controlpanel","history","goBack","render","filterControlPanelsSchema","settings","ref","form","schema","formData","requestError","hideActions","pathname","hideDefaultViewButtons","inner","Fragment","className","onClick","current","disabled","name","size","document","getElementById","func","isRequired","string","shape","bool","object","controlpanels","update","match","params","location"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Controlpanels/Controlpanel.jsx"],"sourcesContent":["/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport {\n  tryParseJSON,\n  extractInvariantErrors,\n} from '@plone/volto/helpers/FormValidation/FormValidation';\nimport { createPortal } from 'react-dom';\nimport { Button, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport { Form } from '@plone/volto/components/manage/Form';\nimport {\n  updateControlpanel,\n  getControlpanel,\n} from '@plone/volto/actions/controlpanels/controlpanels';\n\nimport config from '@plone/volto/registry';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nclass Controlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false, error: null };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.error) {\n      const message =\n        nextProps.updateRequest.error?.response?.body?.error?.message ||\n        nextProps.updateRequest.error?.response?.body?.message ||\n        nextProps.updateRequest.error?.response?.text ||\n        '';\n\n      const error =\n        new DOMParser().parseFromString(message, 'text/html')?.all?.[0]\n          ?.textContent || message;\n\n      const errorsList = tryParseJSON(error);\n      let invariantErrors = [];\n      if (Array.isArray(errorsList)) {\n        invariantErrors = extractInvariantErrors(errorsList);\n      }\n\n      this.setState({ error: error });\n\n      if (invariantErrors.length > 0) {\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(messages.error)}\n            content={invariantErrors.join(' - ')}\n          />,\n        );\n      }\n    }\n\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { filterControlPanelsSchema } = config.settings;\n\n    if (this.props.controlpanel) {\n      return (\n        <div id=\"page-controlpanel\">\n          <Helmet title={this.props.controlpanel.title} />\n          <Container>\n            <Form\n              ref={this.form}\n              title={this.props.controlpanel.title}\n              schema={filterControlPanelsSchema(this.props.controlpanel)}\n              formData={this.props.controlpanel.data}\n              requestError={this.state.error}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              hideActions\n              loading={this.props.updateRequest.loading}\n            />\n          </Container>\n          {this.state.isClient &&\n            createPortal(\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.updateRequest.loading}\n                      loading={this.props.updateRequest.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />,\n              document.getElementById('toolbar'),\n            )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanel: state.controlpanels.controlpanel,\n      updateRequest: state.controlpanels.update,\n      id: props.match.params.id,\n      pathname: props.location.pathname,\n    }),\n    { updateControlpanel, getControlpanel },\n  ),\n  withRouter,\n)(Controlpanel);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"},{"id":"Error","defaultMessage":"Error"}]}},"sourceType":"module","externalDependencies":[]}