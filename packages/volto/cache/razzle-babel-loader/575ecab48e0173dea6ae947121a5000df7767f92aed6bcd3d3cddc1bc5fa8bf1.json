{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"expand\"],\n  _excluded2 = [\"request\", \"type\", \"mode\"];\n/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport compact from 'lodash/compact';\nimport flatten from 'lodash/flatten';\nimport union from 'lodash/union';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\nimport config from '@plone/volto/registry';\nimport { GET_CONTENT, LOGIN, RESET_APIERROR, SET_APIERROR } from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { updateUploadedFiles } from '@plone/volto/actions/content/content';\nimport { toGettextLang, toReactIntlLang } from '@plone/volto/helpers/Utils/Utils';\nimport { getCookieOptions } from '@plone/volto/helpers/Cookies/cookies';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type, isAnonymous) {\n  const {\n    settings\n  } = config;\n  const {\n    apiExpanders = []\n  } = settings;\n  const _qs$parseUrl = qs.parseUrl(path, {\n      decode: false\n    }),\n    {\n      url,\n      query: {\n        expand\n      }\n    } = _qs$parseUrl,\n    query = _objectWithoutProperties(_qs$parseUrl.query, _excluded);\n  const expandersFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).map(expand => expand[type]);\n  const expandMerge = compact(union([expand, ...flatten(expandersFromConfig)])).filter(item => !(item === 'types' && isAnonymous)); // Remove types expander if isAnonymous\n\n  const stringifiedExpand = qs.stringify({\n    expand: expandMerge\n  }, {\n    arrayFormat: 'comma',\n    encode: false\n  });\n  const querystringFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).reduce((acc, expand) => {\n    let querystring = expand === null || expand === void 0 ? void 0 : expand['querystring'];\n    // The querystring accepts being a function to be able to take other\n    // config parameters\n    if (typeof querystring === 'function') {\n      querystring = querystring(config);\n    }\n    return _objectSpread(_objectSpread({}, acc), querystring);\n  }, {});\n  const queryMerge = _objectSpread(_objectSpread({}, query), querystringFromConfig);\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false\n  });\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nconst apiMiddlewareFactory = api => ({\n  dispatch,\n  getState\n}) => next => action => {\n  const {\n    settings\n  } = config;\n  const token = getState().userSession.token;\n  let uploadedFiles = getState().content.uploadedFiles;\n  let isAnonymous = true;\n  if (token) {\n    const tokenExpiration = jwtDecode(token).exp;\n    const currentTime = new Date().getTime() / 1000;\n    isAnonymous = !token || currentTime > tokenExpiration;\n  }\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n  const {\n      request,\n      type,\n      mode = 'parallel'\n    } = action,\n    rest = _objectWithoutProperties(action, _excluded2);\n  const {\n    subrequest\n  } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n  if (!request) {\n    return next(action);\n  }\n  next(_objectSpread(_objectSpread({}, rest), {}, {\n    type: `${type}_PENDING`\n  }));\n  if (socket) {\n    actionPromise = Array.isArray(request) ? Promise.all(request.map(item => sendOnSocket(_objectSpread(_objectSpread({}, item), {}, {\n      path: addExpandersToPath(item.path, type, isAnonymous),\n      id: type\n    })))) : sendOnSocket(_objectSpread(_objectSpread({}, request), {}, {\n      path: addExpandersToPath(request.path, type, isAnonymous),\n      id: type\n    }));\n  } else {\n    actionPromise = Array.isArray(request) ? mode === 'serial' ? request.reduce((prevPromise, item) => {\n      return prevPromise.then(acc => {\n        return api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n          data: item.data,\n          type: item.type,\n          headers: item.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type),\n          attach: item.attach\n        }).then(reqres => {\n          if (action.subrequest === 'batch-upload') {\n            dispatch(updateUploadedFiles(++uploadedFiles));\n          }\n          return [...acc, reqres];\n        });\n      });\n    }, Promise.resolve([])) : Promise.all(request.map(item => api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n      data: item.data,\n      type: item.type,\n      headers: item.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type),\n      attach: item.attach\n    }))) : api[request.op](addExpandersToPath(request.path, type, isAnonymous), {\n      data: request.data,\n      type: request.type,\n      headers: request.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type),\n      attach: request.attach\n    });\n    actionPromise.then(result => {\n      if (uploadedFiles !== 0) {\n        dispatch(updateUploadedFiles(0));\n      }\n      const {\n        settings\n      } = config;\n      const state = getState();\n      if (state.apierror.connectionRefused) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          type: RESET_APIERROR\n        }));\n      }\n      if (type === GET_CONTENT) {\n        var _result$language;\n        const lang = result === null || result === void 0 ? void 0 : (_result$language = result.language) === null || _result$language === void 0 ? void 0 : _result$language.token;\n        if (lang && state.intl.locale !== toReactIntlLang(lang) && !subrequest && config.settings.supportedLanguages.includes(lang)) {\n          const langFileName = toGettextLang(lang);\n          import(/* @vite-ignore */'@root/../locales/' + langFileName + '.json').then(locale => {\n            dispatch(changeLanguage(lang, locale.default));\n          });\n        }\n      }\n      if (type === LOGIN && settings.websockets) {\n        const cookies = new Cookies();\n        cookies.set('auth_token', result.token, getCookieOptions({\n          expires: new Date(jwtDecode(result.token).exp * 1000)\n        }));\n        api.get('/@wstoken').then(res => {\n          socket = new WebSocket(`${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${res.token}`);\n          socket.onmessage = message => {\n            const packet = JSON.parse(message.data);\n            if (packet.error) {\n              dispatch({\n                type: `${packet.id}_FAIL`,\n                error: packet.error\n              });\n            } else {\n              dispatch({\n                type: `${packet.id}_SUCCESS`,\n                result: JSON.parse(packet.data)\n              });\n            }\n          };\n        });\n      }\n      try {\n        return next(_objectSpread(_objectSpread({}, rest), {}, {\n          result,\n          type: `${type}_SUCCESS`\n        }));\n      } catch (error) {\n        // There was an exception while processing reducers or downstream middleware.\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error: {\n            status: 500,\n            error\n          },\n          type: `${type}_FAIL`\n        }));\n        // Rethrow the original exception on the client side only,\n        // so it doesn't fall through to express on the server.\n        if (__CLIENT__) throw error;\n      }\n    }, error => {\n      // Only SSR can set ECONNREFUSED\n      if (error.code === 'ECONNREFUSED') {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: error.code,\n          connectionRefused: true,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Response error is marked crossDomain if CORS error happen\n      else if (error.crossDomain) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: 'CORSERROR',\n          connectionRefused: false,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Check for actions who can raise api errors\n      if (settings.actions_raising_api_errors.includes(action.type)) {\n        var _error$response, _error$response2;\n        // Gateway timeout\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusCode) === 504) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 301) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 408) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Unauthorized\n        else if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusCode) === 401) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.response,\n            message: error.response.body.message,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n      }\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        error,\n        type: `${type}_FAIL`\n      }));\n    });\n  }\n  return actionPromise;\n};\nexport default apiMiddlewareFactory;","map":{"version":3,"names":["Cookies","jwtDecode","compact","flatten","union","matchPath","qs","config","GET_CONTENT","LOGIN","RESET_APIERROR","SET_APIERROR","changeLanguage","updateUploadedFiles","toGettextLang","toReactIntlLang","getCookieOptions","socket","addExpandersToPath","path","type","isAnonymous","settings","apiExpanders","_qs$parseUrl","parseUrl","decode","url","query","expand","_objectWithoutProperties","_excluded","expandersFromConfig","filter","match","map","expandMerge","item","stringifiedExpand","stringify","arrayFormat","encode","querystringFromConfig","reduce","acc","querystring","_objectSpread","queryMerge","stringifiedQuery","sendOnSocket","request","Promise","resolve","reject","readyState","CONNECTING","addEventListener","OPEN","then","send","JSON","apiMiddlewareFactory","api","dispatch","getState","next","action","token","userSession","uploadedFiles","content","tokenExpiration","exp","currentTime","Date","getTime","mode","rest","_excluded2","subrequest","actionPromise","Array","isArray","all","id","prevPromise","op","data","headers","params","checkUrl","actions_raising_api_errors","includes","attach","reqres","result","state","apierror","connectionRefused","_result$language","lang","language","intl","locale","supportedLanguages","langFileName","default","websockets","cookies","set","expires","get","res","WebSocket","apiPath","replace","onmessage","message","packet","parse","error","status","__CLIENT__","code","statusCode","crossDomain","_error$response","_error$response2","response","body"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/middleware/api.js"],"sourcesContent":["/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport compact from 'lodash/compact';\nimport flatten from 'lodash/flatten';\nimport union from 'lodash/union';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\n\nimport config from '@plone/volto/registry';\n\nimport {\n  GET_CONTENT,\n  LOGIN,\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport { updateUploadedFiles } from '@plone/volto/actions/content/content';\nimport {\n  toGettextLang,\n  toReactIntlLang,\n} from '@plone/volto/helpers/Utils/Utils';\nimport { getCookieOptions } from '@plone/volto/helpers/Cookies/cookies';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type, isAnonymous) {\n  const { settings } = config;\n  const { apiExpanders = [] } = settings;\n\n  const {\n    url,\n    query: { expand, ...query },\n  } = qs.parseUrl(path, { decode: false });\n\n  const expandersFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .map((expand) => expand[type]);\n\n  const expandMerge = compact(\n    union([expand, ...flatten(expandersFromConfig)]),\n  ).filter((item) => !(item === 'types' && isAnonymous)); // Remove types expander if isAnonymous\n\n  const stringifiedExpand = qs.stringify(\n    { expand: expandMerge },\n    {\n      arrayFormat: 'comma',\n      encode: false,\n    },\n  );\n\n  const querystringFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .reduce((acc, expand) => {\n      let querystring = expand?.['querystring'];\n      // The querystring accepts being a function to be able to take other\n      // config parameters\n      if (typeof querystring === 'function') {\n        querystring = querystring(config);\n      }\n      return { ...acc, ...querystring };\n    }, {});\n\n  const queryMerge = { ...query, ...querystringFromConfig };\n\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false,\n  });\n\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nconst apiMiddlewareFactory =\n  (api) =>\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    const { settings } = config;\n\n    const token = getState().userSession.token;\n    let uploadedFiles = getState().content.uploadedFiles;\n    let isAnonymous = true;\n    if (token) {\n      const tokenExpiration = jwtDecode(token).exp;\n      const currentTime = new Date().getTime() / 1000;\n      isAnonymous = !token || currentTime > tokenExpiration;\n    }\n\n    if (typeof action === 'function') {\n      return action(dispatch, getState);\n    }\n\n    const { request, type, mode = 'parallel', ...rest } = action;\n    const { subrequest } = action; // We want subrequest remains in `...rest` above\n\n    let actionPromise;\n\n    if (!request) {\n      return next(action);\n    }\n\n    next({ ...rest, type: `${type}_PENDING` });\n    if (socket) {\n      actionPromise = Array.isArray(request)\n        ? Promise.all(\n            request.map((item) =>\n              sendOnSocket({\n                ...item,\n                path: addExpandersToPath(item.path, type, isAnonymous),\n                id: type,\n              }),\n            ),\n          )\n        : sendOnSocket({\n            ...request,\n            path: addExpandersToPath(request.path, type, isAnonymous),\n            id: type,\n          });\n    } else {\n      actionPromise = Array.isArray(request)\n        ? mode === 'serial'\n          ? request.reduce((prevPromise, item) => {\n              return prevPromise.then((acc) => {\n                return api[item.op](\n                  addExpandersToPath(item.path, type, isAnonymous),\n                  {\n                    data: item.data,\n                    type: item.type,\n                    headers: item.headers,\n                    params: request.params,\n                    checkUrl: settings.actions_raising_api_errors.includes(\n                      action.type,\n                    ),\n                    attach: item.attach,\n                  },\n                ).then((reqres) => {\n                  if (action.subrequest === 'batch-upload') {\n                    dispatch(updateUploadedFiles(++uploadedFiles));\n                  }\n                  return [...acc, reqres];\n                });\n              });\n            }, Promise.resolve([]))\n          : Promise.all(\n              request.map((item) =>\n                api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n                  data: item.data,\n                  type: item.type,\n                  headers: item.headers,\n                  params: request.params,\n                  checkUrl: settings.actions_raising_api_errors.includes(\n                    action.type,\n                  ),\n                  attach: item.attach,\n                }),\n              ),\n            )\n        : api[request.op](addExpandersToPath(request.path, type, isAnonymous), {\n            data: request.data,\n            type: request.type,\n            headers: request.headers,\n            params: request.params,\n            checkUrl: settings.actions_raising_api_errors.includes(action.type),\n            attach: request.attach,\n          });\n      actionPromise.then(\n        (result) => {\n          if (uploadedFiles !== 0) {\n            dispatch(updateUploadedFiles(0));\n          }\n\n          const { settings } = config;\n          const state = getState();\n          if (state.apierror.connectionRefused) {\n            next({\n              ...rest,\n              type: RESET_APIERROR,\n            });\n          }\n          if (type === GET_CONTENT) {\n            const lang = result?.language?.token;\n            if (\n              lang &&\n              state.intl.locale !== toReactIntlLang(lang) &&\n              !subrequest &&\n              config.settings.supportedLanguages.includes(lang)\n            ) {\n              const langFileName = toGettextLang(lang);\n              import(\n                /* @vite-ignore */ '@root/../locales/' + langFileName + '.json'\n              ).then((locale) => {\n                dispatch(changeLanguage(lang, locale.default));\n              });\n            }\n          }\n\n          if (type === LOGIN && settings.websockets) {\n            const cookies = new Cookies();\n            cookies.set(\n              'auth_token',\n              result.token,\n              getCookieOptions({\n                expires: new Date(jwtDecode(result.token).exp * 1000),\n              }),\n            );\n            api.get('/@wstoken').then((res) => {\n              socket = new WebSocket(\n                `${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${\n                  res.token\n                }`,\n              );\n              socket.onmessage = (message) => {\n                const packet = JSON.parse(message.data);\n                if (packet.error) {\n                  dispatch({\n                    type: `${packet.id}_FAIL`,\n                    error: packet.error,\n                  });\n                } else {\n                  dispatch({\n                    type: `${packet.id}_SUCCESS`,\n                    result: JSON.parse(packet.data),\n                  });\n                }\n              };\n            });\n          }\n          try {\n            return next({ ...rest, result, type: `${type}_SUCCESS` });\n          } catch (error) {\n            // There was an exception while processing reducers or downstream middleware.\n            next({\n              ...rest,\n              error: { status: 500, error },\n              type: `${type}_FAIL`,\n            });\n            // Rethrow the original exception on the client side only,\n            // so it doesn't fall through to express on the server.\n            if (__CLIENT__) throw error;\n          }\n        },\n        (error) => {\n          // Only SSR can set ECONNREFUSED\n          if (error.code === 'ECONNREFUSED') {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: true,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Response error is marked crossDomain if CORS error happen\n          else if (error.crossDomain) {\n            next({\n              ...rest,\n              error,\n              statusCode: 'CORSERROR',\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Check for actions who can raise api errors\n          if (settings.actions_raising_api_errors.includes(action.type)) {\n            // Gateway timeout\n            if (error?.response?.statusCode === 504) {\n              next({\n                ...rest,\n                error,\n                statusCode: error.code,\n                connectionRefused: true,\n                type: SET_APIERROR,\n              });\n            }\n\n            // Redirect\n            else if (error?.code === 301) {\n              next({\n                ...rest,\n                error,\n                statusCode: error.code,\n                connectionRefused: false,\n                type: SET_APIERROR,\n              });\n            }\n\n            // Redirect\n            else if (error?.code === 408) {\n              next({\n                ...rest,\n                error,\n                statusCode: error.code,\n                connectionRefused: false,\n                type: SET_APIERROR,\n              });\n            }\n\n            // Unauthorized\n            else if (error?.response?.statusCode === 401) {\n              next({\n                ...rest,\n                error,\n                statusCode: error.response,\n                message: error.response.body.message,\n                connectionRefused: false,\n                type: SET_APIERROR,\n              });\n            }\n          }\n          return next({ ...rest, error, type: `${type}_FAIL` });\n        },\n      );\n    }\n\n    return actionPromise;\n  };\n\nexport default apiMiddlewareFactory;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}