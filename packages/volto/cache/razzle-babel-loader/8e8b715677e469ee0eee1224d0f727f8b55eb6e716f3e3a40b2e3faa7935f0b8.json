{"ast":null,"code":"import _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport { GET_VOCABULARY, GET_VOCABULARY_TOKEN_TITLE } from '@plone/volto/constants/ActionTypes';\nconst initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies(state = initialState, action = {}) {\n  var _vocabState$subreques, _vocabState$action$su, _vocabState$action$su2;\n  const vocabState = state[action.vocabulary] || {};\n  const subrequestState = action.subrequest ? ((_vocabState$subreques = vocabState.subrequests) === null || _vocabState$subreques === void 0 ? void 0 : _vocabState$subreques[action.subrequest]) || {} : {};\n  switch (action.type) {\n    case `${GET_VOCABULARY}_PENDING`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_PENDING`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, {\n            [action.subrequest]: _objectSpread(_objectSpread({}, subrequestState || {\n              data: null\n            }), {}, {\n              loaded: (vocabState === null || vocabState === void 0 ? void 0 : (_vocabState$action$su = vocabState[action.subrequest]) === null || _vocabState$action$su === void 0 ? void 0 : _vocabState$action$su.loaded) || false,\n              loading: !!(((vocabState === null || vocabState === void 0 ? void 0 : (_vocabState$action$su2 = vocabState[action.subrequest]) === null || _vocabState$action$su2 === void 0 ? void 0 : _vocabState$action$su2.loading) || 0) + 1),\n              error: null\n            })\n          })\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          error: null,\n          loaded: vocabState.loaded || false,\n          loading: !!((vocabState.loading || 0) + 1)\n        })\n      });\n    case `${GET_VOCABULARY}_SUCCESS`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, {\n            [action.subrequest]: _objectSpread(_objectSpread({}, subrequestState), {}, {\n              error: null,\n              loaded: true,\n              loading: !!(subrequestState.loading - 1),\n              items: [...action.result.items.map(item => ({\n                label: item.title,\n                value: item.token\n              }))],\n              batching: action.result.batching,\n              itemsTotal: action.result.items_total\n            })\n          })\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          error: null,\n          loaded: true,\n          loading: !!(vocabState.loading - 1),\n          items: [...action.result.items.map(item => ({\n            label: item.title,\n            value: item.token\n          }))],\n          batching: action.result.batching,\n          itemsTotal: action.result.items_total\n        })\n      });\n    case `${GET_VOCABULARY}_FAIL`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_FAIL`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: {\n          subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, {\n            [action.subrequest]: {\n              error: action.error,\n              loaded: false,\n              loading: !!(subrequestState.loading - 1)\n            }\n          })\n        }\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: {\n          error: action.error,\n          loaded: false,\n          loading: !!(vocabState.loading - 1)\n        }\n      });\n    case `${GET_VOCABULARY_TOKEN_TITLE}_SUCCESS`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, {\n            [action.subrequest]: _objectSpread(_objectSpread(_objectSpread({}, subrequestState), {}, {\n              error: null,\n              loaded: true,\n              loading: !!(subrequestState.loading - 1)\n            }, action.token && {\n              [action.token]: action.result.items[0].title\n            }), action.tokens && {\n              items: [...action.result.items.map(item => ({\n                label: item.title,\n                value: item.token\n              }))]\n            })\n          })\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [action.vocabulary]: _objectSpread(_objectSpread({}, vocabState), {}, {\n          error: null,\n          loaded: true,\n          loading: !!(vocabState.loading - 1),\n          [action.token]: action.result.items[0].title\n        })\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_VOCABULARY","GET_VOCABULARY_TOKEN_TITLE","initialState","vocabularies","state","action","_vocabState$subreques","_vocabState$action$su","_vocabState$action$su2","vocabState","vocabulary","subrequestState","subrequest","subrequests","type","_objectSpread","data","loaded","loading","error","items","result","map","item","label","title","value","token","batching","itemsTotal","items_total","tokens"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/reducers/vocabularies/vocabularies.js"],"sourcesContent":["/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport {\n  GET_VOCABULARY,\n  GET_VOCABULARY_TOKEN_TITLE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies(state = initialState, action = {}) {\n  const vocabState = state[action.vocabulary] || {};\n  const subrequestState = action.subrequest\n    ? vocabState.subrequests?.[action.subrequest] || {}\n    : {};\n  switch (action.type) {\n    case `${GET_VOCABULARY}_PENDING`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  // We preserve here the previous items array to prevent the component\n                  // to rerender due to prop changes while the PENDING state is active,\n                  // this little trick allow us to use how react-select do things\n                  // internally. This has a very low consequences since in the SUCCESS\n                  // state the items are overwritten anyways.\n                  ...(subrequestState || {\n                    data: null,\n                  }),\n                  loaded: vocabState?.[action.subrequest]?.loaded || false,\n                  loading: !!(\n                    (vocabState?.[action.subrequest]?.loading || 0) + 1\n                  ),\n                  error: null,\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              // We preserve here the previous items array to prevent the component\n              // to rerender due to prop changes while the PENDING state is active,\n              // this little trick allow us to use how react-select do things\n              // internally. This has a very low consequences since in the SUCCESS\n              // state the items are overwritten anyways.\n              ...vocabState,\n              error: null,\n              loaded: vocabState.loaded || false,\n              loading: !!((vocabState.loading || 0) + 1),\n            },\n          };\n    case `${GET_VOCABULARY}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  ...subrequestState,\n                  error: null,\n                  loaded: true,\n                  loading: !!(subrequestState.loading - 1),\n                  items: [\n                    ...action.result.items.map((item) => ({\n                      label: item.title,\n                      value: item.token,\n                    })),\n                  ],\n                  batching: action.result.batching,\n                  itemsTotal: action.result.items_total,\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              error: null,\n              loaded: true,\n              loading: !!(vocabState.loading - 1),\n              items: [\n                ...action.result.items.map((item) => ({\n                  label: item.title,\n                  value: item.token,\n                })),\n              ],\n              batching: action.result.batching,\n              itemsTotal: action.result.items_total,\n            },\n          };\n    case `${GET_VOCABULARY}_FAIL`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  error: action.error,\n                  loaded: false,\n                  loading: !!(subrequestState.loading - 1),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              error: action.error,\n              loaded: false,\n              loading: !!(vocabState.loading - 1),\n            },\n          };\n    case `${GET_VOCABULARY_TOKEN_TITLE}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  ...subrequestState,\n                  error: null,\n                  loaded: true,\n                  loading: !!(subrequestState.loading - 1),\n                  ...(action.token && {\n                    [action.token]: action.result.items[0].title,\n                  }),\n                  ...(action.tokens && {\n                    items: [\n                      ...action.result.items.map((item) => ({\n                        label: item.title,\n                        value: item.token,\n                      })),\n                    ],\n                  }),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              error: null,\n              loaded: true,\n              loading: !!(vocabState.loading - 1),\n              [action.token]: action.result.items[0].title,\n            },\n          };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}