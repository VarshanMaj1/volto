{"ast":null,"code":"import _extends from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/varshanmaji/Projects/volto/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/BlockChooser/BlockChooser.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport useUser from '@plone/volto/hooks/user/useUser';\nimport PropTypes from 'prop-types';\nimport filter from 'lodash/filter';\nimport map from 'lodash/map';\nimport groupBy from 'lodash/groupBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { Accordion, Button } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport AnimateHeight from 'react-animate-height';\nimport config from '@plone/volto/registry';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport BlockChooserSearch from './BlockChooserSearch';\nimport { FormattedMessage } from 'react-intl';\nconst messages = defineMessages({\n  fold: {\n    \"id\": \"Fold\",\n    \"defaultMessage\": \"Fold\"\n  },\n  unfold: {\n    \"id\": \"Unfold\",\n    \"defaultMessage\": \"Unfold\"\n  }\n});\nconst BlockChooser = ({\n  currentBlock,\n  onInsertBlock,\n  onMutateBlock,\n  allowedBlocks,\n  showRestricted,\n  blocksConfig = config.blocks.blocksConfig,\n  blockChooserRef,\n  properties = {},\n  navRoot,\n  contentType\n}) => {\n  _s();\n  const intl = useIntl();\n  const user = useUser();\n  const hasAllowedBlocks = !isEmpty(allowedBlocks);\n  const filteredBlocksConfig = filter(blocksConfig, item => {\n    // Check if the block is well formed (has at least id and title)\n    const blockIsWellFormed = Boolean(item.title && item.id);\n    if (!blockIsWellFormed) {\n      return false;\n    }\n    if (showRestricted) {\n      if (hasAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return true;\n      }\n    } else {\n      if (hasAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        // Overload restricted as a function, so we can decide the availability of a block\n        // depending on this function, given properties (current present blocks) and the\n        // block being evaluated\n        return typeof item.restricted === 'function' ? !item.restricted({\n          properties,\n          block: item,\n          navRoot,\n          contentType,\n          user\n        }) : !item.restricted;\n      }\n    }\n  });\n  let blocksAvailable = {};\n  const mostUsedBlocks = filter(filteredBlocksConfig, item => item.mostUsed);\n  if (mostUsedBlocks) {\n    blocksAvailable.mostUsed = mostUsedBlocks;\n  }\n  const groupedBlocks = groupBy(filteredBlocksConfig, item => item.group);\n  blocksAvailable = _objectSpread(_objectSpread({}, blocksAvailable), groupedBlocks);\n  const groupBlocksOrder = filter(config.blocks.groupBlocksOrder, item => Object.keys(blocksAvailable).includes(item.id));\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  function handleClick(e, titleProps) {\n    const {\n      index\n    } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n    setActiveIndex(newIndex);\n  }\n  const [filterValue, setFilterValue] = React.useState('');\n  const getFormatMessage = message => intl.formatMessage({\n    id: message,\n    defaultMessage: message\n  });\n  function blocksAvailableFilter(blocks) {\n    return blocks.filter(block => {\n      var _filterVariations;\n      return getFormatMessage(block.title).toLowerCase().includes(filterValue.toLowerCase()) || ((_filterVariations = filterVariations(block)) === null || _filterVariations === void 0 ? void 0 : _filterVariations.length);\n    });\n  }\n  function filterVariations(block) {\n    var _block$variations;\n    return (_block$variations = block.variations) === null || _block$variations === void 0 ? void 0 : _block$variations.filter(variation => getFormatMessage(variation.title).toLowerCase().includes(filterValue.toLowerCase()) && !variation.title.toLowerCase().includes('default'));\n  }\n  const ButtonGroup = ({\n    block\n  }) => {\n    var _variations$;\n    const variations = filterVariations(block);\n    return __jsx(Button.Group, {\n      key: block.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      icon: true,\n      basic: true,\n      className: block.id,\n      onClick: e => {\n        onInsertBlock ? onInsertBlock(currentBlock, {\n          '@type': block.id\n        }) : onMutateBlock(currentBlock, {\n          '@type': block.id\n        });\n        e.stopPropagation();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      name: block.icon,\n      size: \"36px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }), getFormatMessage(block.title), filterValue && (variations === null || variations === void 0 ? void 0 : (_variations$ = variations[0]) === null || _variations$ === void 0 ? void 0 : _variations$.title) && __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, getFormatMessage(variations[0].title))));\n  };\n  return __jsx(\"div\", {\n    className: `blocks-chooser${config.experimental.addBlockButton.enabled ? ' new-add-block' : ''}`,\n    ref: blockChooserRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, __jsx(BlockChooserSearch, {\n    onChange: value => setFilterValue(value),\n    searchValue: filterValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), filterValue ? __jsx(React.Fragment, null, map(blocksAvailableFilter(filteredBlocksConfig), block => __jsx(ButtonGroup, {\n    block: block,\n    key: block.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  })), blocksAvailableFilter(filteredBlocksConfig).length === 0 && __jsx(\"h4\", {\n    style: {\n      textAlign: 'center',\n      lineHeight: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"No results found\",\n    defaultMessage: \"No results found\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }))) : __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, map(groupBlocksOrder, (groupName, index) => __jsx(React.Fragment, {\n    key: groupName.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, __jsx(Accordion.Title, {\n    \"aria-label\": activeIndex === index ? `${intl.formatMessage(messages.fold)} ${groupName.title} blocks` : `${intl.formatMessage(messages.unfold)} ${groupName.title} blocks`,\n    active: activeIndex === index,\n    index: index,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, intl.formatMessage({\n    id: groupName.id,\n    defaultMessage: groupName.title\n  }), __jsx(\"div\", {\n    className: \"accordion-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, activeIndex === 0 ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 21\n    }\n  }))), __jsx(Accordion.Content, {\n    className: groupName.id,\n    active: activeIndex === index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, __jsx(AnimateHeight, {\n    animateOpacity: true,\n    duration: 500,\n    height: activeIndex === index ? 'auto' : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, map(blocksAvailable[groupName.id], block => __jsx(ButtonGroup, {\n    block: block,\n    key: block.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  }))))))));\n};\n_s(BlockChooser, \"soc6gzyfEY/N3nzrjKouh/XHjQ4=\", false, function () {\n  return [useIntl, useUser];\n});\n_c = BlockChooser;\nBlockChooser.propTypes = {\n  currentBlock: PropTypes.string.isRequired,\n  onMutateBlock: PropTypes.func,\n  onInsertBlock: PropTypes.func,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  blocksConfig: PropTypes.objectOf(PropTypes.any)\n};\nexport default _c3 = /*#__PURE__*/React.forwardRef(_c2 = (props, ref) => __jsx(BlockChooser, _extends({}, props, {\n  blockChooserRef: ref,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 3\n  }\n})));\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BlockChooser\");\n$RefreshReg$(_c2, \"%default%$React.forwardRef\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useUser","PropTypes","filter","map","groupBy","isEmpty","Accordion","Button","useIntl","defineMessages","Icon","AnimateHeight","config","upSVG","downSVG","BlockChooserSearch","FormattedMessage","messages","fold","unfold","BlockChooser","currentBlock","onInsertBlock","onMutateBlock","allowedBlocks","showRestricted","blocksConfig","blocks","blockChooserRef","properties","navRoot","contentType","_s","intl","user","hasAllowedBlocks","filteredBlocksConfig","item","blockIsWellFormed","Boolean","title","id","includes","restricted","block","blocksAvailable","mostUsedBlocks","mostUsed","groupedBlocks","group","_objectSpread","groupBlocksOrder","Object","keys","activeIndex","setActiveIndex","useState","handleClick","e","titleProps","index","newIndex","filterValue","setFilterValue","getFormatMessage","message","formatMessage","defaultMessage","blocksAvailableFilter","_filterVariations","toLowerCase","filterVariations","length","_block$variations","variations","variation","ButtonGroup","_variations$","__jsx","Group","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","icon","basic","className","onClick","stopPropagation","name","size","experimental","addBlockButton","enabled","ref","onChange","value","searchValue","Fragment","style","textAlign","lineHeight","fluid","styled","groupName","Title","active","Content","animateOpacity","duration","height","_c","propTypes","string","isRequired","func","arrayOf","objectOf","any","_c3","forwardRef","_c2","props","_extends","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/BlockChooser/BlockChooser.jsx"],"sourcesContent":["import React from 'react';\nimport useUser from '@plone/volto/hooks/user/useUser';\nimport PropTypes from 'prop-types';\nimport filter from 'lodash/filter';\nimport map from 'lodash/map';\nimport groupBy from 'lodash/groupBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { Accordion, Button } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport AnimateHeight from 'react-animate-height';\nimport config from '@plone/volto/registry';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport BlockChooserSearch from './BlockChooserSearch';\nimport { FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  fold: {\n    id: 'Fold',\n    defaultMessage: 'Fold',\n  },\n  unfold: {\n    id: 'Unfold',\n    defaultMessage: 'Unfold',\n  },\n});\n\nconst BlockChooser = ({\n  currentBlock,\n  onInsertBlock,\n  onMutateBlock,\n  allowedBlocks,\n  showRestricted,\n  blocksConfig = config.blocks.blocksConfig,\n  blockChooserRef,\n  properties = {},\n  navRoot,\n  contentType,\n}) => {\n  const intl = useIntl();\n  const user = useUser();\n  const hasAllowedBlocks = !isEmpty(allowedBlocks);\n\n  const filteredBlocksConfig = filter(blocksConfig, (item) => {\n    // Check if the block is well formed (has at least id and title)\n    const blockIsWellFormed = Boolean(item.title && item.id);\n    if (!blockIsWellFormed) {\n      return false;\n    }\n    if (showRestricted) {\n      if (hasAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return true;\n      }\n    } else {\n      if (hasAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        // Overload restricted as a function, so we can decide the availability of a block\n        // depending on this function, given properties (current present blocks) and the\n        // block being evaluated\n        return typeof item.restricted === 'function'\n          ? !item.restricted({\n              properties,\n              block: item,\n              navRoot,\n              contentType,\n              user,\n            })\n          : !item.restricted;\n      }\n    }\n  });\n\n  let blocksAvailable = {};\n  const mostUsedBlocks = filter(filteredBlocksConfig, (item) => item.mostUsed);\n  if (mostUsedBlocks) {\n    blocksAvailable.mostUsed = mostUsedBlocks;\n  }\n  const groupedBlocks = groupBy(filteredBlocksConfig, (item) => item.group);\n  blocksAvailable = {\n    ...blocksAvailable,\n    ...groupedBlocks,\n  };\n\n  const groupBlocksOrder = filter(config.blocks.groupBlocksOrder, (item) =>\n    Object.keys(blocksAvailable).includes(item.id),\n  );\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  function handleClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    setActiveIndex(newIndex);\n  }\n  const [filterValue, setFilterValue] = React.useState('');\n\n  const getFormatMessage = (message) =>\n    intl.formatMessage({\n      id: message,\n      defaultMessage: message,\n    });\n\n  function blocksAvailableFilter(blocks) {\n    return blocks.filter(\n      (block) =>\n        getFormatMessage(block.title)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase()) ||\n        filterVariations(block)?.length,\n    );\n  }\n  function filterVariations(block) {\n    return block.variations?.filter(\n      (variation) =>\n        getFormatMessage(variation.title)\n          .toLowerCase()\n          .includes(filterValue.toLowerCase()) &&\n        !variation.title.toLowerCase().includes('default'),\n    );\n  }\n\n  const ButtonGroup = ({ block }) => {\n    const variations = filterVariations(block);\n    return (\n      <Button.Group key={block.id}>\n        <Button\n          icon\n          basic\n          className={block.id}\n          onClick={(e) => {\n            onInsertBlock\n              ? onInsertBlock(currentBlock, {\n                  '@type': block.id,\n                })\n              : onMutateBlock(currentBlock, {\n                  '@type': block.id,\n                });\n            e.stopPropagation();\n          }}\n        >\n          <Icon name={block.icon} size=\"36px\" />\n          {getFormatMessage(block.title)}\n          {filterValue && variations?.[0]?.title && (\n            <small>{getFormatMessage(variations[0].title)}</small>\n          )}\n        </Button>\n      </Button.Group>\n    );\n  };\n\n  return (\n    <div\n      className={`blocks-chooser${\n        config.experimental.addBlockButton.enabled ? ' new-add-block' : ''\n      }`}\n      ref={blockChooserRef}\n    >\n      <BlockChooserSearch\n        onChange={(value) => setFilterValue(value)}\n        searchValue={filterValue}\n      />\n      {filterValue ? (\n        <>\n          {map(blocksAvailableFilter(filteredBlocksConfig), (block) => (\n            <ButtonGroup block={block} key={block.id} />\n          ))}\n          {blocksAvailableFilter(filteredBlocksConfig).length === 0 && (\n            <h4 style={{ textAlign: 'center', lineHeight: '40px' }}>\n              <FormattedMessage\n                id=\"No results found\"\n                defaultMessage=\"No results found\"\n              />\n            </h4>\n          )}\n        </>\n      ) : (\n        <Accordion fluid styled className=\"form\">\n          {map(groupBlocksOrder, (groupName, index) => (\n            <React.Fragment key={groupName.id}>\n              <Accordion.Title\n                aria-label={\n                  activeIndex === index\n                    ? `${intl.formatMessage(messages.fold)} ${\n                        groupName.title\n                      } blocks`\n                    : `${intl.formatMessage(messages.unfold)} ${\n                        groupName.title\n                      } blocks`\n                }\n                active={activeIndex === index}\n                index={index}\n                onClick={handleClick}\n              >\n                {intl.formatMessage({\n                  id: groupName.id,\n                  defaultMessage: groupName.title,\n                })}\n                <div className=\"accordion-tools\">\n                  {activeIndex === 0 ? (\n                    <Icon name={upSVG} size=\"20px\" />\n                  ) : (\n                    <Icon name={downSVG} size=\"20px\" />\n                  )}\n                </div>\n              </Accordion.Title>\n              <Accordion.Content\n                className={groupName.id}\n                active={activeIndex === index}\n              >\n                <AnimateHeight\n                  animateOpacity\n                  duration={500}\n                  height={activeIndex === index ? 'auto' : 0}\n                >\n                  {map(blocksAvailable[groupName.id], (block) => (\n                    <ButtonGroup block={block} key={block.id} />\n                  ))}\n                </AnimateHeight>\n              </Accordion.Content>\n            </React.Fragment>\n          ))}\n        </Accordion>\n      )}\n    </div>\n  );\n};\n\nBlockChooser.propTypes = {\n  currentBlock: PropTypes.string.isRequired,\n  onMutateBlock: PropTypes.func,\n  onInsertBlock: PropTypes.func,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default React.forwardRef((props, ref) => (\n  <BlockChooser {...props} blockChooserRef={ref} />\n));\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Fold","defaultMessage":"Fold"},{"id":"Unfold","defaultMessage":"Unfold"},{"id":"No results found","defaultMessage":"No results found"}]}},"sourceType":"module","externalDependencies":[]}