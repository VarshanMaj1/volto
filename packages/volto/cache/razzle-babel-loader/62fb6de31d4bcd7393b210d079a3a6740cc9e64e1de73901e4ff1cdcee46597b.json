{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Diff/DiffField.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Diff field component.\n * @module components/manage/Diff/DiffField\n */\n\nimport React from 'react';\nimport join from 'lodash/join';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport ReactDOMServer from 'react-dom/server';\nimport { Provider } from 'react-intl-redux';\nimport { createBrowserHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport configureStore from '@plone/volto/store';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst isHtmlTag = str => {\n  // Match complete HTML tags, including:\n  // 1. Opening tags like <div>, <img src=\"example\" />, <svg>...</svg>\n  // 2. Self-closing tags like <img />, <br />\n  // 3. Closing tags like </div>\n  return /^<([a-zA-Z]+[0-9]*)\\b[^>]*>|^<\\/([a-zA-Z]+[0-9]*)\\b[^>]*>$|^<([a-zA-Z]+[0-9]*)\\b[^>]*\\/>$/.test(str);\n};\nconst splitWords = str => {\n  if (typeof str !== 'string') return str;\n  if (!str) return [];\n  const result = [];\n  let currentWord = '';\n  let insideTag = false;\n  let insideSpecialTag = false;\n  let tagBuffer = '';\n\n  // Special tags that should not be split (e.g., <img />, <svg> ... </svg>)\n  const specialTags = ['img', 'svg'];\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n\n    // Start of an HTML tag\n    if (char === '<') {\n      if (currentWord) {\n        result.push(currentWord); // Push text before the tag\n        currentWord = '';\n      }\n      insideTag = true;\n      tagBuffer += char;\n    }\n    // End of an HTML tag\n    else if (char === '>') {\n      tagBuffer += char;\n      insideTag = false;\n\n      // Check if the tagBuffer contains a special tag\n      const tagNameMatch = tagBuffer.match(/^<\\/?([a-zA-Z]+[0-9]*)\\b/);\n      if (tagNameMatch && specialTags.includes(tagNameMatch[1])) {\n        insideSpecialTag = tagNameMatch[0].startsWith('<') && !tagNameMatch[0].startsWith('</');\n        result.push(tagBuffer); // Push the complete special tag as one unit\n        tagBuffer = '';\n        continue;\n      }\n      result.push(tagBuffer); // Push the complete tag\n      tagBuffer = '';\n    }\n    // Inside the tag or special tag\n    else if (insideTag || insideSpecialTag) {\n      tagBuffer += char;\n    }\n    // Space outside of tags - push current word\n    else if (char === ' ' && !insideTag && !insideSpecialTag) {\n      if (currentWord) {\n        result.push(currentWord);\n        currentWord = '';\n      }\n      result.push(' ');\n    } else if (char === ',' && i < str.length - 1 && str[i + 1] !== ' ' && !insideTag && !insideSpecialTag) {\n      if (currentWord) {\n        result.push(currentWord + char);\n        currentWord = '';\n      }\n      result.push(' ');\n    }\n    // Accumulate characters outside of tags\n    else {\n      currentWord += char;\n    }\n  }\n\n  // Push any remaining text\n  if (currentWord) {\n    result.push(currentWord);\n  }\n  if (tagBuffer) {\n    result.push(tagBuffer); // Push remaining tagBuffer\n  }\n  return result;\n};\nconst formatDiffPart = (part, value, side) => {\n  if (!isHtmlTag(value)) {\n    if (part.removed && (side === 'left' || side === 'unified')) {\n      return `<span class=\"deletion\">${value}</span>`;\n    } else if (part.removed) return '';else if (part.added && (side === 'right' || side === 'unified')) {\n      return `<span class=\"addition\">${value}</span>`;\n    } else if (part.added) return '';\n    return value;\n  } else {\n    if (side === 'unified' && part.added) return value;else if (side === 'unified' && part.removed) return '';\n    if (part.removed && side === 'left') {\n      return value;\n    } else if (part.removed) return '';else if (part.added && side === 'right') {\n      return value;\n    } else if (part.added) return '';\n    return value;\n  }\n};\n\n/**\n * Diff field component.\n * @function DiffField\n * @param {*} one Field one\n * @param {*} two Field two\n * @param {Object} schema Field schema\n * @returns {string} Markup of the component.\n */\n\nconst DiffField = ({\n  one,\n  two,\n  contentOne,\n  contentTwo,\n  view,\n  schema,\n  diffLib\n}) => {\n  _s();\n  var _config$widgets, _config$widgets$views, _config$widgets$views2;\n  const language = useSelector(state => state.intl.locale);\n  const readable_date_format = {\n    dateStyle: 'full',\n    timeStyle: 'short'\n  };\n  const diffWords = (oneStr, twoStr) => {\n    return diffLib.diffArrays(splitWords(String(oneStr)), splitWords(String(twoStr)));\n  };\n  let parts, oneArray, twoArray;\n  if (schema.widget) {\n    switch (schema.widget) {\n      case 'richtext':\n        parts = diffWords(one === null || one === void 0 ? void 0 : one.data, two === null || two === void 0 ? void 0 : two.data);\n        break;\n      case 'datetime':\n        parts = diffWords(new Intl.DateTimeFormat(language, readable_date_format).format(new Date(one)).replace('\\u202F', ' '), new Intl.DateTimeFormat(language, readable_date_format).format(new Date(two)).replace('\\u202F', ' '));\n        break;\n      case 'json':\n        {\n          const api = new Api();\n          const history = createBrowserHistory();\n          const store = configureStore(window.__data, history, api);\n          parts = diffWords(ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 13\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }\n          }, __jsx(RenderBlocks, {\n            content: contentOne,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }\n          })))), ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 13\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }\n          }, __jsx(RenderBlocks, {\n            content: contentTwo,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }\n          })))));\n          break;\n        }\n      case 'slate':\n        {\n          const api = new Api();\n          const history = createBrowserHistory();\n          const store = configureStore(window.__data, history, api);\n          parts = diffWords(ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 13\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }\n          }, serializeNodes(one)))), ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 13\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }\n          }, serializeNodes(two)))));\n          break;\n        }\n      case 'textarea':\n      default:\n        const Widget = (_config$widgets = config.widgets) === null || _config$widgets === void 0 ? void 0 : (_config$widgets$views = _config$widgets.views) === null || _config$widgets$views === void 0 ? void 0 : (_config$widgets$views2 = _config$widgets$views.widget) === null || _config$widgets$views2 === void 0 ? void 0 : _config$widgets$views2[schema.widget];\n        if (Widget) {\n          const api = new Api();\n          const history = createBrowserHistory();\n          const store = configureStore(window.__data, history, api);\n          parts = diffWords(ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }\n          }, __jsx(Widget, {\n            value: one,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }\n          })))), ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n            store: store,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }\n          }, __jsx(ConnectedRouter, {\n            history: history,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }\n          }, __jsx(Widget, {\n            value: two,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }\n          })))));\n        } else parts = diffWords(one, two);\n        break;\n    }\n  } else if (schema.type === 'object') {\n    parts = diffWords((one === null || one === void 0 ? void 0 : one.filename) || one, (two === null || two === void 0 ? void 0 : two.filename) || two);\n  } else if (schema.type === 'array') {\n    oneArray = (one || []).map(i => (i === null || i === void 0 ? void 0 : i.title) || i);\n    twoArray = (two || []).map(j => (j === null || j === void 0 ? void 0 : j.title) || j);\n    parts = diffWords(oneArray, twoArray);\n  } else {\n    parts = diffWords((one === null || one === void 0 ? void 0 : one.title) || one, (two === null || two === void 0 ? void 0 : two.title) || two);\n  }\n  return __jsx(Grid, {\n    \"data-testid\": \"DiffField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Column, {\n    width: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, schema.title)), view === 'split' && __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    width: 6,\n    verticalAlign: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: join(map(parts, part => {\n        let combined = (part.value || []).reduce((acc, value) => {\n          return acc + formatDiffPart(part, value, 'left');\n        }, '');\n        return combined;\n      }), '')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  })), __jsx(Grid.Column, {\n    width: 6,\n    verticalAlign: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: join(map(parts, part => {\n        let combined = (part.value || []).reduce((acc, value) => {\n          return acc + formatDiffPart(part, value, 'right');\n        }, '');\n        return combined;\n      }), '')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }))), view === 'unified' && __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    width: 16,\n    verticalAlign: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: join(map(parts, part => {\n        let combined = (part.value || []).reduce((acc, value) => {\n          return acc + formatDiffPart(part, value, 'unified');\n        }, '');\n        return combined;\n      }), '')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(DiffField, \"lQANm1MwgmwtuScNKGsbP20Mv9w=\", false, function () {\n  return [useSelector];\n});\n_c = DiffField;\nDiffField.propTypes = {\n  one: PropTypes.any.isRequired,\n  two: PropTypes.any.isRequired,\n  contentOne: PropTypes.any,\n  contentTwo: PropTypes.any,\n  view: PropTypes.string.isRequired,\n  schema: PropTypes.shape({\n    widget: PropTypes.string,\n    type: PropTypes.string,\n    title: PropTypes.string\n  }).isRequired\n};\nexport default injectLazyLibs('diffLib')(DiffField);\nvar _c;\n$RefreshReg$(_c, \"DiffField\");","map":{"version":3,"names":["React","join","map","PropTypes","Grid","ReactDOMServer","Provider","createBrowserHistory","ConnectedRouter","useSelector","config","Api","configureStore","RenderBlocks","serializeNodes","injectLazyLibs","isHtmlTag","str","test","splitWords","result","currentWord","insideTag","insideSpecialTag","tagBuffer","specialTags","i","length","char","push","tagNameMatch","match","includes","startsWith","formatDiffPart","part","value","side","removed","added","DiffField","one","two","contentOne","contentTwo","view","schema","diffLib","_s","_config$widgets","_config$widgets$views","_config$widgets$views2","language","state","intl","locale","readable_date_format","dateStyle","timeStyle","diffWords","oneStr","twoStr","diffArrays","String","parts","oneArray","twoArray","widget","data","Intl","DateTimeFormat","format","Date","replace","api","history","store","window","__data","renderToStaticMarkup","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","content","Widget","widgets","views","type","filename","title","j","Row","Column","width","verticalAlign","dangerouslySetInnerHTML","__html","combined","reduce","acc","_c","propTypes","any","isRequired","string","shape","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Diff/DiffField.jsx"],"sourcesContent":["/**\n * Diff field component.\n * @module components/manage/Diff/DiffField\n */\n\nimport React from 'react';\nimport join from 'lodash/join';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport ReactDOMServer from 'react-dom/server';\nimport { Provider } from 'react-intl-redux';\nimport { createBrowserHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport configureStore from '@plone/volto/store';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst isHtmlTag = (str) => {\n  // Match complete HTML tags, including:\n  // 1. Opening tags like <div>, <img src=\"example\" />, <svg>...</svg>\n  // 2. Self-closing tags like <img />, <br />\n  // 3. Closing tags like </div>\n  return /^<([a-zA-Z]+[0-9]*)\\b[^>]*>|^<\\/([a-zA-Z]+[0-9]*)\\b[^>]*>$|^<([a-zA-Z]+[0-9]*)\\b[^>]*\\/>$/.test(\n    str,\n  );\n};\n\nconst splitWords = (str) => {\n  if (typeof str !== 'string') return str;\n  if (!str) return [];\n\n  const result = [];\n  let currentWord = '';\n  let insideTag = false;\n  let insideSpecialTag = false;\n  let tagBuffer = '';\n\n  // Special tags that should not be split (e.g., <img />, <svg> ... </svg>)\n  const specialTags = ['img', 'svg'];\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n\n    // Start of an HTML tag\n    if (char === '<') {\n      if (currentWord) {\n        result.push(currentWord); // Push text before the tag\n        currentWord = '';\n      }\n      insideTag = true;\n      tagBuffer += char;\n    }\n    // End of an HTML tag\n    else if (char === '>') {\n      tagBuffer += char;\n      insideTag = false;\n\n      // Check if the tagBuffer contains a special tag\n      const tagNameMatch = tagBuffer.match(/^<\\/?([a-zA-Z]+[0-9]*)\\b/);\n      if (tagNameMatch && specialTags.includes(tagNameMatch[1])) {\n        insideSpecialTag =\n          tagNameMatch[0].startsWith('<') && !tagNameMatch[0].startsWith('</');\n        result.push(tagBuffer); // Push the complete special tag as one unit\n        tagBuffer = '';\n        continue;\n      }\n\n      result.push(tagBuffer); // Push the complete tag\n      tagBuffer = '';\n    }\n    // Inside the tag or special tag\n    else if (insideTag || insideSpecialTag) {\n      tagBuffer += char;\n    }\n    // Space outside of tags - push current word\n    else if (char === ' ' && !insideTag && !insideSpecialTag) {\n      if (currentWord) {\n        result.push(currentWord);\n        currentWord = '';\n      }\n      result.push(' ');\n    } else if (\n      char === ',' &&\n      i < str.length - 1 &&\n      str[i + 1] !== ' ' &&\n      !insideTag &&\n      !insideSpecialTag\n    ) {\n      if (currentWord) {\n        result.push(currentWord + char);\n        currentWord = '';\n      }\n      result.push(' ');\n    }\n    // Accumulate characters outside of tags\n    else {\n      currentWord += char;\n    }\n  }\n\n  // Push any remaining text\n  if (currentWord) {\n    result.push(currentWord);\n  }\n  if (tagBuffer) {\n    result.push(tagBuffer); // Push remaining tagBuffer\n  }\n\n  return result;\n};\n\nconst formatDiffPart = (part, value, side) => {\n  if (!isHtmlTag(value)) {\n    if (part.removed && (side === 'left' || side === 'unified')) {\n      return `<span class=\"deletion\">${value}</span>`;\n    } else if (part.removed) return '';\n    else if (part.added && (side === 'right' || side === 'unified')) {\n      return `<span class=\"addition\">${value}</span>`;\n    } else if (part.added) return '';\n    return value;\n  } else {\n    if (side === 'unified' && part.added) return value;\n    else if (side === 'unified' && part.removed) return '';\n    if (part.removed && side === 'left') {\n      return value;\n    } else if (part.removed) return '';\n    else if (part.added && side === 'right') {\n      return value;\n    } else if (part.added) return '';\n    return value;\n  }\n};\n\n/**\n * Diff field component.\n * @function DiffField\n * @param {*} one Field one\n * @param {*} two Field two\n * @param {Object} schema Field schema\n * @returns {string} Markup of the component.\n */\n\nconst DiffField = ({\n  one,\n  two,\n  contentOne,\n  contentTwo,\n  view,\n  schema,\n  diffLib,\n}) => {\n  const language = useSelector((state) => state.intl.locale);\n  const readable_date_format = {\n    dateStyle: 'full',\n    timeStyle: 'short',\n  };\n  const diffWords = (oneStr, twoStr) => {\n    return diffLib.diffArrays(\n      splitWords(String(oneStr)),\n      splitWords(String(twoStr)),\n    );\n  };\n\n  let parts, oneArray, twoArray;\n  if (schema.widget) {\n    switch (schema.widget) {\n      case 'richtext':\n        parts = diffWords(one?.data, two?.data);\n        break;\n      case 'datetime':\n        parts = diffWords(\n          new Intl.DateTimeFormat(language, readable_date_format)\n            .format(new Date(one))\n            .replace('\\u202F', ' '),\n          new Intl.DateTimeFormat(language, readable_date_format)\n            .format(new Date(two))\n            .replace('\\u202F', ' '),\n        );\n        break;\n      case 'json': {\n        const api = new Api();\n        const history = createBrowserHistory();\n        const store = configureStore(window.__data, history, api);\n        parts = diffWords(\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                <RenderBlocks content={contentOne} />\n              </ConnectedRouter>\n            </Provider>,\n          ),\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                <RenderBlocks content={contentTwo} />\n              </ConnectedRouter>\n            </Provider>,\n          ),\n        );\n        break;\n      }\n      case 'slate': {\n        const api = new Api();\n        const history = createBrowserHistory();\n        const store = configureStore(window.__data, history, api);\n        parts = diffWords(\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                {serializeNodes(one)}\n              </ConnectedRouter>\n            </Provider>,\n          ),\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                {serializeNodes(two)}\n              </ConnectedRouter>\n            </Provider>,\n          ),\n        );\n        break;\n      }\n      case 'textarea':\n      default:\n        const Widget = config.widgets?.views?.widget?.[schema.widget];\n\n        if (Widget) {\n          const api = new Api();\n          const history = createBrowserHistory();\n          const store = configureStore(window.__data, history, api);\n          parts = diffWords(\n            ReactDOMServer.renderToStaticMarkup(\n              <Provider store={store}>\n                <ConnectedRouter history={history}>\n                  <Widget value={one} />\n                </ConnectedRouter>\n              </Provider>,\n            ),\n            ReactDOMServer.renderToStaticMarkup(\n              <Provider store={store}>\n                <ConnectedRouter history={history}>\n                  <Widget value={two} />\n                </ConnectedRouter>\n              </Provider>,\n            ),\n          );\n        } else parts = diffWords(one, two);\n\n        break;\n    }\n  } else if (schema.type === 'object') {\n    parts = diffWords(one?.filename || one, two?.filename || two);\n  } else if (schema.type === 'array') {\n    oneArray = (one || []).map((i) => i?.title || i);\n    twoArray = (two || []).map((j) => j?.title || j);\n    parts = diffWords(oneArray, twoArray);\n  } else {\n    parts = diffWords(one?.title || one, two?.title || two);\n  }\n\n  return (\n    <Grid data-testid=\"DiffField\">\n      <Grid.Row>\n        <Grid.Column width={12}>{schema.title}</Grid.Column>\n      </Grid.Row>\n\n      {view === 'split' && (\n        <Grid.Row>\n          <Grid.Column width={6} verticalAlign=\"top\">\n            <span\n              dangerouslySetInnerHTML={{\n                __html: join(\n                  map(parts, (part) => {\n                    let combined = (part.value || []).reduce((acc, value) => {\n                      return acc + formatDiffPart(part, value, 'left');\n                    }, '');\n                    return combined;\n                  }),\n                  '',\n                ),\n              }}\n            />\n          </Grid.Column>\n          <Grid.Column width={6} verticalAlign=\"top\">\n            <span\n              dangerouslySetInnerHTML={{\n                __html: join(\n                  map(parts, (part) => {\n                    let combined = (part.value || []).reduce((acc, value) => {\n                      return acc + formatDiffPart(part, value, 'right');\n                    }, '');\n                    return combined;\n                  }),\n                  '',\n                ),\n              }}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      )}\n      {view === 'unified' && (\n        <Grid.Row>\n          <Grid.Column width={16} verticalAlign=\"top\">\n            <span\n              dangerouslySetInnerHTML={{\n                __html: join(\n                  map(parts, (part) => {\n                    let combined = (part.value || []).reduce((acc, value) => {\n                      return acc + formatDiffPart(part, value, 'unified');\n                    }, '');\n                    return combined;\n                  }),\n                  '',\n                ),\n              }}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      )}\n    </Grid>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDiffField.propTypes = {\n  one: PropTypes.any.isRequired,\n  two: PropTypes.any.isRequired,\n  contentOne: PropTypes.any,\n  contentTwo: PropTypes.any,\n  view: PropTypes.string.isRequired,\n  schema: PropTypes.shape({\n    widget: PropTypes.string,\n    type: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n\nexport default injectLazyLibs('diffLib')(DiffField);\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,GAAG,MAAM,8BAA8B;AAC9C,OAAOC,cAAc,MAAM,oBAAoB;AAC/C,OAAOC,YAAY,MAAM,iDAAiD;AAC1E,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,cAAc,QAAQ,wCAAwC;AAEvE,MAAMC,SAAS,GAAIC,GAAG,IAAK;EACzB;EACA;EACA;EACA;EACA,OAAO,2FAA2F,CAACC,IAAI,CACrGD,GACF,CAAC;AACH,CAAC;AAED,MAAME,UAAU,GAAIF,GAAG,IAAK;EAC1B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;EACvC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EAEnB,MAAMG,MAAM,GAAG,EAAE;EACjB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,MAAMC,WAAW,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;EAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,GAAG,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,IAAI,GAAGX,GAAG,CAACS,CAAC,CAAC;;IAEnB;IACA,IAAIE,IAAI,KAAK,GAAG,EAAE;MAChB,IAAIP,WAAW,EAAE;QACfD,MAAM,CAACS,IAAI,CAACR,WAAW,CAAC,CAAC,CAAC;QAC1BA,WAAW,GAAG,EAAE;MAClB;MACAC,SAAS,GAAG,IAAI;MAChBE,SAAS,IAAII,IAAI;IACnB;IACA;IAAA,KACK,IAAIA,IAAI,KAAK,GAAG,EAAE;MACrBJ,SAAS,IAAII,IAAI;MACjBN,SAAS,GAAG,KAAK;;MAEjB;MACA,MAAMQ,YAAY,GAAGN,SAAS,CAACO,KAAK,CAAC,0BAA0B,CAAC;MAChE,IAAID,YAAY,IAAIL,WAAW,CAACO,QAAQ,CAACF,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;QACzDP,gBAAgB,GACdO,YAAY,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC,GAAG,CAAC,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC,IAAI,CAAC;QACtEb,MAAM,CAACS,IAAI,CAACL,SAAS,CAAC,CAAC,CAAC;QACxBA,SAAS,GAAG,EAAE;QACd;MACF;MAEAJ,MAAM,CAACS,IAAI,CAACL,SAAS,CAAC,CAAC,CAAC;MACxBA,SAAS,GAAG,EAAE;IAChB;IACA;IAAA,KACK,IAAIF,SAAS,IAAIC,gBAAgB,EAAE;MACtCC,SAAS,IAAII,IAAI;IACnB;IACA;IAAA,KACK,IAAIA,IAAI,KAAK,GAAG,IAAI,CAACN,SAAS,IAAI,CAACC,gBAAgB,EAAE;MACxD,IAAIF,WAAW,EAAE;QACfD,MAAM,CAACS,IAAI,CAACR,WAAW,CAAC;QACxBA,WAAW,GAAG,EAAE;MAClB;MACAD,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC,MAAM,IACLD,IAAI,KAAK,GAAG,IACZF,CAAC,GAAGT,GAAG,CAACU,MAAM,GAAG,CAAC,IAClBV,GAAG,CAACS,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAClB,CAACJ,SAAS,IACV,CAACC,gBAAgB,EACjB;MACA,IAAIF,WAAW,EAAE;QACfD,MAAM,CAACS,IAAI,CAACR,WAAW,GAAGO,IAAI,CAAC;QAC/BP,WAAW,GAAG,EAAE;MAClB;MACAD,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC;IAClB;IACA;IAAA,KACK;MACHR,WAAW,IAAIO,IAAI;IACrB;EACF;;EAEA;EACA,IAAIP,WAAW,EAAE;IACfD,MAAM,CAACS,IAAI,CAACR,WAAW,CAAC;EAC1B;EACA,IAAIG,SAAS,EAAE;IACbJ,MAAM,CAACS,IAAI,CAACL,SAAS,CAAC,CAAC,CAAC;EAC1B;EAEA,OAAOJ,MAAM;AACf,CAAC;AAED,MAAMc,cAAc,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,KAAK;EAC5C,IAAI,CAACrB,SAAS,CAACoB,KAAK,CAAC,EAAE;IACrB,IAAID,IAAI,CAACG,OAAO,KAAKD,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,SAAS,CAAC,EAAE;MAC3D,OAAO,0BAA0BD,KAAK,SAAS;IACjD,CAAC,MAAM,IAAID,IAAI,CAACG,OAAO,EAAE,OAAO,EAAE,CAAC,KAC9B,IAAIH,IAAI,CAACI,KAAK,KAAKF,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,SAAS,CAAC,EAAE;MAC/D,OAAO,0BAA0BD,KAAK,SAAS;IACjD,CAAC,MAAM,IAAID,IAAI,CAACI,KAAK,EAAE,OAAO,EAAE;IAChC,OAAOH,KAAK;EACd,CAAC,MAAM;IACL,IAAIC,IAAI,KAAK,SAAS,IAAIF,IAAI,CAACI,KAAK,EAAE,OAAOH,KAAK,CAAC,KAC9C,IAAIC,IAAI,KAAK,SAAS,IAAIF,IAAI,CAACG,OAAO,EAAE,OAAO,EAAE;IACtD,IAAIH,IAAI,CAACG,OAAO,IAAID,IAAI,KAAK,MAAM,EAAE;MACnC,OAAOD,KAAK;IACd,CAAC,MAAM,IAAID,IAAI,CAACG,OAAO,EAAE,OAAO,EAAE,CAAC,KAC9B,IAAIH,IAAI,CAACI,KAAK,IAAIF,IAAI,KAAK,OAAO,EAAE;MACvC,OAAOD,KAAK;IACd,CAAC,MAAM,IAAID,IAAI,CAACI,KAAK,EAAE,OAAO,EAAE;IAChC,OAAOH,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,SAAS,GAAGA,CAAC;EACjBC,GAAG;EACHC,GAAG;EACHC,UAAU;EACVC,UAAU;EACVC,IAAI;EACJC,MAAM;EACNC;AACF,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,qBAAA,EAAAC,sBAAA;EACJ,MAAMC,QAAQ,GAAG3C,WAAW,CAAE4C,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC;EAC1D,MAAMC,oBAAoB,GAAG;IAC3BC,SAAS,EAAE,MAAM;IACjBC,SAAS,EAAE;EACb,CAAC;EACD,MAAMC,SAAS,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;IACpC,OAAOd,OAAO,CAACe,UAAU,CACvB3C,UAAU,CAAC4C,MAAM,CAACH,MAAM,CAAC,CAAC,EAC1BzC,UAAU,CAAC4C,MAAM,CAACF,MAAM,CAAC,CAC3B,CAAC;EACH,CAAC;EAED,IAAIG,KAAK,EAAEC,QAAQ,EAAEC,QAAQ;EAC7B,IAAIpB,MAAM,CAACqB,MAAM,EAAE;IACjB,QAAQrB,MAAM,CAACqB,MAAM;MACnB,KAAK,UAAU;QACbH,KAAK,GAAGL,SAAS,CAAClB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE2B,IAAI,EAAE1B,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE0B,IAAI,CAAC;QACvC;MACF,KAAK,UAAU;QACbJ,KAAK,GAAGL,SAAS,CACf,IAAIU,IAAI,CAACC,cAAc,CAAClB,QAAQ,EAAEI,oBAAoB,CAAC,CACpDe,MAAM,CAAC,IAAIC,IAAI,CAAC/B,GAAG,CAAC,CAAC,CACrBgC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EACzB,IAAIJ,IAAI,CAACC,cAAc,CAAClB,QAAQ,EAAEI,oBAAoB,CAAC,CACpDe,MAAM,CAAC,IAAIC,IAAI,CAAC9B,GAAG,CAAC,CAAC,CACrB+B,OAAO,CAAC,QAAQ,EAAE,GAAG,CAC1B,CAAC;QACD;MACF,KAAK,MAAM;QAAE;UACX,MAAMC,GAAG,GAAG,IAAI/D,GAAG,CAAC,CAAC;UACrB,MAAMgE,OAAO,GAAGpE,oBAAoB,CAAC,CAAC;UACtC,MAAMqE,KAAK,GAAGhE,cAAc,CAACiE,MAAM,CAACC,MAAM,EAAEH,OAAO,EAAED,GAAG,CAAC;UACzDV,KAAK,GAAGL,SAAS,CACftD,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAChCN,KAAA,CAACnE,YAAY;YAAC0E,OAAO,EAAE5C,UAAW;YAAAsC,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,CAAE,CACrB,CACT,CACZ,CAAC,EACDjF,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAChCN,KAAA,CAACnE,YAAY;YAAC0E,OAAO,EAAE3C,UAAW;YAAAqC,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,CAAE,CACrB,CACT,CACZ,CACF,CAAC;UACD;QACF;MACA,KAAK,OAAO;QAAE;UACZ,MAAMZ,GAAG,GAAG,IAAI/D,GAAG,CAAC,CAAC;UACrB,MAAMgE,OAAO,GAAGpE,oBAAoB,CAAC,CAAC;UACtC,MAAMqE,KAAK,GAAGhE,cAAc,CAACiE,MAAM,CAACC,MAAM,EAAEH,OAAO,EAAED,GAAG,CAAC;UACzDV,KAAK,GAAGL,SAAS,CACftD,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAC/BxE,cAAc,CAAC2B,GAAG,CACJ,CACT,CACZ,CAAC,EACDpC,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAC/BxE,cAAc,CAAC4B,GAAG,CACJ,CACT,CACZ,CACF,CAAC;UACD;QACF;MACA,KAAK,UAAU;MACf;QACE,MAAM8C,MAAM,IAAAvC,eAAA,GAAGvC,MAAM,CAAC+E,OAAO,cAAAxC,eAAA,wBAAAC,qBAAA,GAAdD,eAAA,CAAgByC,KAAK,cAAAxC,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAuBiB,MAAM,cAAAhB,sBAAA,uBAA7BA,sBAAA,CAAgCL,MAAM,CAACqB,MAAM,CAAC;QAE7D,IAAIqB,MAAM,EAAE;UACV,MAAMd,GAAG,GAAG,IAAI/D,GAAG,CAAC,CAAC;UACrB,MAAMgE,OAAO,GAAGpE,oBAAoB,CAAC,CAAC;UACtC,MAAMqE,KAAK,GAAGhE,cAAc,CAACiE,MAAM,CAACC,MAAM,EAAEH,OAAO,EAAED,GAAG,CAAC;UACzDV,KAAK,GAAGL,SAAS,CACftD,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAChCN,KAAA,CAACQ,MAAM;YAACpD,KAAK,EAAEK,GAAI;YAAAwC,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,CAAE,CACN,CACT,CACZ,CAAC,EACDjF,cAAc,CAAC0E,oBAAoB,CACjCC,KAAA,CAAC1E,QAAQ;YAACsE,KAAK,EAAEA,KAAM;YAAAK,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GACrBN,KAAA,CAACxE,eAAe;YAACmE,OAAO,EAAEA,OAAQ;YAAAM,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAChCN,KAAA,CAACQ,MAAM;YAACpD,KAAK,EAAEM,GAAI;YAAAuC,MAAA;YAAAC,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,CAAE,CACN,CACT,CACZ,CACF,CAAC;QACH,CAAC,MAAMtB,KAAK,GAAGL,SAAS,CAAClB,GAAG,EAAEC,GAAG,CAAC;QAElC;IACJ;EACF,CAAC,MAAM,IAAII,MAAM,CAAC6C,IAAI,KAAK,QAAQ,EAAE;IACnC3B,KAAK,GAAGL,SAAS,CAAC,CAAAlB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEmD,QAAQ,KAAInD,GAAG,EAAE,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEkD,QAAQ,KAAIlD,GAAG,CAAC;EAC/D,CAAC,MAAM,IAAII,MAAM,CAAC6C,IAAI,KAAK,OAAO,EAAE;IAClC1B,QAAQ,GAAG,CAACxB,GAAG,IAAI,EAAE,EAAEvC,GAAG,CAAEwB,CAAC,IAAK,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEmE,KAAK,KAAInE,CAAC,CAAC;IAChDwC,QAAQ,GAAG,CAACxB,GAAG,IAAI,EAAE,EAAExC,GAAG,CAAE4F,CAAC,IAAK,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAED,KAAK,KAAIC,CAAC,CAAC;IAChD9B,KAAK,GAAGL,SAAS,CAACM,QAAQ,EAAEC,QAAQ,CAAC;EACvC,CAAC,MAAM;IACLF,KAAK,GAAGL,SAAS,CAAC,CAAAlB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEoD,KAAK,KAAIpD,GAAG,EAAE,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEmD,KAAK,KAAInD,GAAG,CAAC;EACzD;EAEA,OACEsC,KAAA,CAAC5E,IAAI;IAAC,eAAY,WAAW;IAAA6E,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3BN,KAAA,CAAC5E,IAAI,CAAC2F,GAAG;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACPN,KAAA,CAAC5E,IAAI,CAAC4F,MAAM;IAACC,KAAK,EAAE,EAAG;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAExC,MAAM,CAAC+C,KAAmB,CAC3C,CAAC,EAEVhD,IAAI,KAAK,OAAO,IACfmC,KAAA,CAAC5E,IAAI,CAAC2F,GAAG;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACPN,KAAA,CAAC5E,IAAI,CAAC4F,MAAM;IAACC,KAAK,EAAE,CAAE;IAACC,aAAa,EAAC,KAAK;IAAAjB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxCN,KAAA;IACEmB,uBAAuB,EAAE;MACvBC,MAAM,EAAEnG,IAAI,CACVC,GAAG,CAAC8D,KAAK,EAAG7B,IAAI,IAAK;QACnB,IAAIkE,QAAQ,GAAG,CAAClE,IAAI,CAACC,KAAK,IAAI,EAAE,EAAEkE,MAAM,CAAC,CAACC,GAAG,EAAEnE,KAAK,KAAK;UACvD,OAAOmE,GAAG,GAAGrE,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAE,MAAM,CAAC;QAClD,CAAC,EAAE,EAAE,CAAC;QACN,OAAOiE,QAAQ;MACjB,CAAC,CAAC,EACF,EACF;IACF,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACU,CAAC,EACdN,KAAA,CAAC5E,IAAI,CAAC4F,MAAM;IAACC,KAAK,EAAE,CAAE;IAACC,aAAa,EAAC,KAAK;IAAAjB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxCN,KAAA;IACEmB,uBAAuB,EAAE;MACvBC,MAAM,EAAEnG,IAAI,CACVC,GAAG,CAAC8D,KAAK,EAAG7B,IAAI,IAAK;QACnB,IAAIkE,QAAQ,GAAG,CAAClE,IAAI,CAACC,KAAK,IAAI,EAAE,EAAEkE,MAAM,CAAC,CAACC,GAAG,EAAEnE,KAAK,KAAK;UACvD,OAAOmE,GAAG,GAAGrE,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAE,OAAO,CAAC;QACnD,CAAC,EAAE,EAAE,CAAC;QACN,OAAOiE,QAAQ;MACjB,CAAC,CAAC,EACF,EACF;IACF,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACU,CACL,CACX,EACAzC,IAAI,KAAK,SAAS,IACjBmC,KAAA,CAAC5E,IAAI,CAAC2F,GAAG;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACPN,KAAA,CAAC5E,IAAI,CAAC4F,MAAM;IAACC,KAAK,EAAE,EAAG;IAACC,aAAa,EAAC,KAAK;IAAAjB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACzCN,KAAA;IACEmB,uBAAuB,EAAE;MACvBC,MAAM,EAAEnG,IAAI,CACVC,GAAG,CAAC8D,KAAK,EAAG7B,IAAI,IAAK;QACnB,IAAIkE,QAAQ,GAAG,CAAClE,IAAI,CAACC,KAAK,IAAI,EAAE,EAAEkE,MAAM,CAAC,CAACC,GAAG,EAAEnE,KAAK,KAAK;UACvD,OAAOmE,GAAG,GAAGrE,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAE,SAAS,CAAC;QACrD,CAAC,EAAE,EAAE,CAAC;QACN,OAAOiE,QAAQ;MACjB,CAAC,CAAC,EACF,EACF;IACF,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACU,CACL,CAER,CAAC;AAEX,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAtC,EAAA,CAtLMR,SAAS;EAAA,QASI/B,WAAW;AAAA;AAAA+F,EAAA,GATxBhE,SAAS;AA2LfA,SAAS,CAACiE,SAAS,GAAG;EACpBhE,GAAG,EAAEtC,SAAS,CAACuG,GAAG,CAACC,UAAU;EAC7BjE,GAAG,EAAEvC,SAAS,CAACuG,GAAG,CAACC,UAAU;EAC7BhE,UAAU,EAAExC,SAAS,CAACuG,GAAG;EACzB9D,UAAU,EAAEzC,SAAS,CAACuG,GAAG;EACzB7D,IAAI,EAAE1C,SAAS,CAACyG,MAAM,CAACD,UAAU;EACjC7D,MAAM,EAAE3C,SAAS,CAAC0G,KAAK,CAAC;IACtB1C,MAAM,EAAEhE,SAAS,CAACyG,MAAM;IACxBjB,IAAI,EAAExF,SAAS,CAACyG,MAAM;IACtBf,KAAK,EAAE1F,SAAS,CAACyG;EACnB,CAAC,CAAC,CAACD;AACL,CAAC;AAED,eAAe5F,cAAc,CAAC,SAAS,CAAC,CAACyB,SAAS,CAAC;AAAC,IAAAgE,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}