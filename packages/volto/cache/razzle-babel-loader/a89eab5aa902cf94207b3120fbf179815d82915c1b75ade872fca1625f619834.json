{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Aliases/Aliases.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { toast } from 'react-toastify';\nimport { Button, Checkbox, Container, Form, Header, Input, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions/aliases/aliases';\nimport { getContent } from '@plone/volto/actions/content/content';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  }\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: []\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: ''\n    });\n    this.props.getContent(getBaseUrl(this.props.pathname));\n    this.setState({\n      isClient: true\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      var _this$props$aliases;\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({\n          isAliasCorrect: true\n        });\n      } else {\n        this.setState({\n          isAliasCorrect: false\n        });\n      }\n      if ((_this$props$aliases = this.props.aliases) !== null && _this$props$aliases !== void 0 && _this$props$aliases.items.find(item => item.path === this.state.newAlias)) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.success),\n          content: this.props.intl.formatMessage(messages.successAdd),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }\n        }));\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({\n      newAlias: val\n    });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias\n      });\n      this.setState({\n        newAlias: ''\n      });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({\n          aliasesToRemove: newAliasesArr\n        });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias]\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove\n    });\n    this.setState({\n      aliasesToRemove: []\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$aliases2;\n    return __jsx(Container, {\n      id: \"aliases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.aliases),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"URL Management for {title}\",\n      defaultMessage: \"URL Management for {title}\",\n      values: {\n        title: __jsx(\"q\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 32\n          }\n        }, this.props.title)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n      defaultMessage: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    })), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add a new alternative url\",\n      defaultMessage: \"Add a new alternative url\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    })), __jsx(\"p\", {\n      className: \"help\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      defaultMessage: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      id: \"alternative-url-input\",\n      name: \"alternative-url\",\n      placeholder: \"/example\",\n      value: this.state.newAlias,\n      onChange: e => this.handleAltChange(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }), !this.state.isAliasCorrect && this.state.newAlias !== '' && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path must start with a slash.\",\n      defaultMessage: \"Alternative url path must start with a slash.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    })), this.state.isAliasAlready && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The provided alternative url already exists!\",\n      defaultMessage: \"The provided alternative url already exists!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }\n    }))), __jsx(Button, {\n      id: \"submit-alias\",\n      primary: true,\n      onClick: () => this.handleSubmitAlias(),\n      disabled: !this.state.isAliasCorrect || this.state.newAlias === '' || this.state.isAliasAlready,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Existing alternative urls for this item\",\n      defaultMessage: \"Existing alternative urls for this item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    })), (_this$props$aliases2 = this.props.aliases) === null || _this$props$aliases2 === void 0 ? void 0 : _this$props$aliases2.items.map((alias, i) => __jsx(Form.Field, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }\n    }, __jsx(Checkbox, {\n      id: `alias-check-${i}`,\n      onChange: (e, {\n        value\n      }) => this.handleCheckAlias(value),\n      value: alias.path,\n      label: alias.path,\n      checked: this.state.aliasesToRemove.includes(alias.path),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 19\n      }\n    }))), __jsx(Button, {\n      id: \"remove-alias\",\n      onClick: () => this.handleRemoveAliases(),\n      primary: true,\n      disabled: this.state.aliasesToRemove.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Remove\",\n      defaultMessage: \"Remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }\n    }))))), this.state.isClient && /*#__PURE__*/createPortal(__jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 13\n      }\n    }), document.getElementById('toolbar')));\n  }\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_defineProperty(Aliases, \"propTypes\", {\n  removeAliases: PropTypes.func.isRequired,\n  addAliases: PropTypes.func.isRequired,\n  getAliases: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$content$data;\n  return {\n    aliases: state.aliases,\n    pathname: props.location.pathname,\n    title: ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || ''\n  };\n}, {\n  addAliases,\n  getAliases,\n  removeAliases,\n  getContent\n}))(Aliases);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","createPortal","toast","Button","Checkbox","Container","Form","Header","Input","Segment","FormattedMessage","defineMessages","injectIntl","removeAliases","addAliases","getAliases","getContent","Helmet","getBaseUrl","Icon","Toolbar","Toast","backSVG","messages","back","aliases","success","successAdd","Aliases","constructor","props","state","isClient","newAlias","isAliasCorrect","isAliasAlready","aliasesToRemove","componentDidMount","pathname","query","manual","datetime","batchSize","setState","componentDidUpdate","prevProps","prevState","_this$props$aliases","charAt","items","find","item","path","UNSAFE_componentWillReceiveProps","nextProps","add","loading","loaded","error","__jsx","title","intl","formatMessage","content","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","remove","handleAltChange","val","handleSubmitAlias","handleCheckAlias","alias","includes","index","indexOf","newAliasesArr","splice","handleRemoveAliases","render","_this$props$aliases2","id","Group","raised","className","defaultMessage","values","secondary","size","Field","name","placeholder","value","onChange","e","target","style","color","primary","onClick","disabled","map","i","key","label","checked","length","hideDefaultViewButtons","inner","to","document","getElementById","_defineProperty","func","isRequired","string","_state$content$data","location","data"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Aliases/Aliases.jsx"],"sourcesContent":["/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { createPortal } from 'react-dom';\nimport { toast } from 'react-toastify';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Input,\n  Segment,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport {\n  removeAliases,\n  addAliases,\n  getAliases,\n} from '@plone/volto/actions/aliases/aliases';\nimport { getContent } from '@plone/volto/actions/content/content';\n\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nimport Toast from '@plone/volto/components/manage/Toast/Toast';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeAliases: PropTypes.func.isRequired,\n    addAliases: PropTypes.func.isRequired,\n    getAliases: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: '',\n    });\n    this.props.getContent(getBaseUrl(this.props.pathname));\n    this.setState({ isClient: true });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({ isAliasCorrect: true });\n      } else {\n        this.setState({ isAliasCorrect: false });\n      }\n      if (\n        this.props.aliases?.items.find(\n          (item) => item.path === this.state.newAlias,\n        )\n      ) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n        toast.success(\n          <Toast\n            success\n            title={this.props.intl.formatMessage(messages.success)}\n            content={this.props.intl.formatMessage(messages.successAdd)}\n          />,\n        );\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({ newAlias: val });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias,\n      });\n      this.setState({ newAlias: '' });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({ aliasesToRemove: newAliasesArr });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias],\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove,\n    });\n    this.setState({ aliasesToRemove: [] });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"aliases\">\n        <Helmet title={this.props.intl.formatMessage(messages.aliases)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"URL Management for {title}\"\n              defaultMessage=\"URL Management for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n              defaultMessage=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n            />\n          </Segment>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Add a new alternative url\"\n                  defaultMessage=\"Add a new alternative url\"\n                />\n              </Header>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                  defaultMessage=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                />\n              </p>\n              <Form.Field>\n                <Input\n                  id=\"alternative-url-input\"\n                  name=\"alternative-url\"\n                  placeholder=\"/example\"\n                  value={this.state.newAlias}\n                  onChange={(e) => this.handleAltChange(e.target.value)}\n                />\n                {!this.state.isAliasCorrect && this.state.newAlias !== '' && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Alternative url path must start with a slash.\"\n                      defaultMessage=\"Alternative url path must start with a slash.\"\n                    />\n                  </p>\n                )}\n                {this.state.isAliasAlready && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"The provided alternative url already exists!\"\n                      defaultMessage=\"The provided alternative url already exists!\"\n                    />\n                  </p>\n                )}\n              </Form.Field>\n              <Button\n                id=\"submit-alias\"\n                primary\n                onClick={() => this.handleSubmitAlias()}\n                disabled={\n                  !this.state.isAliasCorrect ||\n                  this.state.newAlias === '' ||\n                  this.state.isAliasAlready\n                }\n              >\n                <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n              </Button>\n            </Segment>\n          </Form>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Existing alternative urls for this item\"\n                  defaultMessage=\"Existing alternative urls for this item\"\n                />\n              </Header>\n              {this.props.aliases?.items.map((alias, i) => (\n                <Form.Field key={i}>\n                  <Checkbox\n                    id={`alias-check-${i}`}\n                    onChange={(e, { value }) => this.handleCheckAlias(value)}\n                    value={alias.path}\n                    label={alias.path}\n                    checked={this.state.aliasesToRemove.includes(alias.path)}\n                  />\n                </Form.Field>\n              ))}\n              <Button\n                id=\"remove-alias\"\n                onClick={() => this.handleRemoveAliases()}\n                primary\n                disabled={this.state.aliasesToRemove.length === 0}\n              >\n                <FormattedMessage id=\"Remove\" defaultMessage=\"Remove\" />\n              </Button>\n            </Segment>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient &&\n          createPortal(\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />,\n            document.getElementById('toolbar'),\n          )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      aliases: state.aliases,\n      pathname: props.location.pathname,\n      title: state.content.data?.title || '',\n    }),\n    { addAliases, getAliases, removeAliases, getContent },\n  ),\n)(Aliases);\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"URL Management for {title}","defaultMessage":"URL Management for {title}"},{"id":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.","defaultMessage":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs."},{"id":"Add a new alternative url","defaultMessage":"Add a new alternative url"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring."},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative url path must start with a slash."},{"id":"The provided alternative url already exists!","defaultMessage":"The provided alternative url already exists!"},{"id":"Add","defaultMessage":"Add"},{"id":"Existing alternative urls for this item","defaultMessage":"Existing alternative urls for this item"},{"id":"Remove","defaultMessage":"Remove"}]}},"sourceType":"module","externalDependencies":[]}