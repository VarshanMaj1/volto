{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/VocabularyTermsWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * VocabularyTermsWidget\n * @module components/manage/Widgets/VocabularyTermsWidget\n * Widget for plone.schema.JSONField field meant for a SimpleVocabulary source\n *\n\nVOCABULARY_SCHEMA = json.dumps(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"items\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"token\": {\"type\": \"string\"},\n                        \"titles\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"lang\": {\"type\": \"string\"},\n                                \"title\": {\"type\": \"string\"},\n                            }\n                        },\n                    }\n                }\n            }\n        },\n    }\n)\n\n\nclass IPloneconfSettings(Interface):\n\n    types_of_foo = schema.JSONField(\n        title=\"Types of Foo\",\n        description=\"Available types of a foo\",\n        required=False,\n        schema=VOCABULARY_SCHEMA,\n        widget=\"vocabularyterms\",\n        default={\"items\": [\n            {\n                \"token\": \"talk\",\n                \"titles\": {\n                    \"en\": \"Talk\",\n                    \"de\": \"Vortrag\",\n                }\n            },\n            {\n                \"token\": \"lightning-talk\",\n                \"titles\": {\n                    \"en\": \"Lightning-Talk\",\n                    \"de\": \"kÃ¼rzerer erleuchtender Vortrag\",\n                }\n            },\n        ]},\n        missing_value={\"items\": []},\n    )\n\n\n@provider(IVocabularyFactory)\ndef TalkTypesVocabulary(context):\n    name = \"ploneconf.types_of_talk\"\n    registry_record_value = api.portal.get_registry_record(name)\n    items = registry_record_value.get('items', [])\n    lang = api.portal.get_current_language()\n    return SimpleVocabulary.fromItems([[item['token'], item['token'], item['titles'][lang]] for item in items])\n\n\n * titles are editable\n * tokens are generated\n *\n * Purpose: Use this widget for a controlpanel field\n * that acts as a source of a vocabulary for a zope.schema.Choice field.\n * Vocabulary terms should change over time only in title, not value,\n * as vocabulary term values are stored on content type instances.\n *\n * Apply widget with `widget='vocabularyterms'`\n * Future widget directive coming: Apply widget with directive widget\n *\n * See storybook for a demo: Run\n * `yarn storybook`\n * or see https://docs.voltocms.com/storybook/\n */\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex';\nimport remove from 'lodash/remove';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport { Button } from 'semantic-ui-react';\nimport DragDropList from '@plone/volto/components/manage/DragDropList/DragDropList';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Vocabulary terms\",\n    \"defaultMessage\": \"Vocabulary terms\"\n  },\n  termtitle: {\n    \"id\": \"Vocabulary term\",\n    \"defaultMessage\": \"Vocabulary term\"\n  },\n  addTerm: {\n    \"id\": \"Add vocabulary term\",\n    \"defaultMessage\": \"Add term\"\n  },\n  removeTerm: {\n    \"id\": \"Remove term\",\n    \"defaultMessage\": \"Remove term\"\n  },\n  clearTermTitle: {\n    \"id\": \"Reset term title\",\n    \"defaultMessage\": \"Reset title\"\n  },\n  termtitlelabel: {\n    \"id\": \"Vocabulary term title\",\n    \"defaultMessage\": \"Title\"\n  }\n});\nconst VocabularyTermsWidget = props => {\n  var _vocabularyterms$map;\n  const {\n    id,\n    value = {},\n    onChange\n  } = props;\n  var widgetvalue = value;\n  const dispatch = useDispatch();\n  const [toFocusId, setToFocusId] = React.useState('');\n  const [editableToken, setEditableToken] = React.useState('');\n  const intl = useIntl();\n  React.useEffect(() => {\n    const element = document.getElementById(toFocusId);\n    element && element.focus();\n    setToFocusId('');\n  }, [dispatch, toFocusId]);\n\n  // LEGACY: value from unordered zope.schema.Dict instead of zope.schema.JSONField\n  if (widgetvalue.items === undefined) {\n    widgetvalue = {\n      items: Object.keys(widgetvalue).map(key => {\n        return {\n          token: key,\n          titles: {\n            en: widgetvalue[key]\n          }\n        };\n      })\n    };\n  }\n  let vocabularyterms = widgetvalue.items;\n  let supportedLanguages = Object.keys((vocabularyterms === null || vocabularyterms === void 0 ? void 0 : (_vocabularyterms$map = vocabularyterms.map(el => el.titles)) === null || _vocabularyterms$map === void 0 ? void 0 : _vocabularyterms$map.pop()) || {});\n  const TermSchema = {\n    title: 'Translation of term',\n    fieldsets: [{\n      id: 'default',\n      title: 'Email',\n      fields: supportedLanguages\n    }],\n    properties: Object.fromEntries(supportedLanguages.map(languageIdentifier => {\n      var _langmap$languageIden, _langmap$languageIden2;\n      return [languageIdentifier, {\n        title: (_langmap$languageIden = (_langmap$languageIden2 = langmap[languageIdentifier]) === null || _langmap$languageIden2 === void 0 ? void 0 : _langmap$languageIden2.nativeName) !== null && _langmap$languageIden !== void 0 ? _langmap$languageIden : languageIdentifier\n      }];\n    })),\n    required: []\n  };\n  function onChangeFieldHandler(token, fieldid, fieldvalue) {\n    let index = findIndex(widgetvalue.items, {\n      token: token\n    });\n    let newitems = widgetvalue.items;\n    newitems.splice(index, 1, {\n      token: token,\n      titles: fieldvalue\n    });\n    onChange(id, {\n      items: newitems\n    });\n  }\n  function addTermHandler(e) {\n    e.preventDefault();\n    const newtoken = uuid();\n    let newitems = widgetvalue.items;\n    newitems.push({\n      token: newtoken,\n      titles: Object.fromEntries(supportedLanguages.map(el => [el, '']))\n    });\n    onChange(id, {\n      items: newitems\n    });\n    setToFocusId(`field-${supportedLanguages[0]}-0-${id}-${newtoken}`);\n    setEditableToken(newtoken);\n  }\n  function swap(arr, from, to) {\n    arr.splice(from, 1, arr.splice(to, 1, arr[from])[0]);\n  }\n  let enhancedvocabularyterms = vocabularyterms.map(el => {\n    return _objectSpread(_objectSpread({}, el), {}, {\n      '@id': el.token\n    });\n  });\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"vocabularytermswidget dictwidget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"add-item-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    \"aria-label\": intl.formatMessage(messages.termtitle),\n    onClick: e => {\n      addTermHandler(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: addSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }), intl.formatMessage(messages.addTerm))), __jsx(DragDropList, {\n    childList: enhancedvocabularyterms.map(o => [o['@id'], o]),\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      let newitems = widgetvalue.items;\n      swap(newitems, source.index, destination.index);\n      onChange(id, {\n        items: newitems\n      });\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, dragProps => {\n    const {\n      child,\n      childId,\n      index\n    } = dragProps;\n    let termProps = {\n      index: index,\n      id,\n      vocabularyterms,\n      vterm: child,\n      onChange\n    };\n    return termsWrapper(dragProps, __jsx(ObjectWidget, {\n      id: `${id}-${child.token}`,\n      key: childId,\n      onChange: (fieldid, fieldvalue) => {\n        onChangeFieldHandler(child.token, fieldid, fieldvalue);\n      },\n      value: child.titles,\n      schema: TermSchema,\n      title: \"Translation of term\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }), _objectSpread({\n      editableToken,\n      setEditableToken\n    }, termProps));\n  }));\n};\nconst termsWrapper = ({\n  draginfo\n}, OW, termProps) => __jsx(TermsWrapper, {\n  draginfo: draginfo,\n  termProps: termProps,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 3\n  }\n}, OW);\nconst TermsWrapper = props => {\n  const intl = useIntl();\n  const {\n    termProps,\n    draginfo,\n    children\n  } = props;\n  const {\n    id,\n    vocabularyterms,\n    vterm,\n    onChange\n  } = termProps;\n  const _updateTermsWithNewToken = (term, newtoken) => {\n    let newitems = termProps.vocabularyterms;\n    let index = findIndex(newitems, {\n      token: term.token\n    });\n    newitems.splice(index, 1, {\n      token: newtoken,\n      titles: newitems[index].titles\n    });\n    onChange(id, {\n      items: newitems\n    });\n  };\n  function onChangeTokenHandler(event) {\n    let value = event.target.value;\n    // required token length: 3\n    if (value.length > 2) {\n      // check if value is different from already used tokens\n      if (find(termProps.vocabularyterms, el => el.token === value)) {\n        // token already token. Stay with uuid.\n      } else {\n        // `token '${value}' is OK`\n        _updateTermsWithNewToken(vterm, value);\n        termProps.setEditableToken('');\n      }\n    }\n  }\n  return __jsx(\"div\", _extends({\n    ref: draginfo.innerRef\n  }, draginfo.draggableProps, {\n    className: \"vocabularyterm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    style: {\n      alignItems: 'center',\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", _extends({}, draginfo.dragHandleProps, {\n    className: \"draghandlewrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }), __jsx(Icon, {\n    name: dragSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: \"ui drag block inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, children), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, vterm.token === termProps.editableToken ? __jsx(\"input\", {\n    id: `token-${vterm.token}`,\n    title: \"Token\",\n    placeholder: \"token\",\n    onBlur: onChangeTokenHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }) : null, __jsx(Button, {\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    title: intl.formatMessage(messages.removeTerm),\n    \"aria-label\": `${intl.formatMessage(messages.removeTerm)} #${vterm.token}`,\n    onClick: e => {\n      e.preventDefault();\n      remove(vocabularyterms, el => el.token === vterm.token);\n      onChange(id, {\n        items: vocabularyterms\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    color: \"#e40166\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default VocabularyTermsWidget;","map":{"version":3,"names":["React","useDispatch","find","findIndex","remove","defineMessages","useIntl","v4","uuid","Button","DragDropList","Icon","FormFieldWrapper","ObjectWidget","langmap","deleteSVG","addSVG","dragSVG","messages","title","termtitle","addTerm","removeTerm","clearTermTitle","termtitlelabel","VocabularyTermsWidget","props","_vocabularyterms$map","id","value","onChange","widgetvalue","dispatch","toFocusId","setToFocusId","useState","editableToken","setEditableToken","intl","useEffect","element","document","getElementById","focus","items","undefined","Object","keys","map","key","token","titles","en","vocabularyterms","supportedLanguages","el","pop","TermSchema","fieldsets","fields","properties","fromEntries","languageIdentifier","_langmap$languageIden","_langmap$languageIden2","nativeName","required","onChangeFieldHandler","fieldid","fieldvalue","index","newitems","splice","addTermHandler","e","preventDefault","newtoken","push","swap","arr","from","to","enhancedvocabularyterms","_objectSpread","__jsx","_extends","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMessage","onClick","name","size","childList","o","onMoveItem","result","source","destination","dragProps","child","childId","termProps","vterm","termsWrapper","schema","draginfo","OW","TermsWrapper","children","_updateTermsWithNewToken","term","onChangeTokenHandler","event","target","length","ref","innerRef","draggableProps","style","alignItems","display","dragHandleProps","placeholder","onBlur","icon","basic","color"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Widgets/VocabularyTermsWidget.jsx"],"sourcesContent":["/**\n * VocabularyTermsWidget\n * @module components/manage/Widgets/VocabularyTermsWidget\n * Widget for plone.schema.JSONField field meant for a SimpleVocabulary source\n *\n\nVOCABULARY_SCHEMA = json.dumps(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"items\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"token\": {\"type\": \"string\"},\n                        \"titles\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"lang\": {\"type\": \"string\"},\n                                \"title\": {\"type\": \"string\"},\n                            }\n                        },\n                    }\n                }\n            }\n        },\n    }\n)\n\n\nclass IPloneconfSettings(Interface):\n\n    types_of_foo = schema.JSONField(\n        title=\"Types of Foo\",\n        description=\"Available types of a foo\",\n        required=False,\n        schema=VOCABULARY_SCHEMA,\n        widget=\"vocabularyterms\",\n        default={\"items\": [\n            {\n                \"token\": \"talk\",\n                \"titles\": {\n                    \"en\": \"Talk\",\n                    \"de\": \"Vortrag\",\n                }\n            },\n            {\n                \"token\": \"lightning-talk\",\n                \"titles\": {\n                    \"en\": \"Lightning-Talk\",\n                    \"de\": \"kÃ¼rzerer erleuchtender Vortrag\",\n                }\n            },\n        ]},\n        missing_value={\"items\": []},\n    )\n\n\n@provider(IVocabularyFactory)\ndef TalkTypesVocabulary(context):\n    name = \"ploneconf.types_of_talk\"\n    registry_record_value = api.portal.get_registry_record(name)\n    items = registry_record_value.get('items', [])\n    lang = api.portal.get_current_language()\n    return SimpleVocabulary.fromItems([[item['token'], item['token'], item['titles'][lang]] for item in items])\n\n\n * titles are editable\n * tokens are generated\n *\n * Purpose: Use this widget for a controlpanel field\n * that acts as a source of a vocabulary for a zope.schema.Choice field.\n * Vocabulary terms should change over time only in title, not value,\n * as vocabulary term values are stored on content type instances.\n *\n * Apply widget with `widget='vocabularyterms'`\n * Future widget directive coming: Apply widget with directive widget\n *\n * See storybook for a demo: Run\n * `yarn storybook`\n * or see https://docs.voltocms.com/storybook/\n */\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex';\nimport remove from 'lodash/remove';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\n\nimport { Button } from 'semantic-ui-react';\n\nimport DragDropList from '@plone/volto/components/manage/DragDropList/DragDropList';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\nimport langmap from '@plone/volto/helpers/LanguageMap/LanguageMap';\n\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Vocabulary terms',\n    defaultMessage: 'Vocabulary terms',\n  },\n  termtitle: {\n    id: 'Vocabulary term',\n    defaultMessage: 'Vocabulary term',\n  },\n  addTerm: {\n    id: 'Add vocabulary term',\n    defaultMessage: 'Add term',\n  },\n  removeTerm: {\n    id: 'Remove term',\n    defaultMessage: 'Remove term',\n  },\n  clearTermTitle: {\n    id: 'Reset term title',\n    defaultMessage: 'Reset title',\n  },\n  termtitlelabel: {\n    id: 'Vocabulary term title',\n    defaultMessage: 'Title',\n  },\n});\n\nconst VocabularyTermsWidget = (props) => {\n  const { id, value = {}, onChange } = props;\n  var widgetvalue = value;\n  const dispatch = useDispatch();\n  const [toFocusId, setToFocusId] = React.useState('');\n  const [editableToken, setEditableToken] = React.useState('');\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    const element = document.getElementById(toFocusId);\n    element && element.focus();\n    setToFocusId('');\n  }, [dispatch, toFocusId]);\n\n  // LEGACY: value from unordered zope.schema.Dict instead of zope.schema.JSONField\n  if (widgetvalue.items === undefined) {\n    widgetvalue = {\n      items: Object.keys(widgetvalue).map((key) => {\n        return {\n          token: key,\n          titles: {\n            en: widgetvalue[key],\n          },\n        };\n      }),\n    };\n  }\n\n  let vocabularyterms = widgetvalue.items;\n\n  let supportedLanguages = Object.keys(\n    vocabularyterms?.map((el) => el.titles)?.pop() || {},\n  );\n\n  const TermSchema = {\n    title: 'Translation of term',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Email',\n        fields: supportedLanguages,\n      },\n    ],\n    properties: Object.fromEntries(\n      supportedLanguages.map((languageIdentifier) => [\n        languageIdentifier,\n        {\n          title: langmap[languageIdentifier]?.nativeName ?? languageIdentifier,\n        },\n      ]),\n    ),\n    required: [],\n  };\n\n  function onChangeFieldHandler(token, fieldid, fieldvalue) {\n    let index = findIndex(widgetvalue.items, { token: token });\n    let newitems = widgetvalue.items;\n    newitems.splice(index, 1, {\n      token: token,\n      titles: fieldvalue,\n    });\n    onChange(id, {\n      items: newitems,\n    });\n  }\n\n  function addTermHandler(e) {\n    e.preventDefault();\n    const newtoken = uuid();\n    let newitems = widgetvalue.items;\n    newitems.push({\n      token: newtoken,\n      titles: Object.fromEntries(supportedLanguages.map((el) => [el, ''])),\n    });\n    onChange(id, {\n      items: newitems,\n    });\n    setToFocusId(`field-${supportedLanguages[0]}-0-${id}-${newtoken}`);\n    setEditableToken(newtoken);\n  }\n\n  function swap(arr, from, to) {\n    arr.splice(from, 1, arr.splice(to, 1, arr[from])[0]);\n  }\n\n  let enhancedvocabularyterms = vocabularyterms.map((el) => {\n    return { ...el, '@id': el.token };\n  });\n\n  return (\n    <FormFieldWrapper {...props} className=\"vocabularytermswidget dictwidget\">\n      <div className=\"add-item-button-wrapper\">\n        <Button\n          aria-label={intl.formatMessage(messages.termtitle)}\n          onClick={(e) => {\n            addTermHandler(e);\n          }}\n        >\n          <Icon name={addSVG} size=\"18px\" />\n          {intl.formatMessage(messages.addTerm)}\n        </Button>\n      </div>\n      <DragDropList\n        childList={enhancedvocabularyterms.map((o) => [o['@id'], o])}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n          let newitems = widgetvalue.items;\n          swap(newitems, source.index, destination.index);\n          onChange(id, {\n            items: newitems,\n          });\n          return true;\n        }}\n      >\n        {(dragProps) => {\n          const { child, childId, index } = dragProps;\n          let termProps = {\n            index: index,\n            id,\n            vocabularyterms,\n            vterm: child,\n            onChange,\n          };\n          return termsWrapper(\n            dragProps,\n            <ObjectWidget\n              id={`${id}-${child.token}`}\n              key={childId}\n              onChange={(fieldid, fieldvalue) => {\n                onChangeFieldHandler(child.token, fieldid, fieldvalue);\n              }}\n              value={child.titles}\n              schema={TermSchema}\n              title=\"Translation of term\"\n            />,\n            { editableToken, setEditableToken, ...termProps },\n          );\n        }}\n      </DragDropList>\n    </FormFieldWrapper>\n  );\n};\n\nconst termsWrapper = ({ draginfo }, OW, termProps) => (\n  <TermsWrapper draginfo={draginfo} termProps={termProps}>\n    {OW}\n  </TermsWrapper>\n);\n\nconst TermsWrapper = (props) => {\n  const intl = useIntl();\n  const { termProps, draginfo, children } = props;\n  const { id, vocabularyterms, vterm, onChange } = termProps;\n\n  const _updateTermsWithNewToken = (term, newtoken) => {\n    let newitems = termProps.vocabularyterms;\n    let index = findIndex(newitems, { token: term.token });\n    newitems.splice(index, 1, {\n      token: newtoken,\n      titles: newitems[index].titles,\n    });\n    onChange(id, {\n      items: newitems,\n    });\n  };\n\n  function onChangeTokenHandler(event) {\n    let value = event.target.value;\n    // required token length: 3\n    if (value.length > 2) {\n      // check if value is different from already used tokens\n      if (find(termProps.vocabularyterms, (el) => el.token === value)) {\n        // token already token. Stay with uuid.\n      } else {\n        // `token '${value}' is OK`\n        _updateTermsWithNewToken(vterm, value);\n        termProps.setEditableToken('');\n      }\n    }\n  }\n\n  return (\n    <div\n      ref={draginfo.innerRef}\n      {...draginfo.draggableProps}\n      className=\"vocabularyterm\"\n    >\n      <div style={{ alignItems: 'center', display: 'flex' }}>\n        <div {...draginfo.dragHandleProps} className=\"draghandlewrapper\">\n          <Icon name={dragSVG} size=\"18px\" />\n        </div>\n        <div className=\"ui drag block inner\">{children}</div>\n        <div>\n          {vterm.token === termProps.editableToken ? (\n            <input\n              id={`token-${vterm.token}`}\n              title=\"Token\"\n              placeholder=\"token\"\n              onBlur={onChangeTokenHandler}\n            />\n          ) : null}\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            title={intl.formatMessage(messages.removeTerm)}\n            aria-label={`${intl.formatMessage(messages.removeTerm)} #${\n              vterm.token\n            }`}\n            onClick={(e) => {\n              e.preventDefault();\n              remove(vocabularyterms, (el) => el.token === vterm.token);\n              onChange(id, { items: vocabularyterms });\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" color=\"#e40166\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VocabularyTermsWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Vocabulary terms","defaultMessage":"Vocabulary terms"},{"id":"Vocabulary term","defaultMessage":"Vocabulary term"},{"id":"Add vocabulary term","defaultMessage":"Add term"},{"id":"Remove term","defaultMessage":"Remove term"},{"id":"Reset term title","defaultMessage":"Reset title"},{"id":"Vocabulary term title","defaultMessage":"Title"}]}},"sourceType":"module","externalDependencies":[]}