{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/ui/Toolbar.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport cx from 'classnames';\nimport React, { useRef, useEffect } from 'react';\nimport { useSlate } from 'slate-react';\nimport Separator from './Separator';\nimport BasicToolbar from './BasicToolbar';\nimport { Editor, Node } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { createPortal } from 'react-dom';\nconst Toolbar = ({\n  elementType,\n  enableExpando = false,\n  toggleButton,\n  className,\n  children,\n  show = true\n}) => {\n  _s();\n  const ref = useRef();\n  const editor = useSlate();\n  useEffect(() => {\n    const domNode = ref.current;\n    let rect = {\n      width: 1,\n      top: 0,\n      left: 0\n    };\n    if ((children || []).length === 0) {\n      domNode.removeAttribute('style');\n      return;\n    }\n    if (!show) {\n      domNode.removeAttribute('style');\n      return;\n    }\n    const {\n      selection\n    } = editor;\n    // const savedSelection = editor.getSavedSelection();\n    if (!selection) {\n      domNode.removeAttribute('style');\n      return;\n    }\n    if (editor.isSidebarOpen) {\n      domNode.removeAttribute('style');\n      return;\n    }\n    if (elementType) {\n      const [element] = Editor.nodes(editor, {\n        at: editor.selection || editor.getSavedSelection(),\n        match: n => n.type === elementType\n      });\n      if (!element) {\n        domNode.removeAttribute('style');\n        return;\n      }\n      const [node] = element;\n      const domEl = ReactEditor.toDOMNode(editor, node);\n      rect = domEl.getBoundingClientRect();\n    } else {\n      // TODO: should we fallback to editor.getSelection()?\n      // TODO: test with third party plugins\n      const slateNode = Node.get(editor, selection.anchor.path);\n      try {\n        const domEl = ReactEditor.toDOMNode(editor, slateNode);\n        rect = domEl.getBoundingClientRect();\n      } catch {\n        // ignoring error here is safe, editor is out of sync and the selection\n        // is actually none, so no toolbar should be shown\n      }\n    }\n    domNode.style.opacity = 1;\n    domNode.style.top = `${rect.top + window.pageYOffset - domNode.offsetHeight - 6}px`;\n    domNode.style.left = `${Math.max(rect.left + window.pageXOffset - domNode.offsetWidth / 2 + rect.width / 2, 0 // if the left edge of the toolbar should be otherwise offscreen\n    )}px`;\n  });\n  return /*#__PURE__*/createPortal(__jsx(BasicToolbar, {\n    className: cx('slate-inline-toolbar', {\n      [className]: className\n    }),\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, children, enableExpando && toggleButton && __jsx(React.Fragment, null, __jsx(Separator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), toggleButton)), document.body);\n};\n_s(Toolbar, \"zR6WV11V6v+T2KLkAbtbVw8+RTk=\", false, function () {\n  return [useSlate];\n});\n_c = Toolbar;\nexport default Toolbar;\nvar _c;\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"names":["cx","React","useRef","useEffect","useSlate","Separator","BasicToolbar","Editor","Node","ReactEditor","createPortal","Toolbar","elementType","enableExpando","toggleButton","className","children","show","_s","ref","editor","domNode","current","rect","width","top","left","length","removeAttribute","selection","isSidebarOpen","element","nodes","at","getSavedSelection","match","n","type","node","domEl","toDOMNode","getBoundingClientRect","slateNode","get","anchor","path","style","opacity","window","pageYOffset","offsetHeight","Math","max","pageXOffset","offsetWidth","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","document","body","_c","$RefreshReg$"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto-slate/src/editor/ui/Toolbar.jsx"],"sourcesContent":["import cx from 'classnames';\nimport React, { useRef, useEffect } from 'react';\nimport { useSlate } from 'slate-react';\nimport Separator from './Separator';\nimport BasicToolbar from './BasicToolbar';\nimport { Editor, Node } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { createPortal } from 'react-dom';\n\nconst Toolbar = ({\n  elementType,\n  enableExpando = false,\n  toggleButton,\n  className,\n  children,\n  show = true,\n}) => {\n  const ref = useRef();\n  const editor = useSlate();\n\n  useEffect(() => {\n    const domNode = ref.current;\n    let rect = { width: 1, top: 0, left: 0 };\n\n    if ((children || []).length === 0) {\n      domNode.removeAttribute('style');\n      return;\n    }\n\n    if (!show) {\n      domNode.removeAttribute('style');\n      return;\n    }\n\n    const { selection } = editor;\n    // const savedSelection = editor.getSavedSelection();\n    if (!selection) {\n      domNode.removeAttribute('style');\n      return;\n    }\n\n    if (editor.isSidebarOpen) {\n      domNode.removeAttribute('style');\n      return;\n    }\n\n    if (elementType) {\n      const [element] = Editor.nodes(editor, {\n        at: editor.selection || editor.getSavedSelection(),\n        match: (n) => n.type === elementType,\n      });\n\n      if (!element) {\n        domNode.removeAttribute('style');\n        return;\n      }\n\n      const [node] = element;\n      const domEl = ReactEditor.toDOMNode(editor, node);\n\n      rect = domEl.getBoundingClientRect();\n    } else {\n      // TODO: should we fallback to editor.getSelection()?\n      // TODO: test with third party plugins\n      const slateNode = Node.get(editor, selection.anchor.path);\n      try {\n        const domEl = ReactEditor.toDOMNode(editor, slateNode);\n        rect = domEl.getBoundingClientRect();\n      } catch {\n        // ignoring error here is safe, editor is out of sync and the selection\n        // is actually none, so no toolbar should be shown\n      }\n    }\n\n    domNode.style.opacity = 1;\n    domNode.style.top = `${\n      rect.top + window.pageYOffset - domNode.offsetHeight - 6\n    }px`;\n    domNode.style.left = `${Math.max(\n      rect.left + window.pageXOffset - domNode.offsetWidth / 2 + rect.width / 2,\n      0, // if the left edge of the toolbar should be otherwise offscreen\n    )}px`;\n  });\n\n  return createPortal(\n    <BasicToolbar\n      className={cx('slate-inline-toolbar', { [className]: className })}\n      ref={ref}\n    >\n      {children}\n      {enableExpando && toggleButton && (\n        <>\n          <Separator />\n          {toggleButton}\n        </>\n      )}\n    </BasicToolbar>,\n    document.body,\n  );\n};\n\nexport default Toolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}