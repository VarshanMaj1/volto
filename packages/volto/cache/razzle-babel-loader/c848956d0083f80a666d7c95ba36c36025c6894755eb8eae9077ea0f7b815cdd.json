{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/server.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport keys from 'lodash/keys';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport Html from '@plone/volto/helpers/Html/Html';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport { persistAuthToken } from '@plone/volto/helpers/AuthToken/AuthToken';\nimport { toBackendLang, toGettextLang, toReactIntlLang } from '@plone/volto/helpers/Utils/Utils';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\nimport userSession from '@plone/volto/reducers/userSession/userSession';\nimport ErrorPage from '@plone/volto/error';\nimport languages from '@plone/volto/constants/Languages.cjs';\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\nlet locales = {};\nif (config.settings) {\n  config.settings.supportedLanguages.forEach(lang => {\n    const langFileName = toGettextLang(lang);\n    import(/* @vite-ignore */'@root/../locales/' + langFileName + '.json').then(locale => {\n      locales = _objectSpread(_objectSpread({}, locales), {}, {\n        [toReactIntlLang(lang)]: locale.default\n      });\n    });\n  });\n}\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\nconst supported = new locale.Locales(keys(languages), 'en');\nconst server = express().disable('x-powered-by').head('/*', function (req, res) {\n  // Support for HEAD requests. Required by start-test utility in CI.\n  res.send('');\n}).use(cookiesMiddleware());\nconst middleware = (config.settings.expressMiddleware || []).filter(m => m);\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const {\n      store\n    } = res.locals;\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: err.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })));\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n    res.status(err.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n  const lang = toReactIntlLang(new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString());\n\n  // Minimum initial state for the fake Redux store instance\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    }\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  });\n\n  // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n  const store = configureStore(initialState, history, api);\n  function errorHandler(error) {\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })));\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n    res.status(error.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${req.headers['x-forwarded-proto'] || req.protocol}://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n  res.locals = _objectSpread(_objectSpread({}, res.locals), {}, {\n    store,\n    api,\n    errorHandler\n  });\n  next();\n}\nserver.get('/*', (req, res) => {\n  const {\n    errorHandler\n  } = res.locals;\n  const api = new Api(req);\n  const browserdetect = detect(req.headers['user-agent']);\n  const lang = toReactIntlLang(new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString());\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: _objectSpread(_objectSpread({}, userSession()), {}, {\n      token: authToken\n    }),\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    },\n    browserdetect\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n  persistAuthToken(store, req);\n\n  // @loadable/server extractor\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client']\n  });\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n  loadOnServer({\n    store,\n    location,\n    routes,\n    api\n  }).then(() => {\n    var _store$getState$conte, _store$getState$conte2, _store$getState$conte3;\n    const initialLang = req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language'];\n\n    // The content info is in the store at this point thanks to the asynconnect\n    // features, then we can force the current language info into the store when\n    // coming from an SSR request\n\n    // TODO: there is a bug here with content that, for any reason, doesn't\n    // present the language token field, for some reason. In this case, we\n    // should follow the cookie rather then switching the language\n    const contentLang = (_store$getState$conte = store.getState().content.get) !== null && _store$getState$conte !== void 0 && _store$getState$conte.error ? initialLang : ((_store$getState$conte2 = store.getState().content.data) === null || _store$getState$conte2 === void 0 ? void 0 : (_store$getState$conte3 = _store$getState$conte2.language) === null || _store$getState$conte3 === void 0 ? void 0 : _store$getState$conte3.token) || config.settings.defaultLanguage;\n    if (toBackendLang(initialLang) !== contentLang && url !== '/') {\n      const newLang = toReactIntlLang(new locale.Locales(contentLang).best(supported).toString());\n      store.dispatch(changeLanguage(newLang, locales[newLang], req));\n    }\n    const context = {};\n    resetServerContext();\n    const markup = renderToString(__jsx(ChunkExtractorManager, {\n      extractor: extractor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, __jsx(CookiesProvider, {\n      cookies: req.universalCookies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, __jsx(StaticRouter, {\n      context: context,\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, __jsx(ReduxAsyncConnect, {\n      routes: routes,\n      helpers: api,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }))))));\n    const readCriticalCss = config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n    // If we are showing an \"old browser\" warning,\n    // make sure it doesn't get cached in a shared cache\n    const browserdetect = store.getState().browserdetect;\n    if (config.settings.notSupportedBrowsers.includes(browserdetect === null || browserdetect === void 0 ? void 0 : browserdetect.name)) {\n      res.set({\n        'Cache-Control': 'private'\n      });\n    }\n    const sendHtmlResponse = (res, statusCode, extractor, markup, store, req, config) => {\n      res.status(statusCode).send(`<!doctype html>\n        ${renderToString(__jsx(Html, {\n        extractor: extractor,\n        markup: markup,\n        store: store,\n        criticalCss: readCriticalCss(req),\n        apiPath: res.locals.detectedHost || config.settings.apiPath,\n        publicURL: res.locals.detectedHost || config.settings.publicURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }\n      }))}\n      `);\n    };\n    if (context.url) {\n      res.redirect(flattenToAppURL(context.url));\n    } else if (context.error_code) {\n      res.set({\n        'Cache-Control': 'no-cache'\n      });\n      sendHtmlResponse(res, context.error_code, extractor, markup, store, req, config);\n    } else {\n      sendHtmlResponse(res, 200, extractor, markup, store, req, config);\n    }\n  }, errorHandler).catch(errorHandler);\n});\nexport const defaultReadCriticalCss = () => {\n  const {\n    criticalCssPath\n  } = config.settings.serverConfig;\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n  return readFileSync(criticalCssPath, {\n    encoding: 'utf-8'\n  });\n};\n\n// Exposed for the console bootstrap info messages\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.proxyRewriteTarget = config.settings.proxyRewriteTarget;\nserver.publicURL = config.settings.publicURL;\nexport default server;","map":{"version":3,"names":["existsSync","lstatSync","readFileSync","React","StaticRouter","Provider","express","renderToString","createMemoryHistory","parse","parseUrl","keys","locale","detect","path","ChunkExtractor","ChunkExtractorManager","resetServerContext","CookiesProvider","cookiesMiddleware","debug","routes","config","flattenToAppURL","Html","Api","persistAuthToken","toBackendLang","toGettextLang","toReactIntlLang","changeLanguage","userSession","ErrorPage","languages","configureStore","ReduxAsyncConnect","loadOnServer","locales","settings","supportedLanguages","forEach","lang","langFileName","then","_objectSpread","default","reactIntlErrorHandler","error","supported","Locales","server","disable","head","req","res","send","use","middleware","expressMiddleware","filter","m","all","setupServer","length","err","next","store","locals","errorPage","__jsx","onError","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","context","location","url","message","set","ignoredErrors","includes","status","console","api","universalCookies","get","defaultLanguage","headers","best","toString","initialState","intl","defaultLocale","messages","history","initialEntries","errorHandler","process","env","RAZZLE_API_PATH","host","detectedHost","protocol","apiPath","publicURL","browserdetect","authToken","token","form","body","buildDir","BUILD_DIR","extractor","statsFile","resolve","join","entrypoints","originalUrl","_store$getState$conte","_store$getState$conte2","_store$getState$conte3","initialLang","contentLang","getState","content","data","language","newLang","dispatch","markup","cookies","helpers","readCriticalCss","serverConfig","defaultReadCriticalCss","notSupportedBrowsers","name","sendHtmlResponse","statusCode","criticalCss","redirect","error_code","catch","criticalCssPath","e","f","isFile","encoding","devProxyToApiPath","proxyRewriteTarget"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/server.jsx"],"sourcesContent":["/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport keys from 'lodash/keys';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\n\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\n\nimport { flattenToAppURL } from '@plone/volto/helpers/Url/Url';\nimport Html from '@plone/volto/helpers/Html/Html';\nimport Api from '@plone/volto/helpers/Api/Api';\nimport { persistAuthToken } from '@plone/volto/helpers/AuthToken/AuthToken';\nimport {\n  toBackendLang,\n  toGettextLang,\n  toReactIntlLang,\n} from '@plone/volto/helpers/Utils/Utils';\nimport { changeLanguage } from '@plone/volto/actions/language/language';\n\nimport userSession from '@plone/volto/reducers/userSession/userSession';\n\nimport ErrorPage from '@plone/volto/error';\n\nimport languages from '@plone/volto/constants/Languages.cjs';\n\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    const langFileName = toGettextLang(lang);\n    import(\n      /* @vite-ignore */ '@root/../locales/' + langFileName + '.json'\n    ).then((locale) => {\n      locales = { ...locales, [toReactIntlLang(lang)]: locale.default };\n    });\n  });\n}\n\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\n\nconst supported = new locale.Locales(keys(languages), 'en');\n\nconst server = express()\n  .disable('x-powered-by')\n  .head('/*', function (req, res) {\n    // Support for HEAD requests. Required by start-test utility in CI.\n    res.send('');\n  })\n  .use(cookiesMiddleware());\n\nconst middleware = (config.settings.expressMiddleware || []).filter((m) => m);\n\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\n\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const { store } = res.locals;\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={err.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n\n    res\n      .status(err.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\n\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n\n  const lang = toReactIntlLang(\n    new locale.Locales(\n      req.universalCookies.get('I18N_LANGUAGE') ||\n        config.settings.defaultLanguage ||\n        req.headers['accept-language'],\n    )\n      .best(supported)\n      .toString(),\n  );\n\n  // Minimum initial state for the fake Redux store instance\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n  const store = configureStore(initialState, history, api);\n\n  function errorHandler(error) {\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={error.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n\n    res\n      .status(error.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${\n      req.headers['x-forwarded-proto'] || req.protocol\n    }://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n\n  res.locals = {\n    ...res.locals,\n    store,\n    api,\n    errorHandler,\n  };\n\n  next();\n}\n\nserver.get('/*', (req, res) => {\n  const { errorHandler } = res.locals;\n\n  const api = new Api(req);\n\n  const browserdetect = detect(req.headers['user-agent']);\n\n  const lang = toReactIntlLang(\n    new locale.Locales(\n      req.universalCookies.get('I18N_LANGUAGE') ||\n        config.settings.defaultLanguage ||\n        req.headers['accept-language'],\n    )\n      .best(supported)\n      .toString(),\n  );\n\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: { ...userSession(), token: authToken },\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n    browserdetect,\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n\n  persistAuthToken(store, req);\n\n  // @loadable/server extractor\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client'],\n  });\n\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n\n  loadOnServer({ store, location, routes, api })\n    .then(() => {\n      const initialLang =\n        req.universalCookies.get('I18N_LANGUAGE') ||\n        config.settings.defaultLanguage ||\n        req.headers['accept-language'];\n\n      // The content info is in the store at this point thanks to the asynconnect\n      // features, then we can force the current language info into the store when\n      // coming from an SSR request\n\n      // TODO: there is a bug here with content that, for any reason, doesn't\n      // present the language token field, for some reason. In this case, we\n      // should follow the cookie rather then switching the language\n      const contentLang = store.getState().content.get?.error\n        ? initialLang\n        : store.getState().content.data?.language?.token ||\n          config.settings.defaultLanguage;\n\n      if (toBackendLang(initialLang) !== contentLang && url !== '/') {\n        const newLang = toReactIntlLang(\n          new locale.Locales(contentLang).best(supported).toString(),\n        );\n        store.dispatch(changeLanguage(newLang, locales[newLang], req));\n      }\n\n      const context = {};\n      resetServerContext();\n      const markup = renderToString(\n        <ChunkExtractorManager extractor={extractor}>\n          <CookiesProvider cookies={req.universalCookies}>\n            <Provider store={store} onError={reactIntlErrorHandler}>\n              <StaticRouter context={context} location={req.url}>\n                <ReduxAsyncConnect routes={routes} helpers={api} />\n              </StaticRouter>\n            </Provider>\n          </CookiesProvider>\n        </ChunkExtractorManager>,\n      );\n\n      const readCriticalCss =\n        config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n      // If we are showing an \"old browser\" warning,\n      // make sure it doesn't get cached in a shared cache\n      const browserdetect = store.getState().browserdetect;\n      if (config.settings.notSupportedBrowsers.includes(browserdetect?.name)) {\n        res.set({\n          'Cache-Control': 'private',\n        });\n      }\n\n      const sendHtmlResponse = (\n        res,\n        statusCode,\n        extractor,\n        markup,\n        store,\n        req,\n        config,\n      ) => {\n        res.status(statusCode).send(\n          `<!doctype html>\n        ${renderToString(\n          <Html\n            extractor={extractor}\n            markup={markup}\n            store={store}\n            criticalCss={readCriticalCss(req)}\n            apiPath={res.locals.detectedHost || config.settings.apiPath}\n            publicURL={res.locals.detectedHost || config.settings.publicURL}\n          />,\n        )}\n      `,\n        );\n      };\n\n      if (context.url) {\n        res.redirect(flattenToAppURL(context.url));\n      } else if (context.error_code) {\n        res.set({\n          'Cache-Control': 'no-cache',\n        });\n        sendHtmlResponse(\n          res,\n          context.error_code,\n          extractor,\n          markup,\n          store,\n          req,\n          config,\n        );\n      } else {\n        sendHtmlResponse(res, 200, extractor, markup, store, req, config);\n      }\n    }, errorHandler)\n    .catch(errorHandler);\n});\n\nexport const defaultReadCriticalCss = () => {\n  const { criticalCssPath } = config.settings.serverConfig;\n\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n\n  return readFileSync(criticalCssPath, { encoding: 'utf-8' });\n};\n\n// Exposed for the console bootstrap info messages\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.proxyRewriteTarget = config.settings.proxyRewriteTarget;\nserver.publicURL = config.settings.publicURL;\n\nexport default server;\n"],"mappings":"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","ignoreList":[]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}