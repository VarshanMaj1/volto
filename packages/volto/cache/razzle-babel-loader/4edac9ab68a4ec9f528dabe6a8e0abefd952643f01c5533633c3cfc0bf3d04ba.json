{"ast":null,"code":"var _jsxFileName = \"/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/SearchBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { compose } from 'redux';\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\nimport { addExtensionFieldToSchema } from '@plone/volto/helpers/Extensions/withBlockSchemaEnhancer';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport config from '@plone/volto/registry';\nimport { SearchBlockViewComponent } from './SearchBlockView';\nimport Schema from './schema';\nimport { withSearch, withQueryString } from './hocs';\nimport cloneDeep from 'lodash/cloneDeep';\nconst messages = defineMessages({\n  template: {\n    \"id\": \"Results template\",\n    \"defaultMessage\": \"Results template\"\n  }\n});\nconst SearchBlockEdit = props => {\n  var _config$blocks$blocks, _config$blocks$blocks2;\n  const {\n    block,\n    blocksErrors,\n    onChangeBlock,\n    data,\n    selected,\n    intl,\n    navRoot,\n    contentType,\n    onTriggerSearch,\n    querystring = {}\n  } = props;\n  const {\n    sortable_indexes = {}\n  } = querystring;\n  let schema = Schema({\n    data,\n    intl\n  });\n  schema = addExtensionFieldToSchema({\n    schema,\n    name: 'listingBodyTemplate',\n    items: config.blocks.blocksConfig.listing.variations,\n    intl,\n    title: {\n      id: intl.formatMessage(messages.template)\n    }\n  });\n  const listingVariations = (_config$blocks$blocks = config.blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks.listing) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.variations;\n  let activeItem = listingVariations.find(item => item.id === data.listingBodyTemplate);\n  const listingSchemaEnhancer = activeItem === null || activeItem === void 0 ? void 0 : activeItem.schemaEnhancer;\n  if (listingSchemaEnhancer) schema = listingSchemaEnhancer({\n    schema: cloneDeep(schema),\n    data,\n    intl\n  });\n  schema.properties.sortOnOptions.items = {\n    choices: Object.keys(sortable_indexes).map(k => [k, sortable_indexes[k].title])\n  };\n  const {\n    query = {}\n  } = data || {};\n  // We don't need deep compare here, as this is just json serializable data.\n  const deepQuery = JSON.stringify(query);\n  useEffect(() => {\n    var _data$query, _data$query2;\n    onTriggerSearch('', data === null || data === void 0 ? void 0 : data.facets, data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : _data$query.sort_on, data === null || data === void 0 ? void 0 : (_data$query2 = data.query) === null || _data$query2 === void 0 ? void 0 : _data$query2.sort_order);\n  }, [deepQuery, onTriggerSearch, data]);\n  return __jsx(React.Fragment, null, __jsx(SearchBlockViewComponent, _extends({}, props, {\n    path: getBaseUrl(props.pathname),\n    mode: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  })), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(BlockDataForm, {\n    schema: schema,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    onChangeBlock: onChangeBlock,\n    formData: data,\n    navRoot: navRoot,\n    contentType: contentType,\n    errors: blocksErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })));\n};\nexport default compose(withQueryString, withSearch())(SearchBlockEdit);","map":{"version":3,"names":["React","useEffect","defineMessages","compose","SidebarPortal","BlockDataForm","addExtensionFieldToSchema","getBaseUrl","config","SearchBlockViewComponent","Schema","withSearch","withQueryString","cloneDeep","messages","template","SearchBlockEdit","props","_config$blocks$blocks","_config$blocks$blocks2","block","blocksErrors","onChangeBlock","data","selected","intl","navRoot","contentType","onTriggerSearch","querystring","sortable_indexes","schema","name","items","blocks","blocksConfig","listing","variations","title","id","formatMessage","listingVariations","activeItem","find","item","listingBodyTemplate","listingSchemaEnhancer","schemaEnhancer","properties","sortOnOptions","choices","Object","keys","map","k","query","deepQuery","JSON","stringify","_data$query","_data$query2","facets","sort_on","sort_order","__jsx","Fragment","_extends","path","pathname","mode","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChangeField","value","_objectSpread","formData","errors"],"sources":["/Users/varshanmaji/Projects/volto/packages/volto/src/components/manage/Blocks/Search/SearchBlockEdit.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { compose } from 'redux';\n\nimport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nimport { BlockDataForm } from '@plone/volto/components/manage/Form';\nimport { addExtensionFieldToSchema } from '@plone/volto/helpers/Extensions/withBlockSchemaEnhancer';\nimport { getBaseUrl } from '@plone/volto/helpers/Url/Url';\nimport config from '@plone/volto/registry';\n\nimport { SearchBlockViewComponent } from './SearchBlockView';\nimport Schema from './schema';\nimport { withSearch, withQueryString } from './hocs';\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst messages = defineMessages({\n  template: {\n    id: 'Results template',\n    defaultMessage: 'Results template',\n  },\n});\n\nconst SearchBlockEdit = (props) => {\n  const {\n    block,\n    blocksErrors,\n    onChangeBlock,\n    data,\n    selected,\n    intl,\n    navRoot,\n    contentType,\n    onTriggerSearch,\n    querystring = {},\n  } = props;\n  const { sortable_indexes = {} } = querystring;\n\n  let schema = Schema({ data, intl });\n\n  schema = addExtensionFieldToSchema({\n    schema,\n    name: 'listingBodyTemplate',\n    items: config.blocks.blocksConfig.listing.variations,\n    intl,\n    title: { id: intl.formatMessage(messages.template) },\n  });\n  const listingVariations = config.blocks.blocksConfig?.listing?.variations;\n  let activeItem = listingVariations.find(\n    (item) => item.id === data.listingBodyTemplate,\n  );\n  const listingSchemaEnhancer = activeItem?.schemaEnhancer;\n  if (listingSchemaEnhancer)\n    schema = listingSchemaEnhancer({\n      schema: cloneDeep(schema),\n      data,\n      intl,\n    });\n  schema.properties.sortOnOptions.items = {\n    choices: Object.keys(sortable_indexes).map((k) => [\n      k,\n      sortable_indexes[k].title,\n    ]),\n  };\n\n  const { query = {} } = data || {};\n  // We don't need deep compare here, as this is just json serializable data.\n  const deepQuery = JSON.stringify(query);\n\n  useEffect(() => {\n    onTriggerSearch(\n      '',\n      data?.facets,\n      data?.query?.sort_on,\n      data?.query?.sort_order,\n    );\n  }, [deepQuery, onTriggerSearch, data]);\n\n  return (\n    <>\n      <SearchBlockViewComponent\n        {...props}\n        path={getBaseUrl(props.pathname)}\n        mode=\"edit\"\n      />\n      <SidebarPortal selected={selected}>\n        <BlockDataForm\n          schema={schema}\n          onChangeField={(id, value) => {\n            onChangeBlock(block, {\n              ...data,\n              [id]: value,\n            });\n          }}\n          onChangeBlock={onChangeBlock}\n          formData={data}\n          navRoot={navRoot}\n          contentType={contentType}\n          errors={blocksErrors}\n        />\n      </SidebarPortal>\n    </>\n  );\n};\n\nexport default compose(withQueryString, withSearch())(SearchBlockEdit);\n"],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAE/B,OAAOC,aAAa,MAAM,sDAAsD;AAChF,SAASC,aAAa,QAAQ,qCAAqC;AACnE,SAASC,yBAAyB,QAAQ,yDAAyD;AACnG,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SAASC,wBAAwB,QAAQ,mBAAmB;AAC5D,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,UAAU,EAAEC,eAAe,QAAQ,QAAQ;AACpD,OAAOC,SAAS,MAAM,kBAAkB;AAExC,MAAMC,QAAQ,GAAGZ,cAAc,CAAC;EAC9Ba,QAAQ;IAAA;IAAA;EAAA;AAIV,CAAC,CAAC;AAEF,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EACjC,MAAM;IACJC,KAAK;IACLC,YAAY;IACZC,aAAa;IACbC,IAAI;IACJC,QAAQ;IACRC,IAAI;IACJC,OAAO;IACPC,WAAW;IACXC,eAAe;IACfC,WAAW,GAAG,CAAC;EACjB,CAAC,GAAGZ,KAAK;EACT,MAAM;IAAEa,gBAAgB,GAAG,CAAC;EAAE,CAAC,GAAGD,WAAW;EAE7C,IAAIE,MAAM,GAAGrB,MAAM,CAAC;IAAEa,IAAI;IAAEE;EAAK,CAAC,CAAC;EAEnCM,MAAM,GAAGzB,yBAAyB,CAAC;IACjCyB,MAAM;IACNC,IAAI,EAAE,qBAAqB;IAC3BC,KAAK,EAAEzB,MAAM,CAAC0B,MAAM,CAACC,YAAY,CAACC,OAAO,CAACC,UAAU;IACpDZ,IAAI;IACJa,KAAK,EAAE;MAAEC,EAAE,EAAEd,IAAI,CAACe,aAAa,CAAC1B,QAAQ,CAACC,QAAQ;IAAE;EACrD,CAAC,CAAC;EACF,MAAM0B,iBAAiB,IAAAvB,qBAAA,GAAGV,MAAM,CAAC0B,MAAM,CAACC,YAAY,cAAAjB,qBAAA,wBAAAC,sBAAA,GAA1BD,qBAAA,CAA4BkB,OAAO,cAAAjB,sBAAA,uBAAnCA,sBAAA,CAAqCkB,UAAU;EACzE,IAAIK,UAAU,GAAGD,iBAAiB,CAACE,IAAI,CACpCC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKhB,IAAI,CAACsB,mBAC7B,CAAC;EACD,MAAMC,qBAAqB,GAAGJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,cAAc;EACxD,IAAID,qBAAqB,EACvBf,MAAM,GAAGe,qBAAqB,CAAC;IAC7Bf,MAAM,EAAElB,SAAS,CAACkB,MAAM,CAAC;IACzBR,IAAI;IACJE;EACF,CAAC,CAAC;EACJM,MAAM,CAACiB,UAAU,CAACC,aAAa,CAAChB,KAAK,GAAG;IACtCiB,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACtB,gBAAgB,CAAC,CAACuB,GAAG,CAAEC,CAAC,IAAK,CAChDA,CAAC,EACDxB,gBAAgB,CAACwB,CAAC,CAAC,CAAChB,KAAK,CAC1B;EACH,CAAC;EAED,MAAM;IAAEiB,KAAK,GAAG,CAAC;EAAE,CAAC,GAAGhC,IAAI,IAAI,CAAC,CAAC;EACjC;EACA,MAAMiC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;EAEvCtD,SAAS,CAAC,MAAM;IAAA,IAAA0D,WAAA,EAAAC,YAAA;IACdhC,eAAe,CACb,EAAE,EACFL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsC,MAAM,EACZtC,IAAI,aAAJA,IAAI,wBAAAoC,WAAA,GAAJpC,IAAI,CAAEgC,KAAK,cAAAI,WAAA,uBAAXA,WAAA,CAAaG,OAAO,EACpBvC,IAAI,aAAJA,IAAI,wBAAAqC,YAAA,GAAJrC,IAAI,CAAEgC,KAAK,cAAAK,YAAA,uBAAXA,YAAA,CAAaG,UACf,CAAC;EACH,CAAC,EAAE,CAACP,SAAS,EAAE5B,eAAe,EAAEL,IAAI,CAAC,CAAC;EAEtC,OACEyC,KAAA,CAAAhE,KAAA,CAAAiE,QAAA,QACED,KAAA,CAACvD,wBAAwB,EAAAyD,QAAA,KACnBjD,KAAK;IACTkD,IAAI,EAAE5D,UAAU,CAACU,KAAK,CAACmD,QAAQ,CAAE;IACjCC,IAAI,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACZ,CAAC,EACFX,KAAA,CAAC5D,aAAa;IAACoB,QAAQ,EAAEA,QAAS;IAAA8C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAChCX,KAAA,CAAC3D,aAAa;IACZ0B,MAAM,EAAEA,MAAO;IACf6C,aAAa,EAAEA,CAACrC,EAAE,EAAEsC,KAAK,KAAK;MAC5BvD,aAAa,CAACF,KAAK,EAAA0D,aAAA,CAAAA,aAAA,KACdvD,IAAI;QACP,CAACgB,EAAE,GAAGsC;MAAK,EACZ,CAAC;IACJ,CAAE;IACFvD,aAAa,EAAEA,aAAc;IAC7ByD,QAAQ,EAAExD,IAAK;IACfG,OAAO,EAAEA,OAAQ;IACjBC,WAAW,EAAEA,WAAY;IACzBqD,MAAM,EAAE3D,YAAa;IAAAiD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACtB,CACY,CACf,CAAC;AAEP,CAAC;AAED,eAAexE,OAAO,CAACS,eAAe,EAAED,UAAU,CAAC,CAAC,CAAC,CAACK,eAAe,CAAC","ignoreList":[]},"metadata":{"react-intl":{"messages":[{"id":"Results template","defaultMessage":"Results template"}]}},"sourceType":"module","externalDependencies":[]}